{"title": "Selecting Microarchitecture Configuration of Processors for Internet of  Things", "tag": "eess", "abstract": " The Internet of Things (IoT) makes use of ubiquitous internet connectivity to form a network of everyday physical objects for purposes of automation, remote data sensing and centralized management/control. IoT objects need to be embedded with processing capabilities to fulfill these services. The design of processing units for IoT objects is constrained by various stringent requirements, such as performance, power, thermal dissipation etc. In order to meet these diverse requirements, a multitude of processor design parameters need to be tuned accordingly. In this paper, we propose a temporally efficient design space exploration methodology which determines power and performance optimized microarchitecture configurations. We also discuss the possible combinations of these microarchitecture configurations to form an effective two-tiered heterogeneous processor for IoT applications. We evaluate our design space exploration methodology using a cycle-accurate simulator (ESESC) and a standard set of PARSEC and SPLASH2 benchmarks. The results show that our methodology determines microarchitecture configurations which are within 2.23%-3.69% of the configurations obtained from fully exhaustive exploration while only exploring 3%-5% of the design space. Our methodology achieves on average 24.16x speedup in design space exploration as compared to fully exhaustive exploration in finding power and performance optimized microarchitecture configurations for processors. ", "text": "makes ubiquitous internet connectivity form network everyday physical objects purposes automation remote data sensing centralized management/control. objects need embedded processing capabilities fulﬁll services. design processing units objects constrained various stringent requirements performance power thermal dissipation etc. diverse requirements multitude processor design parameters need tuned accordingly. paper propose temporally efﬁcient design space exploration methodology determines power performance optimized microarchitecture conﬁgurations. also discuss possible combinations microarchitecture conﬁgurations form effective two-tiered heterogeneous processor applications. evaluate design space exploration methodology using cycle-accurate simulator standard parsec splash benchmarks. results show methodology determines microarchitecture conﬁgurations within conﬁgurations obtained fully exhaustive exploration exploring design space. methodology achieves average speedup design space exploration compared fully exhaustive exploration ﬁnding power performance optimized microarchitecture conﬁgurations processors. consumer markets. given rise internet things wherein everyday physical objects interconnected communication network purposes automation remote data sensing centralized management/control. creates intelligent invisible network fabric sensed controlled programmed allows objects ecosystem communicate directly internet things scope enabled objects containing sensing actuating elements along embedded hardware software components facilitate data aggregation network connectivity security. enabled object designed perform application speciﬁc task using data gathered using information made available objects network. widespread deployment objects recent years various applications like healthcare industry transportation massive deployment objects results generation large volumes data. data communication processing real-time analysis security large volumes data important issues need resolved efﬁcient growth ecosystem years come. current model end-devices designed simple cost effective possible. thus designed limited processing capabilities enough securely connect ofﬂoad data cloud. almost complex data management functionalities data ﬁltering analysis delegated cloud datacenters core units model. growth data volume ecosystem rises several signiﬁcant challenges renders model infeasible. list three challenges. network overload core network bandwidth vital resource ecosystem must used efﬁciently. ever increasing number objects relaying data core network cloud network severely overloaded. network overloads introduce latency critical data processing operations impact applications healthcare transportation require real time data processing. data security data communication ecosystem mostly occurs public network infrastructure. order ensure secure data communication several complex security protocols must applied data. volume data requiring security increases number objects deployed ecosystem increases. applying complex security protocols large volumes data requires extensive computing operations cannot matched energy budget objects. upgradability landscape continues evolve becomes necessary upgrade deployments frequent periods. objects must designed support hassle free addition features remote access. ideal model objects must able upgrade complex features without deployment objects without direct human involvement. limited processing ability addition features existing objects challenging even infeasible. objects added processing units data management operations ﬁltering analysis carried within local network. objects thus communicate summaries information obtained ﬁltering aggregated data cloud. contributes signiﬁcantly freeing core network bandwidth. reduction data volume also reduces energy expenditure data security less data requires lesser number computing operations secure. processing ability also makes deployments ﬂexible upgrades newer features added without signiﬁcantly burdening system. processing units interfaced objects require optimal balance power performance since many objects battery powered desirable objects operate entire lifetime battery deployed although great progress made battery technology batteries still able keep pace demands modern electronics power optimization must considered parallel performance optimization. levels power optimized performance deployments two-tiered heterogeneous processor architecture suitable two-tiered architecture shown figure consists host processor optimized high performance interfaced number interface processors optimized power operation. interface processors collect data data-sensing elements control actuating elements. processors always operated active mode power operation severely impact battery life. higher function ﬁltering analysis data implementation complex security protocols performed host processor. since operations infrequent power hungry host processor mostly operated sleep state activated intermittently limited durations. designing efﬁcient embedded processors poweroptimized performance tedious process. preventing high performance processors violating power budget requirements dictated market enormous design challenge opportunities optimizing processor design power greatest architecture level thus power performance optimizations performed deﬁning microarchitecture conﬁguration processors. microarchitecture conﬁguration consists several processor design parameters tuned based impact overall power performance processor. selecting microarchitecture conﬁguration involves rigorous design space exploration search space consisting possible settings tunable processor design parameters. main challenges need addressed process. firstly design space exploration methodology employed select microarchitecture conﬁgurations processors objects must temporally efﬁcient. long processor design time leads long time market results lowered proﬁts shorter product life cycle market also lacks accepted industry standards market ﬁrst greatest opportunity inﬂuence standards secondly design space exploration methodology must balance processor power consumption performance conﬂicting design metrics possible optimal solutions optimization problems conﬂicting design metrics. optimization problem instead modeled optimal production frontier problem also known pareto efﬁciency problem. multiple solutions obtained problems solution favors conﬂicting metrics. design space exploration methodology must intelligently choose best trade-off solution based application speciﬁc requirements. paper propose temporally efﬁcient design space exploration methodology determining power performance optimized microarchitecture conﬁgurations embedded processors used objects. combination exhaustive greedy one-shot search methods perform design space exploration. verify effectiveness methodology testing cycle accurate simulator using large standard benchmarks varying workloads. temporally efﬁcient design space exploration methodology microarchitecture conﬁgurations low-power high-performance optimized embedded processors used objects. include threshold parameter design space exploration methodology manipulated system designer control design time based time market constraints. propose exhaustive greedy one-shot search algorithms yield microarchitecture conﬁgurations .%-.% microarchitecture conﬁgurations obtained fully exhaustive search. elaborate different phases section section describe cycle-accurate simulator benchmarks used test methodology. discuss results section present conclusions future research directions section vii. several design companies released articles techniques increasing processing capabilities objects. articles guide selection processors objects others describe power optimized processor architectures deployments. proposed processor architecture consisting multiple homogeneous processors single object serving different purpose deﬁned system three cortex-m processors handle network connectivity manage interface sensors actuators host processor controlling two. stated multiple processors better lowering power consumption objects since processor serving current task would active mode rest would sleep mode. also proposed guide selecting microcontrollers objects guide argued high-end microcontrollers suitable deployments reasons. firstly highend microcontrollers complete processing tasks sooner enter sleep mode conserve power secondly larger ﬂash sizes available high-end microcontrollers facilitate implementation complex networking protocols without addition processors system. articles clearly demonstrate need poweroptimized performance deployments. synopsys also proposed multiple processors deployments described twotiered processor architecture objects ultra power embedded processors used interface sensing elements collect ﬁlter process data host processor used manage embedded processors. processor architecture lowered power consumption keeping power hungry host processor mostly sleep mode similar concept used arm. synopsys also discussed optimization processors using conﬁgurable hardware extensions sensor applications stated adding custom hardware extensions executing typical sensor functions reduces processor cycle count required execute sensor applications. reduction cycle count lowers energy consumption either lowering clock frequency keeping execution time power shorter execution time. apart research carried design companies processor design also extensively studied academia many research works literature involving optimized processor design. works employ design space exploration techniques utilizing search methods like exhaustive greedy search optimizing algorithms like genetic evolutionary algorithms. givargis developed exploration methodology named platune carried exhaustive searches stages ﬁrst clusters strongly interconnected parameters obtain pareto-optimal conﬁgurations local cluster second clusters obtain global paretooptimal solution. approach could explore design spaces large conﬁgurations took order days complete. palesi argued high exploration time platune formation large partial search spaces clustering process. palesi improved platune exploration methodology introducing threshold value distinguished clusters based size partial search-space. exhaustive search method used clusters partial search-spaces smaller threshold value genetic exploration algorithm used larger spaces. improvement able achieve reduction simulation time still remaining within results obtained exhaustive search. genetic algorithms also used system multicube silvano multicube system deﬁned automatic design space exploration algorithm could quickly determine approximate pareto front given design requirements. munir proposed another alternative overcome overhead exhaustive search work dynamic optimization wireless sensor networks. approach divided phases. ﬁrst phase one-shot search algorithm selected initial parameter settings ordered parameters based signiﬁcance towards application requirements. second phase greedy algorithm used search design space. approach yielded design conﬁguration within optimal conﬁguration exploring design space. paper improve work carried munir leverage similar approach design space exploration phases set-partitioning phase exhaustive search phase. addition exhaustive search phase aims increasing degree closeness optimal solution exploring larger portion design space argued silvano limit number conﬁgurations considered exhaustive search determined set-partitioning phase uses threshold value design space exploration methodology determining optimal microarchitecture embedded processors shown figure methodology implemented four phases initial one-shot search conﬁguration setpartitioning exhaustive search conﬁguration tuning greedy search conﬁguration tuning. search conﬁguration tuning parameter signiﬁcance phase carried initial one-shot parameter signiﬁcance ordering module. microarchitecture conﬁguration parameter settings consists possible settings tunable microarchitecture parameter provided input initial one-shot search conﬁguration tuning module system designer. module uses parameter settings generate initial test conﬁgurations. initial conﬁguration passed cycleaccurate simulator. test benchmarks evaluating microarchitecture conﬁgurations provided input simulator system designer. simulator executes initial test conﬁguration separately test benchmark speciﬁed. test benchmarks provide varying workloads testing initial test conﬁgurations. system designer also provides weights balancing design metrics input simulator. weights used specify preferred tradeoff conﬂicting design metrics. test conﬁgurations search conﬁguration tuning module determine best initial setting tunable microarchitecture parameter. simulation results forwarded parameter signiﬁcance ordering module tunable microarchitecture parameters ordered based signiﬁcance design metrics considered. ordered signiﬁcance values communicated set-partitioning module separates parameters search sets exhaustive greedy. parameters separated based exploration threshold value provided system designer. exploration threshold value used control search space exhaustive search phase design space exploration methodology. exhaustive search phase longest phase design space exploration exhaustive search communicated exhaustive search conﬁguration tuning module. module generates test conﬁgurations using possible combinations tunable processor design parameters. parameters exhaustive search retain best settings initial one-shot search conﬁguration tuning process. test conﬁgurations evaluated cycle-accurate simulator determine test conﬁguration possessing best tradeoff conﬂicting design metrics considered. best settings microarchitecture parameters exhaustive search communicated greedy search conﬁguration tuning module. greedy search conﬁguration tuning module generates test conﬁgurations using processor design parameters separated greedy search set. greedy search algorithm used generate test conﬁgurations. microarchitecture parameters exhaustive search retain best setting obtained exhaustive search simulation process. parameters neither search sets retain best settings initial one-shot search conﬁguration tuning process. best conﬁguration obtained greedy search conﬁguration tuning process communicated back processor designer optimal microarchitecture processor preferred tradeoff conﬂicting design metrics. consider number tunable parameters available describe microarchitecture conﬁguration embedded processor iot. list tunable parameters deﬁned following here represents cartesian product lists throughout paper term denote state space composed tunable parameters. maintain generality referring state space composed tunable parameters attach subscript term referring design conﬁguration belongs state space term attach subscripts refer speciﬁc design conﬁgurations. example state consists ﬁrst setting tunable parameter written methodology design conﬁgurations compared based objective functions. objective function design conﬁguration weighted normalized design metrics obtained simulating design conﬁguration. number design metrics normalized values design metrics obtained simulation. optimization problem considered paper minimize value objective function design metrics chosen values favorable design choice. example considering performance metric design goal maximize performance. model objective function execution time measure performance. minimizing execution time would minimizing objective function still modeling design goal maximizing performance. optimization problem test benchmark deﬁned follows proposed design space exploration methodology consists four distinct phases. section elaborate steps involved phase using notation section iii. phase methodology best initial setting tunable microarchitecture parameter determined using one-shot search conﬁguration tuning process. one-shot search process based single factor analysis effective heuristic approach used design space exploration unlike single factor analysis wherein parameters settings zero value non-zero value setting one-shot search works parameters non-zero value settings. one-shot search process parameters evaluated basis. test conﬁgurations generated parameter ﬁrst setting last settings list settings current parameter. remaining parameters arbitrarily ﬁrst setting corresponding list settings. steps involved initial one-shot search conﬁguration tuning determining parameter signiﬁcance detailed algorithm ﬁrst last test conﬁgurations generated evaluating tunable microarchitecture parameter denoted respectively. conﬁgurations tested cycle-accurate simulator. results simulation objective functions corresponding respectively determined. objective function values used determine best initial setting well signiﬁcance microarchitecture parameter. magnitude difference stored parameter signiﬁcance used parameter signiﬁcance. higher magnitude difference benchmark higher signiﬁcance parameter workload characterized benchmark sign difference used pick best initial setting parameter difference positive ﬁrst setting parameter chosen best setting otherwise last setting chosen. best settings set-partitioning phase presented algorithm shows parameter signiﬁcance values determined ﬁrst phase methodology used separate list tunable microarchitecture parameters exhaustive greedy search sets. first parameter signiﬁcance |dk| benchmark sorted descending order magnitude using sortdescending function. index information sorted values preserved indexes example ﬁfth entry greatest value become ﬁrst entry ﬁrst entry indexes indexes used sort list tunable microarchitecture parameters list sizes sorting parameters higher signiﬁcance towards start parameters lower signiﬁcance towards set. list parameters divided three subsets exhaustive search greedy search one-shot search sets. exhaustive search gets parameters highest signiﬁcance. number parameters separated exhaustive search depends exploration threshold value provided system designer. threshold value separating exhaustive search parameters remaining parameter list separated greedy search one-shot search sets. list remaining parameter divided halves upper half ceil/) separated greedy search lower half separated one-shot search set. observe empirically dividing list remaining parameters halves provides efﬁcient design space exploration without signiﬁcantly compromising solution quality. parameters separated one-shot search explored left best settings determined algorithm algorithm details steps involved exhaustive search process. exhaustive search process determines best settings parameters exhaustive search first settings parameters exhaustive search assigned parameters assigned best settings best settings determined initial one-shot search conﬁguration tuning process described algorithm settings make partial test design conﬁguration next partial state space formed parameters exhaustive search every possible partial test design conﬁguration δsej partial state space test design conﬁguration form complete simulatable test design conﬁgurations. complete test design conﬁguration evaluated simulator. objective function value obtained complete test design conﬁguration simulator. algorithm keeps track smallest objective function value encountered search process represents best objective function value. design conﬁguration results objective function value less changed minimum value best settings updated corresponding design conﬁguration. ﬁnal phase methodology described algorithm best settings parameters greedy search determined. parameter sign parameter signiﬁcance checked determine whether ﬁrst setting last setting chosen best setting ﬁrst phase methodology. sign parameter signiﬁcance positive indicates ﬁrst setting parameter yields smaller objective function compared last. sign negative indicates last setting parameter yields smaller objective function compared ﬁrst. assume setting yields smallest objective function lies closer towards setting yields smallest objective function initial one-shot search conﬁguration tuning process. ensure search process starts setting yielded smallest objective function initial one-shot search conﬁguration tuning process sort parameter settings descending order left unchanged default ascending order greedy search process parameters greedy search considered time. first partial test design conﬁguration δsgp formed using exhaustive search one-shot search non-current parameters greedy search set. parameters exhaustive search assigned best values determined exhaustive search conﬁguration tuning process. parameters one-shot search retain best settings determined initial one-shot conﬁguration tuning process. non-current parameters greedy search assigned best settings ways. non-current parameter already processed greedy search optimization process parameter assigned best setting obtained process. non-current parameter processed parameter assigned best setting obtained initial one-shot search conﬁguration tuning process. simulator test microarchitecture conﬁgurations generated methodology. esesc cycle-accurate chip multiprocessor simulator simulator. out-of-order risc running instruction set. used benchmarks parsec splash benchmark suite test methodology. parsec splash benchmark suite collection standardized benchmarks provides diverse range workloads evaluation processors. tested design space exploration methodology separately low-power high-performance processor design. combined microarchitecture conﬁgurations obtained tests form two-tiered heterogeneous processor architecture. microarchitecture conﬁguration obtained low-power processor design tests low-power optimized interface used implement processors two-tiered architecture. microarchitecture conﬁguration obtained highperformance processor design tests used implement high-performance optimized host processor upper tier two-tiered architecture. list microarchitecture parameters considered testing methodology along possible settings parameter listed table used different range settings low-power high-performance processor design. range settings listed table lowpower design used design low-power optimized interface processors. design space cardinality lowpower processor design conﬁgurations. range settings listed table high-performance design used design high-performance optimized host processor. design space cardinality high-performance processor design conﬁgurations. combined settings current parameter processed form complete simulatable test design conﬁguration conﬁguration evaluated cycleaccurate simulator. resulting objective function compared best objective function holds smallest value objective function encountered thus search process. similar exhaustive search process design conﬁguration results objective function value less changed minimum value best settings updated corresponding design conﬁguration. however search process encounters design conﬁguration results objective function value greater search process current parameter terminated next parameter parameter list explored. selecting favorable tradeoff solution figure shows pareto front obtained benchmark high-performance optimization requirement. pareto front generated using normalized values total power execution time design metrics. front represents conﬂicting interdependency power performance processor. shows increasing performance processor degrades power efﬁciency whereas increasing power efﬁciency degrades performance. thus impossible determine microarchitecture conﬁguration results metrics optimal values. goal design space exploration methodology determine balance conﬂicting design metrics. suitable tradeoff metrics selected using preference speciﬁed using weights assigned metric. experiments speciﬁed weights power performance metrics respectively deﬁne linear objective function figure shows objective function plotted along pareto front. note objective function forms straight line powerused power performance design metrics evaluate microarchitecture conﬁgurations lowpower high-performance optimized processors. used normalized value total dynamic power leakage power across cores processor power metric normalized value total execution time performance metric. used weights presented table specify preference conﬂicting design metrics power performance. linear objective function used evaluation test microarchitecture conﬁgurations section present results obtained testing methodology. section divided subsections. ﬁrst subsection present results validate design space exploration methodology second subsection discuss applicability microarchitecture conﬁgurations important cases. compared microarchitecture conﬁguration results obtained fully exhaustive search design space. tested methodology exploration threshold threshold value upper bound limits partial state space exhaustive search phase methodology. parameter signiﬁcance figure shows normalized values parameter signiﬁcance different parsec benchmarks. normalization carried using maximum values total power total execution time obtained initial one-shot search conﬁguration tuning process. parameter signiﬁcance values calculated ﬁrst phase methodology initial one-shot search conﬁguration tuning. observe signiﬁcance tunable processor design parameters varies based type workload offered test benchmarks. test benchmarks three signiﬁcant processor design parameters. note operating frequency processor design parameter highest signiﬁcance test benchmarks followed core count second signiﬁcant design parameter. certain test benchmarks size cache cache also highly signiﬁcant overall design. large signiﬁcance cache sizes result large working sets data-parallel granularity offered test benchmarks. performance graph slope /we. observe objective function tangent pareto front power-performance value pair microarchitecture conﬁguration obtained solution methodology. comparison fully exhaustive search veriﬁed microarchitecture conﬁguration obtained solution methodology comparing solution obtained running fully exhaustive search design space. present comparison benchmark example table table shows side-by-side comparison microarchitecture conﬁgurations obtained proposed methodology obtained fully exhaustive search. comparing values signiﬁcant parameters like operating frequency core-count match exactly parameters differ slightly. table also contains values total power execution time obtained conﬁgurations. comparing values design metrics total power execution time values obtained methodology within respectively total power execution time values obtained fully exhaustive exploration. achieve microarchitecture conﬁgurations total power values within low-power optimized processor execution time within high-performance optimized processors compared fully exhaustive search. conﬁgurations obtained exploring processor design space results methodology average speedup compared fully exhaustive exploration design space. based type size workload offered test benchmarks separate four different categories relates application process. table shows categorization test benchmarks. cholesky radix benchmarks splash benchmark suite categorized data sensing aggregation. cholesky benchmark sparse matrix factorization kernel radix benchmark integer sort kernel cholesky benchmark representative data sensing applications data acquired multiple sensor sources transformed useful format. radix benchmark representative data aggregation indexing sorting storing operations carried sensed data. benchmarks useful determining microarchitecture conﬁgurations low-power optimized interface processors two-tiered heterogeneous processor architecture. complex applications requiring high level processing capabilities. blackscholes freqmine benchmarks parsec benchmark suite listed data analysis data mining. blackscholes benchmark ﬁnancial analysis benchmark analytically solves large sets partial differential equations freqmine benchmark data mining kernel implements frequent itemset mining benchmarks representative data analysis ﬁltering operations need carried large volumes sensor data network. facesim fluidanimate benchmarks parsec benchmark suite listed graphics. facesim benchmark generates visually realistic model human face fluidanimate benchmark simulates incompressible ﬂuid interactive animation purposes graphical applications important objects need interact users graphical user interfaces. benchmark splash benchmark suite listed signal processing communication. benchmark implementation fast fourier transform algorithm optimized minimize interprocess communication signal processing communication common applications network. important digital signal processing algorithm required communication data software deﬁned radios benchmarks require higher processing capabilities useful determining microarchitecture conﬁgurations high-performance optimized host processor two-tiered heterogeneous processor architecture. low-power optimized conﬁgurations obtained cholesky microarchitecture radix benchmarks splash benchmark suite. conﬁgurations note low-power optimized processor lowest operating frequency core count selected. result interpreted intuitively high operating frequency high number cores processor increases power consumption processor. also note conﬁgurations large cache sizes. large workload offered test benchmarks. representative growing ecosystem large volumes data gathered large number sensing elements. values total power execution times microarchitecture conﬁgurations also shown table observe power values range hundred milliwatts execution time range hundred milliseconds. values within operational requirements deployments. conﬁgurations implement interface processors two-tiered heterogeneous processor architecture. low-power requirements processors always operated active mode without impacting power budget deployments microarchitecture conﬁguration high-performance optimized processors microarchitecture conﬁgurations obtained blackscholes freqmine facesim fluidanimate benchmarks parsec benchmark suite benchmark splash benchmark suite. analyze microarchitecture conﬁgurations obtained test benchmarks according categorization discussed subsection vi-b. observe data analysis data mining applications represented blackscholes freqmine benchmarks higher performance achieved primarily increase operating frequency. note size cache applications also high highly data-parallel benchmarks. size cache blackscholes cache freqmine also high also result data-parallelism benchmarks. graphics applications represented facesim fluidanimate benchmarks higher performance attributed increase operating frequency. benchmarks also highly data-parallel explains large cache cache cache resulting microarchitecture conﬁgurations. signal processing communication applications represented benchmark performance improvement similar applications attained increase operating frequency. however requires larger instruction cache compared larger data caches applications. higher cache could result benchmark optimized interprocess communication. microarchitecture conﬁguration also listed table vii. conﬁgurations high total power values range watts signiﬁcantly execution time values range tens milliseconds. conﬁgurations implement host processor two-tiered heterogeneous processor architecture. high-power requirement processors mostly kept sleep mode activated intermittently short durations save energy prolong battery life. processors shorter execution times execute tasks quickly sleep thus decreasing duration active. paper proposed temporally efﬁcient design space exploration methodology selecting microarchitecture conﬁgurations processors exploration methodology consisted four phases. ﬁrst phase determined best initial settings tunable processor design parameters using initial one-shot search method. also calculated signiﬁcance design parameter overall design phase. results phase used second phase separate processor design parameters distinct search sets using exploration threshold value supplied system designer. third fourth phase methodology implemented exhaustive greedy search methods prune search sets determine best microarchitecture conﬁguration processor. tested methodology design spaces determining low-power optimized determining high-performance optimized processors iot. validated results obtained methodology comparing solutions obtained fully exhaustive exploration design spaces. results revealed methodology obtained microarchitecture conﬁgurations close within .%–.% conﬁgurations obtained fully exhaustive search. methodology explored overall design space determine high quality solutions. resulted average speedup design space exploration compared time required fully exhaustive exploration. also described two-tiered heterogeneous processor architecture incorporating power-optimized performance objects. used results obtained evaluation design space exploration methodology describe two-tiered architecture. categorized test benchmarks four different categories relating possible cases analyze microarchitecture conﬁgurations determined benchmarks make assertions processors objects. determined low-power optimization microarchitecture conﬁgurations lower core count lower operating frequency suitable. high-performance optimization improvement performance primarily results increase operating frequency. also analyzed cache hierarchy different microarchitecture conﬁgurations related type size workloads offered test benchmarks. future plan investigate microarchitecture conﬁgurations ultra-low power processors iot. also intend test design space exploration methodology using standard benchmarks. also improve methodology incorporating better optimization techniques like genetic evolutionary algorithms machine-learning. also plan study practical applicability twotiered heterogeneous processor model processors objects compare model processor architecture models currently market. developing solutions internet things intel tech. rep. matalon klein walls embedded system power consumption software hardware issue? mentor graphics tech. rep. opportunity demands approach mcu-based embedded designs rapidly moving market requires integrated silicon/software platform renesas synergy tech. rep. adegbija rogacs patel gordon-ross enabling rightprovisioned microprocessor architectures internet things asme proceedings international mechanical engineering congress exposition houston texas michanan dewri rutherford understanding powerperformance tradeoff pareto analysis live performance data proceedings international green computing conference dallas texas chen chen z.-h. zhou effective efﬁcient microprocessor design space exploration using unlabeled design conﬁgurations transactions intelligent systems technology vol. monchiero canal gonzalez power/performance/thermal design-space exploration multicore architectures ieee transactions parallel distributed systems vol. palesi givargis multi-objective design space exploration using genetic algorithms proceedings international symposium hardware/software codesign estes park silvano fornaciari palermo zaccaria castro martinez bocchio zafalon avasare vanmeerbeeck ykman-couvreur wouters kavka onesti turco bondi mariani posadas villar dongrui shibin multicube multi-objective design space exploration multi-core architectures proceedings ieee computer society annual symposium vlsi lixouri kefalonia munir gordon-ross lysecky lysecky lightweight dynamic optimization methodology application metrics estimation model wireless sensor networks sustainable computing informatics systems vol. ardestani renau esesc fast multicore simulator using time-based sampling proceedings ieee international symposium high performance computer architecture washington ohara torrie singh gupta splash- programs characterization methodological considerations international symposium computer architecture santa margherita ligure italy prasanna kansakar student department computer science kansas state university manhattan research interests internet things embedded cyber-physical systems computer architecture multicore trustworthy systems hardware-based security. kansakar degree computer science engineering university nevada reno student member ieee. arslan munir currently assistant professor department computer science kansas state university holds michelle munson-serban simu keystone research faculty scholarship college engineering. electrical computer engineering department rice university houston texas june received m.a.sc. university british columbia vancouver canada ph.d. university florida gainesville florida worked software development engineer mentor graphics embedded systems division. embedded cyberphysical systems secure trustworthy systems hardware-based security computer architecture multicore parallel computing distributed computing reconﬁgurable computing artiﬁcial intelligence safety security data analytics fault tolerance. munir received many academic awards including doctoral fellowship natural sciences engineering research council canada. earned gold medals best performance electrical engineering gold medals academic roll honor securing rank pre-engineering provincial examinations senior member ieee.", "year": "2018"}