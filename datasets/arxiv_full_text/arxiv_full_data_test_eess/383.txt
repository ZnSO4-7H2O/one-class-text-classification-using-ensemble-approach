{"title": "Scalable Preprocessing of High Volume Bird Acoustic Data", "tag": "eess", "abstract": " In this work, we examine the problem of efficiently preprocessing high volume bird acoustic data. We combine several existing preprocessing steps including noise reduction approaches into a single efficient pipeline by examining each process individually. We then utilise a distributed computing architecture to improve execution time. Using a master-slave model with data parallelisation, we developed a near-linear automated scalable system, capable of preprocessing bird acoustic recordings 21.76 times faster with 32 cores over 8 virtual machines, compared to a serial process. This work contributes to the research area of bioacoustic analysis, which is currently very active because of its potential to monitor animals quickly at low cost. Overcoming noise interference is a significant challenge in many bioacoustic studies, and the volume of data in these studies is increasing. Our work makes large scale bird acoustic analyses more feasible by parallelising important bird acoustic processing tasks to significantly reduce execution times. ", "text": "work examine problem eﬃciently preprocessing high volume bird acoustic data. combine several existing preprocessing steps including noise reduction approaches single eﬃcient pipeline examining process individually. using master-slave model data parallelisation developed near-linear automated scalable system capable preprocessing bird acoustic recordings times faster cores virtual machines compared serial process. work contributes research area bioacoustic analysis currently active potential monitor animals quickly cost. overcoming noise interference signiﬁcant challenge many bioacoustic studies volume data studies increasing. work makes large scale bird acoustic analyses feasible parallelising important bird acoustic processing tasks signiﬁcantly reduce execution times. bird monitoring recently great research interest broad range applications including tracking migration monitoring biodiversity tracking population size monitoring highly important used measure human impact environment current approach bird monitoring sensors record vocalisations. science analysing animal vocalisations called bioacoustics. almost bioacoustic analyses require audio preprocessed form suitable analysis. could include data compression techniques speed processing removing unnecessary audio channels downsampling also include improving quality audio reducing noise interference challenge many bioacoustic studies noise mask vocalisations interest noise considered sound produced bird. great interest remove noises processing focus parts recording containing bird sound without interference. many approaches already exist detecting removing noise multiple sources currently many bioacoustic preprocessing approaches applied individually manual semi-automated way. however approaches well suited large scale studies time required process recordings recorders deployed larger numbers across diﬀerent natural environments collecting bioacoustic data high volumes sometimes order hundreds gigabytes moreover preprocessing made multiple steps previous work consider eﬃciently combine processes together. thus trivial even apply oﬀ-the-shelf solution hadoop process large amounts data. attempts scale processing bioacoustic data using distributed systems focus preprocessing steps oﬀ-the-shelf solutions overhead utilise level control data resulting ineﬃciencies. work examine preprocess high volume bird acoustic data quickly eﬃciently. achieve this combine existing preprocessing steps eﬃcient processing pipeline. includes compression removal several types noise namely stationary background noise rain cicada choruses. also remove silence improve processing eﬃciency. order perform approaches signiﬁcant time saved skipping unneeded processes ﬁles. order determined examining much audio process removes eﬀect processes accuracy others. pipeline across multiple machines eﬃcient scalable manner. greatly increases computing power available processing pipeline increasing processing speeds making processing large amounts bioacoustics data feasible. emphasis placed scalability aiming linear proportionality improvement rate execution time amount resources used. section introduces objectives work listing processes using. introduces processing pipeline giving brief overview derive discussing approach distribution pipeline. work focuses improving eﬃciency preprocessing bird acoustic recordings later used analysis species detection. preprocessing stage consists following tasks acoustic index calculated process. implementation used apache commons math library described demmel window size samples used hamming windows overlap. heavy rain detection removal heavy rain detected using rules derived classiﬁer using acoustic indices. approach similar towsey ferroudj spectral-based signal noise ratio power spectral density used bedoya added acoustic indices used classiﬁer. classiﬁer trained separate sample data rules hard coded java-based implementation prior beginning pipeline. work aims improve speed eﬃciency preprocessing bird acoustic data combining existing preprocessing tasks eﬃcient pipeline applying pipeline distributed system. done large data sets processed reasonable time becoming increasingly important increasing amounts data recorded work focus improving eﬃciency individual preprocessing tasks. ﬁrst challenge achieving research objectives determine eﬃcient approach compose noise removal processes single system. requires several questions answered whether diﬀerent sequences denoising tasks aﬀect accuracy whether executing tasks earlier improve overall eﬃciency pipeline. words need investigate trade-oﬀ factors execution time process inﬂuence accuracy applied pipeline. also consider lengths audio best performing denoising terms accuracy execution time. support pre-processing large volume bird acoustic data distributed computing approaches utilised. however determining approach employed problem scalable processing still needs investigated. research achieve linear scalability. means improvements execution time linearly proportional number processors used. distributed computing architectures typically distributed system architectures literature master-slave peer-to-peer models determine diﬀerent components system communicate other also guide work distributed. master-slave model single master process manages multiple identical slave processes distributes work them. approach simpler many models peer-to-peer master process handles work distribution. however also less fault tolerant architectures master process central point failure less scalable approaches example master process overworked creating bottleneck another architecture peer-to-peer model. opposite master-slave model workload decentralised. decentralisation peer-to-peer networks adaptable master-slave networks highly scalable however model also complex work many cases communication occur systems network create extra overhead ultimately slow system such master-slave model well suited present system diﬀerent parts audio preprocessed independently without requirement communication. master simply split ﬁles distribute slaves. scalable master perform much work splitting audio ﬁles managing distribution relative overall pipeline. approach comparable work large scale bioacoustics analyses parallelisation approaches addition deciding architecture system must also consider parallelise workload. here examine approaches data parallelisation functional parallelisation. data parallelisation involves dividing data machines machine apply processing data receives. well suited problems data easily split divided evenly processed independently. functional parallelisation involves machines process diﬀerent functions data. allows multiple processors work data parallel diﬃcult evenly distribute work particularly diﬀerent functions take diﬀerent amounts time execute. data parallelisation well suited pre-processing bioacoustics data. nature audio recordings makes easy divide small chunks chunk processed diﬀerent machine. furthermore detection processes require ﬁles split small chunks anyway additionally processes pipeline execute diﬀerent speeds remove audio without completing subsequent steps complicating potential functional parallelisation approach. could oﬀ-the-shelf system hadoop spark achieve parallelisation give level control data order maximise eﬃciency. previous attempt utilise hadoop spark preprocessing steps thudumu achieve linear scalability. moreover best results investigation exact split length audio pre-processing task sequence task distributed linear scalability still needed. therefore paper investigate factors propose master-slave based data parallelisation system pre-processing high volume bioacoustic data. processing pipeline uniﬁes preprocessing tasks previously described prepare bioacoustic data future analysis. eﬃciently possible maintaining accuracy detection processes. such execution order important processes remove modify audio. removed audio need processed subsequent steps pipeline increasing eﬃciency whereas modiﬁed audio aﬀects accuracy subsequent detection steps aﬀects overall eﬀectiveness pipeline. pipeline derived ﬁrst evaluating execution times process varies lengths audio chunks processed time. evaluate accuracy noise detection processes applying mmse stsa ﬁlter ﬁnally test detection approaches dependency split length. three experiments conducted help developing processing pipeline. ﬁrst experiment looks computation times processing step vary depending size data processing experiment identiﬁes fast slow processes. faster processes placed earlier pipeline possible result later slower processes skipped data experiment help identify split lengths result faster execution process used improve execution time. ﬁnal experiment looks whether detection accuracy dependent length chunks audio split. take random minute sample extracted four days unsupervised environmental recordings manually classify rain cicada choruses compare automatic classiﬁers. show detectors work better certain lengths. important determining processing order ﬁles split joined meaning detection processes longer split lengths need earlier not. environmental recordings evaluating system provided samford ecological research facility based queensland university technology recordings taken days october october four sensors total days audio process. practice four days recordings used testing. recordings group used several studies recordings high quality contain signiﬁcant levels background noise large variations loudness bird sounds ranging clear barely audible noise interference many sources including rain cicadas makes sample well suited study. test conducted step performed independently. hours audio known contain rain cicada choruses bird sounds passed processing pipeline sequence using processor. split length varied observe eﬀects processing time. test completed times split length average standard deviation computation times taken. fig. table shows execution times processes hours audio. process applied every although pipeline developed processes applied every ﬁles removed contain rain. time high-pass cicada mmse stsa ﬁlters ﬁlters split size larger. diﬀerences high-pass cicada execution times likely non-native sound processing library sound exchange causes extra overhead call shorter split sizes require calls sox. problem high-pass ﬁltering cicada ﬁltering executed every whereas cicada ﬁltering applies parts recording cicada choruses detected which determined subsequent testing small fraction total recording. high-pass ﬁltering computation times high-pass ﬁltering computation times comparison splitting ﬁnal length downsampling high-pass ﬁltering splitting -minute chunks ﬁrst downsampling high-pass ﬁltering splitting ﬁnal length second observation mmse stsa ﬁlter takes much longer processing steps combined. such execution time signiﬁcantly saved removing audio mmse stsa ﬁlter applied. clips split larger chunks ﬁrst downsampled high-pass ﬁltered split smaller chunks execution time improved. testing approach performs shows improvement execution time shown fig. here audio split -minute long chunks downsampled high-pass ﬁltered split target split length. hours audio tested approaches splits audio target length immediately split ﬁles -minute long chunks ﬁrst splits again. would theoretically optimal high-pass ﬁlter whole audio ﬁles rather running initial split -minute long chunks consideration needs made pipeline processed parallel advantageous start allocating ﬁles machines process quickly possible give shorter ﬁles work distributed evenly. such initial split length used input parameter test distributed system eﬃcient conﬁguration. discussed above highly advantageous remove audio execution mmse stsa ﬁlter long execution time. audio containing heavy rain already removed even audio removed detecting audio contain bird sound interest. this introduce basic silence removal approach processing pipeline. approach uses simple threshold. choice threshold derived next based acoustic indices taken bedoya power spectral density signal noise ratio testing execution time silence detection approach found takes short time relative processes taking approximately seconds process hours audio regardless split length. table area curve results silence removal conﬁdence intervals mmse stsa ﬁltered audio using power spectral density signal noise ratio thresholds. minimum mean square error short time spectral amplitude estimator process within processing pipeline reduces stationary background noise. process makes signals clearer seems likely process would improve accuracy detection processes. however process time consuming shown fig. processes applied mmse stsa ﬁlter show signiﬁcant improvement detection accuracy particularly processes remove audio removed audio need processed further. here test accuracy rain cicada silence ﬁlters applying mmse stsa ﬁlter determine belong pipeline relative mmse stsa ﬁlter. ﬁrst evaluate accuracy rain cicada detection mmse stsa ﬁlter applied. test acoustic indices calculated audio audio processed mmse stsa ﬁlter audio otherwise identical outside processing. mmse stsa ﬁlter improve accuracy actually reduces rain detection. likely rain stationary non-stationary components such mmse stsa reduces some noise sources making diﬃcult detect. spectral density signal noise ratio applied ﬁles without mmse stsa ﬁlter evaluate accuracy. measure used curve employed visualise accuracy thresholds increased terms sensitivity selectivity. area curve taken threshold recording shown table results show that using power spectral density measure mmse stsa ﬁlter would necessary obtain good results. however measure performs similarly well regardless mmse stsa ﬁlter. time cost using mmse stsa ﬁlter eﬃcient execute silence detection based prior executing mmse stsa ﬁlter. minutes audio composed randomly selected -minute chunks spread four days original recordings. chunks split second chunks listened manually labeled rain cicada silence resolution seconds. detection approach tested split length. manual labelling performed audio ﬁltered mmse stsa algorithm even though automatic methods work audio. gives better accuracy manual labelling particularly detecting silence quiet calls become clearer. accuracy evaluated split length precision seconds despite fact approaches level precision longer split lengths. example given -second long chunk silence ﬁrst seconds sound following seconds chunk labelled silence system interpreted true positive false positive result even though classiﬁed. sense given using estimated signal noise ratio threshold measure peak volume average volume. average volume loud even peak volume also loud despite technically false positive signiﬁcant issue rain removed rain ﬁlter anyway. however creates complication rain samples contain audible rain drops results ﬁles high signal noise ratio. consequently silence ﬁlter detects some rain samples containing silence samples manually classiﬁed containing rain removed silence classiﬁcation test. ﬁgures section number true positives false positives false negatives shown. true negatives excluded ﬁgures number true negatives much greater others every case makes visual comparison diﬃcult. cicada detection works well split lengths detecting cicada choruses sample small number false positives. best performing split length seconds contained false positives although strong result could partially chance. split lengths least seconds point steep drop-oﬀ occurs. likely rain tends occur long duration patterns used detect rain clearer longer time periods. practice accuracy rain detection poor evaluation suggests. manually labelling data rain considered intense enough drown bird signal classiﬁed rain although rain classiﬁer classiﬁes lighter rain without signiﬁcant bird sound containing rain. labelled false positives many would removed silence detector anyway. silence figs table show eﬀectiveness silence detector diﬀerent signal noise ratio thresholds. unlike rain cicada detection split length signiﬁcant eﬀect sensitivity silence detection. silence much likely occur shorter durations. false positives true positives aggressive settings failing detect many instances silence settings worsening performance longer split lengths lower thresholds. indicates better approach needed removing silence overall subject future work. present investigation less sensitive threshold selected accurate overall retains samples containing bird sound important eﬃciency gained removing silence dropped later point. such -second sample lower threshold considered best setting ﬁlter remove third silence classifying relatively false positives. though using second splits means mmse stsa ﬁlter takes longer execute eﬀect removing silence greater eﬀect reducing execution time overall. notable that silence detector produce many false positives false positives contain quiet bird calls signiﬁcantly louder background noise. even applying mmse stsa ﬁlter noise still audible comparison bird call interest testing silence ﬁlter never removed audio clear bird calls. based ﬁndings evaluation results previous sections ﬁnal pipeline preprocessing bioacoustics recording based denoising ﬁlters given algorithm summarised figs parallelised. compression processes applied reduce execution time processes. high-pass ﬁltering applied removing noise improving detection mechanisms. also works better longer split lengths applying earlier improves execution times. rain cicada detection executed rain detection executing earlier eliminate audio processing. files split seconds silence detection performed. finally mmse stsa ﬁlter executed. placing reduces execution time ﬁles removed processes need undergo mmse stsa ﬁltering longest execution time individual process. pipeline saving signiﬁcant execution time. hence silence rain detection steps signiﬁcantly improve execution times resulting higher quality output useless chunks discarded. particular skipping mmse stsa step removes majority processing time given ﬁle. section describes proposed approach distributing work amongst multiple machines evaluates approach terms execution time resource utilisation load balancing. results tests used improve eﬃciency overall pipeline’s execution processing large recordings. approach utilises master-slave architecture parallelisation progress processing pipeline. architecture makes easy allocate work slaves without master needing much work itself. constructed bespoke master-slave system opposed using oﬀ-the-shelf approach avoid unnecessary overhead gain level control data ﬂow. files processed pipeline slave each. chosen opposed distributing work per-process basis workload evenly distributed among slaves splitting ﬁles small chunks. master ﬁrst splits downsamples high-pass ﬁlters ﬁle. time taken perform steps small compared overall processing time pipeline executing steps serial increase processing time. high-pass ﬁltering performed master process utilises long split lengths. master process ﬁles split shorter chunks distribution. adds ﬁles processed queue. master slaves communicate ready send receive ﬁles. master tracks ﬁles sent slave completed processing re-send ﬁles diﬀerent slaves slave disconnects crashes. come forms processed ﬁles deleted ﬁles. slave sends processed name original ﬁrst sent master recognise processed original replaced processed ﬁles derived original sent. usually processed ﬁles original ﬁles ﬁles split second chunks silence detection. functionality enabling slaves send multiple ﬁles diﬀerent lengths received also allows ﬂexibility slaves process ﬁles future work. case samples identiﬁed deletion slave simply sends name delete master deletes copy. parallelisation performed multiple machines multicore processors. parallelise work within single machine central thread handles communication master slave acting similarly secondary master files given slave master added queue ﬁles pending processing managed central thread. queue ﬁxed size queue falls size slave request ﬁles master. processing threads remove ﬁles queue process denoising pipeline. upon completing processing results sent queues managed central thread processed ﬁles another deleted ﬁles. time interval results sent master queues cleared. approach distributing preprocessing pipeline described previous section tested using several measures across several conﬁgurations improve system’s scalability determine time eﬃciency preprocessing large recordings. short test conducted minutes audio already split short chunks ﬁxed length sent back forth machines chunk another determining transmission took signiﬁcant amount time sending time varies split length. total time taken test shows sending -second long chunks results slower sending time whereas anything higher consumes amount time. overall sending time small relative computation taking less seconds chunk sizes minutes audio. equal less seconds hours audio. small amount time compared execution times processes pipeline mmse stsa ﬁlter however becomes signiﬁcant number processors increases because overall processing times reduced communication time remain approximately constant. predictable fashion. distributed system used processing ﬁles much complicated slaves sending receiving ﬁles needed creating less predictable scenario. situation multiple slaves sending results receiving ﬁles simultaneously sending time inevitably increase. overall test shows communication master slaves small insigniﬁcant eﬀect overall processing time although changing split length could give second saving minutes audio most ideal conditions. overall likely insigniﬁcant compared factors. large number conﬁgurations examined produces fastest execution. particular amount processing conducted master thread prior sending slaves split length split length applying high-pass ﬁlter referred long split length maximum queue size slaves’ central threads interval slaves sending results considered. tests carried using virtual machines cores ram. machines hosted nectar cloud cloud platform used australian zealand universities. reduce number conﬁgurations undergo thorough testing manageable level. tests tested once. testing parameter ranges evaluate conﬁgurations depth. test conducted times hours audio used earlier tests processed time. these conﬁgurations lowest average combination found split length maximum slave queue size combination settings. conﬁgurations seconds slower average conﬁgurations. conﬁgurations separated seconds statistically signiﬁcant small time eﬃciency advantage thoroughly testing conﬁgurations opposed selecting random. indicates select conﬁgurations accuracy without signiﬁcant loss eﬃciency. splitting second chunks accurate approach removing rain cicada sounds taken split length testing. gets split second chunks silence detection later point pipeline. test conducted determine scalable system system tested using hours audio known contain bird sound rain cicada choruses silence varying numbers machines. test four times case average execution time recorded. -core execution test used process speciﬁcally written sequential execution others used distributed system. count includes master slave nodes. master node require large amount resources slave node also executed machine master. instance tested contained cores though used system. -core case tested using single -core instance running master slave process. fig. shows average execution time number machines used. fig. presents improvement execution time core measuring many times faster execution compared sequential case. ﬁgures show system indeed scaling almost linearly signiﬁcant speed boosts using extra processors. improvement rate begin slightly diverge perfect linearity high numbers cores used even -core distributed system still shows signiﬁcant performance increases -core system. average execution time system given number cores. master slave cores cores uses virtual machines. standard deviations small error bars visible also slight statistical anomaly -core system improve much sequential -core system might expected. likely extra overhead involved using distributed system sequential system. however extra overhead seem prevent system linearly scalable. master also runs slave instance cases make fairer comparison previous tests. also eﬀect testing system performance diﬀerent sizes virtual machines operating time master virtual machine runs slave cores cases albeit competing resources master thread. results shown fig. indicate system works well master -core slaves compared master -core slave slightly worse four -core slaves used. slower execution time using -core machines could extra overhead caused centralised slave thread. central slave thread results excessive overhead smaller machines larger machines reducing amount communication master waiting times processing ﬁles become advantageous. could also inappropriate queue size used smaller machines leading imbalances workload later stages execution. system developed larger machines makes intuitive sense would compute faster. overall system capable performing eﬃciently virtual machines size although slightly less eﬃciently -core machines used. also shows system maintain eﬃciency machines diﬀerent sizes processing once master running slave thread available cores tests. machines used unequal power. data taken earlier tests master cores running slave process simultaneously less powerful machines also running slave processes. here master correctly allocates ﬁles compared allocates slaves proportional diﬀerences computing power. test conducted eﬃciently system using resources. done processing hours audio four slaves sampling usage approximately every seconds. sampling done using shell script running parallel java execution although data regarding timing sent debugging logs help synchronise timings slaves. accuracy times imperfect accurate within seconds. hours audio. appear slight drop number start processing presumably master still performing early processing ﬁles send. overall assuming overhead signiﬁcant usage would diﬃcult signiﬁcantly improve upon current pipeline without changing pipeline itself. note master also running slave master usage relates usage slave master processes running machine. fig. shows three slaves utilise around machines’ available remaining constant ﬁrst seconds. master uses presumably holding information slave sockets data streams using hard drives results utilisation. keeping data could result faster memory access turn faster processing. however usage already fairly high hard disk reading writing seem signiﬁcant bottleneck processing audio ﬁles. nonetheless potential area performance improvements future work. dugan focus cloud infrastructure completing tasks auto detection noise analysis. these process manager divides work nodes independently work tasks. sensor data multiplexed data ﬁles data divided time rather sensor. recordings time period analysed split blocks equal number processing nodes blocks assigned node. nodes process independently return output. using found that speed improvements varied process drawback approach matlab package handle distribution which easier develop lacks low-level control data adds overhead. expanded work numerous publications work built acoustic data-mining accelerator parallelises mapping gathering operators otherwise sequential process. data. this distribute work splitting audio smaller chunks similarly dugan research claims feasible process audio ﬁles longer hours high amounts required specialised program called mpsplt divide audio -minute long chunks. master task creates list work items work tasks work task given diﬀerent chunk audio analyse. results tasks aggregated master task. parallelisation execution time analysis task instance thread distributed cluster single threaded process. certainly improvement parallelisation appears ineﬃcient improvement rate much lower increase resources. discussion pipeline detailed paper possible reason improvement rate large serial component processing pipeline used parallel processors fully utilised. bioacoustics data using apache spark streaming hadoop distributed file system utilised master-slave model. system parallelises chunking audio data generation spectrograms. parallelisation handled hadoop spark. task involving splitting audio second chunks generating spectrograms system showed improvement improvement execution time core master three core slaves using equivalent number processing resources system achieves work derived approach preprocessing high volume bird acoustic data quickly eﬃciently. achieved deriving processing pipeline based examining processing time accuracy individual preprocessing tasks changed depending audio split smaller chunks. ﬁlter consumes large amount execution time meaning executed late possible. also found high-pass cicada ﬁltering using consumes time more shorter ﬁles processed compared fewer longer ﬁles gave rise eﬃciency improvement. applied distributed architecture capable processing many machines once. resulting system found scale almost linearly even using cores improved execution time times serial processing. compares favourably existing research. also found system balances load evenly machines proportionally distribute ﬁles powerful machines. cores machines found consistently utilise available power though underutilised. acoustic preprocessing pipeline great potential expansion future. silence detection currently performs poorly limited choose keep drop -second long chunks. large problem present investigation concerned eﬃcient processing data. however wanted improve accuracy utility pipeline could replace relatively simplistic approach many existing segmentation processes divide animal calls syllables often insensitive noise reduction techniques could added pipeline without diﬃculty. adding additional processes pipeline would likely mean nothing inserting process existing ones. although work focuses removal noise sources cicada choruses rain many noise sources could targeted.", "year": "2018"}