{"title": "Classifying Online Dating Profiles on Tinder using FaceNet Facial  Embeddings", "tag": "eess", "abstract": " A method to produce personalized classification models to automatically review online dating profiles on Tinder is proposed, based on the user's historical preference. The method takes advantage of a FaceNet facial classification model to extract features which may be related to facial attractiveness. The embeddings from a FaceNet model were used as the features to describe an individual's face. A user reviewed 8,545 online dating profiles. For each reviewed online dating profile, a feature set was constructed from the profile images which contained just one face. Two approaches are presented to go from the set of features for each face, to a set of profile features. A simple logistic regression trained on the embeddings from just 20 profiles could obtain a 65% validation accuracy. A point of diminishing marginal returns was identified to occur around 80 profiles, at which the model accuracy of 73% would only improve marginally after reviewing a significant number of additional profiles. ", "text": "method produce personalized classiﬁcation models automatically review online dating proﬁles tinder based user’s historical preference proposed. method takes advantage facenet facial classiﬁcation model extract features related facial attractiveness. embeddings facenet model used features describe individual’s face. user reviewed online dating proﬁles. reviewed online dating proﬁle feature constructed proﬁle images contained face. approaches presented features face proﬁle features. simple logistic regression trained embeddings proﬁles could obtain validation accuracy. point diminishing marginal returns identiﬁed occur around proﬁles model accuracy would improve marginally reviewing signiﬁcant number additional proﬁles. online dating become commonplace today’s society. grossing application september online dating service named tinder. users online dating services generally expected spend signiﬁcant amount time ﬁltering proﬁles potential partners. study investigates whether pattern facial features used ﬁlter online dating proﬁles tinder. tinder selected study popularity application mobile dating application allows users browse dating proﬁles nearby singles. users presented single proﬁle time. ﬁrst glance user proﬁle picture ﬁrst name individual tinder. user must decide whether like dislike proﬁle spot. user view additional information optional biography extra pictures proﬁles reviewed decision made. individuals liked other presented notiﬁcation opportunity message other. custom application developed interface tinder. intention application allow user like dislike proﬁles recording everything proﬁles. proﬁle information contains mandatory requirements tinder include proﬁle’s name pictures. every tinder proﬁle includes least image. additionally optional include biography current current school. information stored along like dislike verdict database. method obtaining personalized classiﬁcation models user’s historical preferences presented. method takes advantage recent advancements computer vision related facial detection facial classiﬁcation facial attractiveness. results personalized classiﬁcation model user’s reviewed tinder proﬁles presented. substantial work literature predict facial attractiveness computer models. traditionally facial attractiveness modeled sort eigenface transformation. eisenthal able correlation facial attractiveness using eigenface transformation small data images. eigenface transformations principle component analysis determine important facial features convolutional neural networks become popular image processing recent years. gray showed trained predict facial attractiveness could extract meaningful features eigenface transformation. consequently facial features related attractiveness could extracted automatically without identifying landmarks using cnn. recent works rothe demonstrated trained large data predict facial attractiveness. training contained faces women liked disliked male participants. personalized predictions made based historical preferences heterosexual male users. model considered ﬁrst proﬁle image proﬁle. results zang used pre-trained vgg-face descriptor predict facial attractiveness male female users online dating site. demonstrated features facial classiﬁcation model could used predict facial attractiveness. model rothe trained data related facial attractiveness model used zang trained faces purpose classiﬁcation. studies highlight large scale facial classiﬁcation model useful predict facial attractiveness. vgg-face used created parkhi scores impressive accuracy labeled faces wild database works focused solely rating individual photos progressed usable model likes dislikes complete online dating proﬁles. work presented paper strives close gap. methodology proposed attempts classify online dating proﬁle either like dislike. different approaches proposed consolidate multiple facial features images proﬁle single vector features describes proﬁle. like related works last layer used facial features face. implementation facenet classiﬁcation model ﬁrst described schroff used slightly higher score used zang detection proﬁle images contain face image automated using computer vision techniques. faces facenet model extract facial features embeddings. embeddings reviewed online dating proﬁles used train personalized classiﬁcation model. major assumptions purposed method follows online dating proﬁle reviewed using proﬁle images; face individual proﬁle found proﬁle pictures contain face image; images face online dating proﬁle ignored. proﬁles can’t identiﬁed single face rejected; pattern exists faces individuals liked disliked user reviewing online dating proﬁles; trained facenet model evaluated faces extract facial features individuals. python library called facenet used calculate facial embeddings dating proﬁle pictures. embeddings last layer thought unique features describe individual’s face. facenet library created sandberg tensorflow implementation facenet paper schroff inspirations library uses license available online https//github.com/ davidsandberg/facenet. pre-trained facenet models available online. models validated database current best model accuracy trained classiﬁcation model subset msceleb-m database model’s architecture follows inception-resnet-v network described szegedy facenet library includes implementation multitask zhang detect facial landmarks used create training faces pixel images ms-celeb-m database. facenet model turns color image face vector ﬂoating point numbers. embeddings used features classiﬁcation clustering facenet library includes script calculate embeddings images faces using pre-trained model. classiﬁcation models determined different approaches embeddings. approach considered embeddings images containing face dating proﬁle. embeddings used describe entire proﬁle. approach rather considered average embedding values across images. again images containing exactly face considered. mtcnn results impressive despite substantial amount noise images. noise includes everything sunglasses hats scarfs snapchat ﬁlters. example particular popular snapchat ﬁlter applies ears nose mouth individual’s face. mtcnn appeared work well despite noise data. limited number false positives presented fig. false positives removed training noise provide useful construct robust classiﬁer. true rate false positives false negatives studied locations faces original images recorded. embeddings calculated faces proﬁles using facenet implementation described. average proﬁle reviewed images single face standard deviation maximum number images proﬁle data set. thus vector length. proﬁles fewer images would zeros place missing images. essentially proﬁle facial image would unique embeddings zeros proﬁle facial images would unique embeddings zeros forth. input feature iavg calculated proﬁle. supplementary material includes input dimensions binary labels show whether proﬁle either liked disliked. calculating facial embeddings user’s reviewed online dating proﬁles computationally inexpensive calculation simply function evaluation pre-trained cnn. then classiﬁcation models trained using either iavg input features. personalized classiﬁcation models could constructed based preference individual’s historically reviewed online dating proﬁles. heterosexual male used custom application intention ﬁnding romantic partner. reviewing tinder proﬁles went month stopped early user found girlfriend process. important mention males different online dating tendencies females user took hour review proﬁles. data created reviewed tinder proﬁles. user liked total proﬁles. additionally data contains images proﬁles browsed. image resolution pixels results split categories. ﬁrst subsection presents results data pre-processing performed. data transitioned complete online dating proﬁles data faces proﬁle. faces facenet model extract embeddings face. second section presents results classifying embeddings proposed input dimensions. mtcnn described used detect faces proﬁle images. faces selected minimum size threshold proﬁle images contained face extracted re-sized. proﬁle contain single image face immediately removed. images contained face image fortunately proﬁles reviewed contained least uniquely identiﬁable face. images containing face cropped images margin around face. order build reasonable classiﬁcation model important demonstrate many proﬁles required reviewed. classiﬁcation models trained using various fractions entire data ranging proﬁles. proﬁles used train classiﬁcation model remaining proﬁles used validate trained classiﬁcation model. spectrum classiﬁcation models trained using proﬁles validated proﬁles. data suffers class imbalance total tinder proﬁles reviewed liked. classiﬁcation models trained assuming balanced class. balanced class indicates proﬁle considered weight regardless whether proﬁle liked disliked. class weight user dependent users would value correctly liking proﬁles incorrectly disliking proﬁles. like accuracy introduced represent number correctly labeled liked proﬁles total number liked proﬁles test set. complementary dislike accuracy used measure disliked proﬁles predicted correctly total number disliked proﬁles test set. model disliked every single proﬁle would validation accuracy dislike accuracy like accuracy. like accuracy true positive rate dislike accuracy true negative rate various classiﬁcation models using either iavg input. scikit-learn used logistic regression support vector machines keras tensorflow used various neural networks embeddings. receiver operating characteristic logistic regression neural network using radial basis function presented fig. different layer conﬁgurations neural networks presented input dimension additionally area curve classiﬁcation model presented. complete input dimension feature appear offer advantages iavg considering auc. neural network best score slightly better logistic regression score study performed using random traintest split since scores comparable remaining results consider classiﬁcation models iavg. models using various train-to-test ratios. traintest split performed random; however model used random state given number training proﬁles. ratio likes dislikes preserved random splits. training accuracy models presented fig. validation accuracy models presented fig. ﬁrst data point represents training size proﬁles validation size proﬁles. last data point uses training proﬁles validation proﬁles logistic regression model neural network converge comparable training accuracy impressively model validation accuracy greater trained proﬁles. reasonable model validation accuracy near trained validation accuracy misleading signiﬁcantly disliked proﬁles liked proﬁles. thus important consider true positive true negative rates asses model quality. like accuracy models presented fig. dislike accuracy presented fig. noted neural networks like bias dislike bias. dislike bias resulted slightly higher validation accuracy since proﬁles disliked liked. again proﬁles reasonable classiﬁcation model constructed. logistic regression model trained proﬁles like accuracy dislike accuracy personalized classiﬁcation model. random splits performed times training sizes proﬁles. random split required least proﬁle class order construct classiﬁcation model. unique logistic regression model split validated remaining test data. again training proﬁles validated proﬁles forth training sizes. resulting validation accuracies followed skew-normal distribution probability density functions calculated training size. resulting pdfs presented fig. compared completely random classiﬁer. validation accuracy completely random classiﬁer simulated times followed normal distribution. results demonstrate training dating proﬁles offers signiﬁcant advantage random classiﬁer. variance associated model’s validation accuracy shown reduce number trained proﬁles. reduction variance signiﬁcant going training proﬁles proﬁles. fig. probability density functions validation accuracy classiﬁers trained either proﬁles. completely random classiﬁer shown baseline comparison. method presented build personalized classiﬁcation models online dating proﬁles based user’s historical preference. method could used improve user experience online dating reducing time required ﬁlter proﬁles. custom data collected reviewed tinder proﬁles. proﬁle images containing face facenet model extract unique features embeddings. different approaches presented combine features faces proﬁle unique vector representing features proﬁle. classiﬁcation model constructed either considering input dimension. simple logistic regression model shown accuracy greater trained proﬁles. classiﬁcation methodology continuously improves online dating proﬁles reviewed. additionally demonstrated classiﬁcation model trained proﬁles would average much higher validation accuracy random classiﬁer. python command line application called tindetheus released reproduce methodology presented paper. application three major functions build data user browses tinder. train classiﬁcation model data set. trained model automatically like tinder proﬁles. tindetheus available online https//github.com/cjekel/tindetheus/ https//pypi.python.org/pypi/tindetheus", "year": "2018"}