{"title": "On the computation of Shannon Entropy from Counting Bloom Filters", "tag": "eess", "abstract": " In this short note a method for computing the naive plugin estimator of discrete entropy from a counting Bloom filter will be presented. The method does work reasonably as long as the collision probability in the bloom filter is kept low. ", "text": "fraction elements sample value convention. underestimate entropy cases mitigation http//www. nowozin.net/sebastian/blog/estimating-discrete-entropy-part-.html. bloom ﬁlter used perform membership testing without actual data available. test give false positives never false negatives data structure consists array initially zeros hash functions. outcome range hash functions exactly large length array. element structure element hashed hash functions bits indexes corresponds outcome hash function applications test whether element hash functions applied element bits indexes corresponding outcomes checked. bits concluded element set. correct there bits would earlier point. bits concluded element might set. either element really hence bits earlier point bits application hash functions elements set. latter case consider outcome false positive. drawback bloom ﬁlters impossible remove elements might naively think could remove element setting bits corresponding outcome hash functions however might violate properties described case bits also hash function application element still set. overcome issue introduced counting bloom ﬁlters. counting bloom ﬁlter works like normal bloom ﬁlter instead maintaining array array integers initially ﬁlled zeros used. element added ﬁlter hash functions computed instead setting corresponding bits count indexes incremented test membership conclude element case counts hash function outcome indexes naive plugin estimator discrete entropy described computed collection observations. available counting bloom ﬁlter still compute approximation entropy. pretty much time would account total count numbers bloom ﬁlter. assuming collision bloom ﬁlter computation equal entropy except fact element added bloom ﬁlter occurrences bloom ﬁlter array. means summation unique entry contributing times supposed hence compute correct value need scale factor obtain computation always result value lower estimator discrete entropy. reason collision bloom ﬁlter reduce entropy. hence possible check multiple bloom ﬁlters highest obtained result must used ﬁnal outcome. possible corrections correct value needs account collisions bloom ﬁlter. general cannot know collision happened cases certain. example hash functions bloom ﬁlter contains counts sure caused collision. still completely certain whether element type elements type could also case element types collisions happened lead result. second scenario however much less likely especially assuming collisions bloom ﬁlters rather rare events. second scenario would indeed need collisions ﬁrst one. general could attempt correct approximation previous section computing entropy likely scenario. however moment found general solution ﬁnding likely scenario initial though experiments seems ﬁnding general solution complex computationally. analysis left future research version work.", "year": "2018"}