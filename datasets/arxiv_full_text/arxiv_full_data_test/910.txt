{"title": "A Rational Distributed Process-level Account of Independence Judgment", "tag": "q-bio", "abstract": " It is inconceivable how chaotic the world would look to humans, faced with innumerable decisions a day to be made under uncertainty, had they been lacking the capacity to distinguish the relevant from the irrelevant---a capacity which computationally amounts to handling probabilistic independence relations. The highly parallel and distributed computational machinery of the brain suggests that a satisfying process-level account of human independence judgment should also mimic these features. In this work, we present the first rational, distributed, message-passing, process-level account of independence judgment, called $\\mathcal{D}^\\ast$. Interestingly, $\\mathcal{D}^\\ast$ shows a curious, but normatively-justified tendency for quick detection of dependencies, whenever they hold. Furthermore, $\\mathcal{D}^\\ast$ outperforms all the previously proposed algorithms in the AI literature in terms of worst-case running time, and a salient aspect of it is supported by recent work in neuroscience investigating possible implementations of Bayes nets at the neural level. $\\mathcal{D}^\\ast$ nicely exemplifies how the pursuit of cognitive plausibility can lead to the discovery of state-of-the-art algorithms with appealing properties, and its simplicity makes $\\mathcal{D}^\\ast$ potentially a good candidate for pedagogical purposes. ", "text": "inconceivable chaotic world would look humans faced innumerable decisions made under uncertainty lacking capacity distinguish relevant irrelevant—a capacity computationally amounts handling probabilistic independence relations. highly parallel distributed computational machinery brain suggests satisfying process-level account human independence judgment also mimic features. work present ﬁrst rational distributed message-passing process-level account independence judgment called interestingly shows curious normatively justiﬁed tendency quick detection dependencies whenever hold. furthermore outperforms previously proposed algorithms literature terms worst-case running time salient aspect supported recent work neuroscience investigating possible implementations bayes nets neural level. nicely exempliﬁes pursuit cognitive plausibility lead discovery state-of-the-art algorithms appealing properties simplicity makes potentially good candidate pedagogical purposes. keywords rational process models; distributed computing; probabilistic independence judgment; pearl’s d-separation connection quality last night sleep color shirt colleague happened wearing work today? mars’ current weather mood today? humans judge innumerable possible connections rather effortlessly appearing quite good teasing apart pertinent impertinent factors making decisions. mind that? famous frame problem puzzle philosophy mind epistemology highlights intriguing ability mind distinguish relevant irrelevant asks closely related question account apparent ability make decisions basis relevant ongoing situation without explicitly consider relevant? computationally mind’s ability distinguishing relevant irrelevant characterized terms handling probabilistic dependence relations ‘dependency’ implying existence connection relevance factors ‘independence’ contrary example assuming random variable encodes quality sleep color shirt colleague happened wear next nonexistence connection formally characterized using notion probabilistic independence work concerned developing plausible process-level account human independence judgment. adopting causal bayes nets normative model represent reasoner’s internal causal model world structured aforesaid task computationally amounts checking independencies distribution encoded cbn. interestingly pearl forth graph-theoretic notion called d-separation allowing reading probabilistic independence relations mere structure ever since inception d-separation proved fundamental variety domains artiﬁcial intelligence e.g. probabilistic reasoning causal reasoning decision making played important roles broad range areas e.g. handling missing data extrapolation across populations deep learning light algorithms implementing d-separation could potentially serve rational process-level model human independence judgment. model look like? highly parallel distributed computational machinery brain suggests satisfying process-level account human independence judgment also mimic features. sadly enough past algorithms implementation d-separation sequential i.e. without parallelism computation arguably worse centralized i.e. executions fully coordinated supervisory unit analogous homunculus features strongly call question psychological plausibility. notion probabilistic independence quintessential feature cbns interestingly realization probabilistic independence plays crucial role human cognition element development formalism pearl’s words whereas person show reluctance giving numerical estimate conditional probability person usually state ease whether dependent independent namely whether knowing truth alter belief continues likewise people tend judge three-place relationships conditional dependency clarity conviction consistency. suggests notions dependence conditional dependence basic human reasoning numerical values attached probability judgments. psychological literature however fully embrace statement with clarity conviction consistency pearl example experimental work rehder suggests adults exhibit deviations markov condition contrast drawing experimental studies park sloman sloman lagnado conclude people indeed uphold markov condition reason behind observed deviations that experimental conditions people solely adhere information provided experimenter bring background knowledge experiment speciﬁcally park sloman found strong support contradiction hypothesis followed mediating mechanism hypothesis ﬁnally concluded people conform markov condition causal structure people using correctly speciﬁed work present ﬁrst rational distributed process-level account independence judgment called formally ﬁrst asynchronous messagepassing distributed algorithm implementing d-separation substantial parallelism computation without need supervisory unit coordinate execution —fully spirit celebrated parallel distributed processing research program brain cognitive sciences similar well-known belief propagation inference algorithm played important roles theoretical neuroscience literature message-passing algorithm wherein computation carried propagating messages computational units. interestingly shows curious normatively justiﬁed tendency quick detection probabilistic dependencies whenever hold. furthermore outperforms previously proposed algorithms literature terms worst-case running time salient aspect supported recent work neuroscience investigating possible implementations bayes nets neural level provide comprehensive analysis computational properties along several reﬁned time-complexity bounds. discussion section provide detailed comparison previously proposed algorithms elaborate implications work presented neuroscience psychology. bold-faced letters represent sets random variables. generic d-separation relation denoted representing three mutually disjoint sets variables belonging directed acyclic graph represents topology underlying cbn. read follows d-separates similarly b|c)g denotes dseparate ease notation denote d-separation relation denote d-separation query distinction clear context. also denote ancestral graph variables belonging underlying i.e. nodes comprises nodes ancestors nodes induced subgraph underlying informally speaking throughout paper interpreted follows probabilistically independent other given query format follows probabilistically independent other given likewise b|c)g interpreted follows dependent given three mutually disjoint sets belonging also y|z)g. connected subgraph m⊥⊥y|z)g serves refutation-module query m⊥⊥y|z)g satisﬁes following conditions m⊥⊥y|z)g contains active path node node every head-to-head node m⊥⊥y|z)g contains directed path node fig. examples. section show proposed algorithm allows decide generic d-separation query form holds asynchronous distributed message-passing algorithm. speciﬁcally nodes underlying g—symbolizing computational units—autonomously engage communicating messages immediate neighbors edges g—symbolizing communication channels. assume communication channels reliable bidirectional ﬁrstﬁrst-out proposed algorithm outlined next. throughout execution variables ignore messages received children send message children. variables sets initially activate states represented colors green white respectively. following prescriptions original belief propagation algorithm assume variables sets acquire initial states self-activated manner. assuming cbn’s node represented neural level single population neurons self-activation reﬂects content-addressability corresponding memory traces. begins nodes sending colors messages parents. node upon receiving message follows simple steps following order current color differs received message replies sending back color message transmitter node. state color prior receipt message send back message transmitter node. alternatively provide asynchronous distributed otime message-passing algorithm sec. c-vii appendix permits predesignated source node disseminate information regarding initial states nodes graph denotes length longest undirected path rules given ﬁrst correspond white- green- red-colored nodes sending colors yet-uncolored parents. rules second ensure colors white- green- red-colored nodes persist upon interacting nodes color. rules stated third bear understanding white color functions mere place-holder getting replaced interacting green- red-colored nodes. rules fourth guarantee persistence colors green upon interacting white. finally rules given last correspond clash event implication discussed remark below. remark clash colors green node time throughout execution signals falsity input d-separation query upon decides b|c)g. note asynchrony stems fact exists global clock system hence node upon receiving message follows steps autonomously i.e. informally without attend computations nodes performing. computational properties proposed algorithm formally articulated proposition below. proposition following statements hold d∗’s execution either clash colors green takes place upon decides b|c) state equilibrium reached time denotes length longest undirected path ancestral graph gan. high-level understanding simple machinery informally discuss here. upon variables sending colors parents colors white green begin propagate backwards manner throughout network. midst process white-color nodes neighboring node colored either green change color neighbors clash ever occurs colors green decides input dseparation query false informally white-color nodes function relays which copying colors neighbors facilitate possibility collision colors green. note termination according proposition input d-separation query presented true system reaches state equilibrium time message-passing guaranteed terminate time that. however local view node cannot know global state reached. fairly standard situation asynchronous distributed algorithm leading introduction fundamental concept termination-detection distributed systems literature; exist variety algorithms literature example mittal proposed algorithms detection latency diameter underlying graph allowed arbitrary topology. section present example illustrate execution highlight simplicity consider depicted fig. posed d-separation query {xx} {yy} {z}. according d-separation criterion observation activates path thereby yielding falsity d-separation query fig. execution illustrated using successive snapshots shown figs. ﬁgure depicting global state system instance global time depicted fig. variables sets initially selfactivate states represented colors green white respectively. also recall that explicated sec. variables ignore message received children also send message children—depicting downlinks variables cast lamport’s space-time diagram ﬁgure depicts global state system corresponds vertical time-cut positioned global time time-cuts corresponding figs. successively ordered. dash-dotted format simply illustrates statement pictorially fig. colors green white propagate backwards manner also color white node gets replaced green neighboring node acquires colors eventually conﬁguration depicted fig. clash takes place colors green node upon decides y|z)g. notice that since unobserved path indeed remains blocked nicely captured machinery algorithm prevents sending colors forward direction thereby guaranteeing occurrence clash along blocked path also notice that since observed path blocked well machinery refraining engaging message-exchange children ensures clash takes place blocked path number algorithms implementation dseparation proposed literature assuming decide holds worst-case running time geiger al.’s koller friedman’s shachter’s butz al.’s lauritzen al.’s algorithm denote number nodes edges underling respectively. note that since o-time algorithm outperforms o-time algorithm terms worst-case runtime discussions this). according proposition time-complexity proposed algorithm denotes length longest undirected path ancestral graph gan. since proposed algorithm outperforms previously proposed algorithms terms worst-case running time. ysis running-time lauritzen al.’s algorithm. according proposition no-instance d-separation query decided time also sec. appendix upper-bound improvement worst-case runtime previously proposed algorithms. also note that adopting td-algorithm detection latency yes-instance d-separation query decided time diameter again since |e|d |e||e| upperbound improvement worst-case runtime previously proposed algorithms. hence follows d).) figure illustrative example. underlying shown initial conﬁguration system portrayed wherein variables sets self-activate states represented green white respectively. depicting downlinks variables dash-dotted format simply symbolizes variables ignore message received children also send message children. begins nodes sending colors messages parents proceeds shown ﬁgure depicting snapshot global state system instance global time. eventually upon occurrence clash colors green decides y|z)g. particularly gain signiﬁcant dense dags. note that limit underlying gets denser worstcase runtime performances previously proposed algorithms become identical i.e. exploration graph formalized statement proposition idea exploring ancestral graph core lauritzen al.’s algorithm d-separation however sharp contrast lauritzen al.’s algorithm proposed algorithm need moralize ancestral graph gan. geiger point moralization step lauritzen al.’s algorithm requires time worst-case. another noteworthy property tendency toward quick detection false d-separation queries manifested occurrence clash according remark no-instance d-separation query proposition below gives reﬁned upper-bound time required occurrence clash thereby formalizing said claim. reader referred sec. c-iii appendix proof proposition proposition {ai}i {ck}k three disjoint sets nodes belonging denote length longest directed path ancestral graph length shortest unblocked path nodes gan. convention paths sec. formally deﬁned notion called refutationmodule language computational complexity theorem-proving refutation-module m⊥⊥y|z)g serve certiﬁcate disproving dseparation query interpretation related veriﬁer-based deﬁnition complexity class conp. next proposition provide even reﬁned upper-bound time required occurrence clash thereby strengthening claim d∗’s tendency toward quick detection false d-separation queries. reader referred sec. c-iv appendix proof proposition proposition three disjoint sets nodes belonging also y|z)g. m⊥⊥y|z)g denote refutation-module query denoting length longest directed path shortest unblocked path m⊥⊥y|z)g respectively. finally denote minimal refutation-module query denoting edges following statement holds true clash colors green occurs upon time o⊥⊥y|z)g decides y|z)g. highlight signiﬁcance proposition consider following nondeterministic algorithm algorithm takes input along d-separation query outputs depending whether input query yes-instance no-instance query respectively. altogether presented no-instance d-separation algorithm outputs o⊥⊥y|z)g time. interestingly according proposition presented no-instance d-separation query machinery ensures clash colors green occurs within time ⊥⊥y|z)g upon decides y|z)g. crucial note presented argument solely concerns no-instance d-separation queries. finally would like point interesting property referred order-invariance characterized informally follows order according nodes network receive messages irrelevant. formally order-invariance property stated follows assume node state upon receiving sequence messages mm··· ends state following holds true node permutation deﬁned {··· node starting state upon receiving sequence messages mπmπ··· note contain head-to-head node algorithm spirit pearl’s belief propagation scheme employs edges underlying medium message-passing nodes takes place. latter echos pearl’s insight advocated idea must viewed merely passive parsimonious code storing factual knowledge also computational architecture reasoning knowledge. adheres idea. recent literature neuroscience investigating possible implementation cbns neural level supports pearl’s idea lochmann deneve advocate idea cbn’s node represented neural level single population neurons neural network resembling mirror image implements—though sometimes ‘perfect’ mirror—and links neural network providing medium inference carried out—either form belief propagation sample-based methods like gibbs sampling. interestingly peculiar tendency toward quick detection no-instance d-separation queries consistent pre-theoretical intuition humans tend detect possible dependencies concepts propositions rather swiftly dependencies exist. following question presents itself could tendency supported based rational grounds? follows provide argument supporting rationality foregoing tendency. assuming mind incurs higher rate loss discovering dependency exist compared condition wherein exist mind recognizes that formally show foregoing tendency simply consequence mind acting boundedly-rational satisﬁcer trying attain good performance terms expected runtime rate loss condition wherein dependency exist higher? informally mind hasty detecting dependencies condition? possible explanation crucial mind swiftly detect dependencies condition rationale delay detecting dependencies could harmful reasoner potentially jeopardize life hence important evolutionary standpoint. furthermore given prominent role explanation inference play human cognition crucial mind promptly detect factors deemed relevant task faced reasoner. aforesaid tendency given rational basis. denote runtime algorithm implementing d-separation criterion πyes denote prior probability input yes-instance no-instance dseparation query respectively. also tyes denote worst-case runtime yes-instance no-instance d-separation queries respectively. finally lyes denote cost unit time incurred delay detecting yes-instance no-instance d-separation query respectively. then underlying following holds true lyes expectation taken respect distribution d-separation queries. easy show that condition lnoπno lyesπyes rational mind trying attain good performance terms expected runtime demonstrate said tendency toward quick detection no-instance d-separation queries. setting portrayed special case condition corresponds condition subject assumptions πyes lyes future work experimentally investigate humans demonstrate forgoing normatively justiﬁed tendency probabilistic dependence judgment tasks that contrary systematically deviate that. also interestingly forgoing tendency toward focusing search minimal refutation module taken evidence least-effort-like characteristic fully consistent recently proposed frameworks seek rational understanding mind algorithmic level analysis appealing notion economical limited computational cognitive resources nobandegani grifﬁths although brieﬂy discussed idea termination detection asynchronous distributed algorithms boundedly-rational agent decide asynchronous distributed algorithm period time justiﬁed based opportunity cost incurred delaying another task. light boundedly-rational agent plausibly decide adopt termination detection algorithms settings wherein opportunity costs involved would relatively low. also notably exempliﬁes pursuit cognitive plausibility lead discovery state-of-the-art algorithms. perhaps biggest limitation assumption communication channels faultless allowing reliable message exchange. brain’s neural circuits involve much stochasticity response variability undermining assumption. future work investigate extensions robust neural noise. many questions remain open hope made progress toward understanding human probabilistic dependence judgment algorithmic level capacity without world would seem chaotic humans live acknowledgments would like thank michael pacer providing constructive comments earlier draft work shultz devroye helpful discussions. work supported part natural sciences engineering research council canada grant rgpin throughout appendix denote posed d-separation query representing topology underlying throughout proofs arguments follow assumed communication channels reliable bidirectional ﬁrst-in ﬁrst-out time-complexity analysis adhere assumptions adopted speciﬁcally assume upper-bound process perform steps upon receipt message upper-bound delivery time message channel. note parameters arbitrary ﬁnite constants. also note that number messages exchanged edge proposition main text) effect pileups channel considered assumptions proof statement forward direction c-i.i.i prove forward direction statement next. accomplished proving following conditioned exists unblocked path clash kind stated remark unavoidable d∗’s execution. path said unblocked every collider node either descendants every non-collider node proof rests simple understanding generic unblocked path decomposed v-structured non-v-structured modules illustrated fig. neighboring modules share common vertex refer joint vertex end-point vertex non-v-structured subpath joint vertex termed source vertex; fig. fig. principle unblocked path figure decomposition generic unblocked path v-structured non-v-structured modules. generic unblocked path comprised v-structured well non-vstructured modules. nodes source vertices. nodes joint vertices. node collider. without loss generality assumed initialized colors green white respectively. non-v-structured module unblocked path source vertex v-structured module unblocked path non-v-structured module unblocked path source vertex multiple v-structured modules. ease exposition unblocked path depicted fig. possesses v-structured module. note proof follows make restrictive assumption. next prove inevitability clash unblocked paths possessing non-v-structured well v-structured modules. proof comprises parts. part show inevitability clash unblocked path provided message destined node outside node belonging using arguments provided adaptation argument cases unblocked path solely comprised either non-v-structured modules v-structured modules straightforward. part part show regardless messages destined nodes outside nodes belonging occurrence clash inevitable proof part rules sketched step along d∗’s initialization phase wherein nodes sets propagate colors parents ensure non-v-structured modules fully explored exploration nodes within non-v-structured module homogeneously colored consistent respective source vertex except joint vertex requires careful consideration propagation white backward manner ensures v-structured modules fully explored exploration nodes within v-structured module homogeneously colored white except joint vertices require careful consideration consideration advised explicated next. joint vertex connecting non-v-structured module v-structured module ﬁrst become white whatever color source vertex non-v-structured module depending whether joint vertex ﬁrst receives message non-v-structured module v-structured module respectively. however quite importantly color eventually becomes source vertex non-v-structured module according step sends color short joint vertex v-structured module. eventually serve relay transferring color side following ways either becomes white then upon receiving redgreencolored message neighbor side changes color sends color side ﬁrst becomes green receives white-colored message neighbor residing side upon which—in analogous handshaking communication networks—j sends back color which turn initiates chain reaction thereby white-colored neighbors alter color white-colored neighbors forth. understanding joint vertices explained essentially serve relay transferring color module neighboring module addition fact color source vertices different together grants conclusion clash colors green along unblocked path eventually takes place. concludes proof part analysis case joint vertex adjacent v-structured modules require special consideration since become white ﬁrst thereafter according function relay transferring color branch other. lying outside cannot prevent clash happening informally occurrence clash cannot prevented message coming node residing outside belonging nin. consider possible scenarios listed below) show indeed claim part holds true. proceed further introduce notation. denote following nin’s current color color message destined example implies nin’s current color white incoming message red. according nin’s current color white currently color upon receiving green-colored message nin’s color becomes green thereafter acts green-colored source vertex expedite occurrence clash according interaction changes nin’s color white. however machinery color white merely acts placeholder awaiting replaced green upon interacting kind. light altering state white cannot prevent clash happening c-i.i.ii proof statement backward direction prove backward direction statement next using proof contraposition. prove given d-separation query according statement d-separates equivalent following every path between blocked. according path said blocked least statements holds exists collider node neither descendants exists non-collider node therefore altogether statement d-separates equivalent statement every path connecting least contain subpath type speciﬁed hence clash take place path colors green pass corresponding subpath collide color. follows consider subpaths show that existence subpaths every path connecting grants impossibility occurrence clash d∗’s execution. subpaths three types green node node separated head-to-tail node observed green node node separated common cause observed ﬁnally green node node separated common effect neither descendants observed figure three types subpaths. depicting downlinks variable dash-dotted format simply symbolizes crucial property according ignores message received children also send message children. green node node separated head-to-tail variable green node node separated confounder green node node separated collider neither descendants next consider case time prove d∗’s machinery prevents occurrence clash along aforesaid subpaths depicted figs proof immediately follows form following crucial property variables ignore message received children also send message children simply symbolizes property). case requires careful consideration. color green/red reach color red/green —thereby generating clash—was collider white-colored that replaced either green would allow colors green meet hence clash would occur. however since neither collider descendants observed also d∗’s machinery dictates propagation color white backwards manner corresponding ancestors white-colored nodes altogether collider cannot become white execution concludes proof. c-i.ii proof statement state transition diagram given fig. states represent node’s color edges represent transitions receiving messages whose colors depicted edges. figure state transition diagram. message ought received transition take place depicted corresponding edge. case multiple messages engender transition detailed corresponding edge separated slashes. simple inspection diagram reveals node’s color cannot alternate states. fact diagram cycles length greater. observation implies either clash takes place upon decides input d-separation query false state equilibrium eventually reached. deﬁnition equilibrium global state network according none nodes alters state state reached. concludes proof statement c-i.iii proof statement analysis follow adhere assumptions presented ﬁrst paragraph appendix analyze potential post-equilibrium in-transit messages. in-transit message three colors green white. consider possibility next. case state equilibrium indeed reached green-colored in-transit message must destined green-colored node. indeed green-colored intransit message destined red- white- ∅-colored node would lead respectively clash change color destination node again change color destination node—all contradiction assumption state equilibrium already reached. according therefore green-colored in-transit message absorbed corresponding destination node time leading generation messages. line reasoning adopted conclude following red-colored in-transit message absorbed corresponding destination node time leading generation messages. next consider possibility in-transit message white. white-colored in-transit message could destined white-colored node green-colored node red-colored node. consider possibility order. case white-colored in-transit message destined white-colored node reaches destination time according absorbed upon reception leading generation messages. case white-colored in-transit message node green-colored node reaches destination time according step replies time sending green-colored message which according case absorbed without generating messages. d∗.) case handled manner case present results form lemmas follows. lemma given disjoint sets b|c)g d∗’s execution grants clash kind stated remark occurs time denotes length longest undirected path ancestral graph gan. proof. proof relies high-level understanding d∗’s machinery discussed sec. statements proposition obtain upper bound time takes clash happen perform propagation colors phases follows. phase-i starting nodes color white propagates backwards phase-i ensures nodes could potentially become white absence colors green graph indeed become white. adopting notation introduced therein phase-i completed time denotes longest directed path gan. hence phase-i takes time. phase-ii colors green introduced back begin propagate dictated machinery along path node node clash takes place. adopting notation introduced therein completion phase-i within time clash takes place path node node denote length longest undirected path gan. hence putting phase-i phase-ii together time +lan) clash takes place. note parameters arbitrary ﬁnite constants. since claimed upper bound follows. using line reasoning prove following lemma. lemma given disjoint sets d∗’s execution grants state equilibrium reached time denotes length longest undirected path ancestral graph gan. analysis presented next follows line reasoning presented proof lemma sec. c-ii appendix time-complexity analysis presented blow adhere assumptions outlined ﬁrst paragraph appendix note parameters arbitrary ﬁnite constants. time introducing colors green back interpreted follows exerting external signals colors nodes altered green respectively. provided interpretation equivalent endowing node dummy child next next colored green initialization phase thereby making node inherit red/green color newly introduced dummy child instead initialized corresponding color initialization phase construction purposefully delay occurrence clash. note that number messages exchanged edge proposition effect pileups channel considered assumptions nodes could potentially become white absence colors green graph become white completion clash takes place shortest unblocked path ancestral graph within statement proposition unblocked path between clash eventually takes place). hence time clash occurred. note holds |b|. also note correspond respectively phase-i phase-ii presented proof lemma sec. c-ii appendix follows analysis presented next follows line reasoning presented proof proposition time-complexity analysis presented blow adhere assumptions outlined ﬁrst paragraph appendix also footnote m⊥⊥y|z)g denote refutation-module denoting edges m⊥⊥y|z)g. em⊥⊥y|z)g denote respectively length longest directed path shortest unblocked path m⊥⊥y|z)g. deﬁnition main text m⊥⊥y|z)g must contain least unblocked path node node also denote minimal refutation-module denoting edges denoting length longest directed path shortest unblocked path respectively. claimed ⊥⊥y|z)g +|pm follows upper-bound o⊥⊥y|z)g following statements time nodes m⊥⊥y|z)g could potentially become white absence colors green graph become white completion clash takes place along shortest unblocked path m⊥⊥y|z)g within correspond respectively phase-i phase-ii presented proof lemma sec. c-ii appendix hence taken together clash occurred along time since argument holds arβ)⊥⊥y|z)g follows clash +|pm occurred time minm⊥⊥y|z)g +|pm hence claimed upper-bound o⊥⊥y|z)g ⊥⊥y|z)g satisfying folcontains unblocked path immediately follows notation propositions main text. hence since +|pm +|pm claim propominm⊥⊥y|z)g sition follows. proof statement reader referred sec. c-i.i appendix proof. proof statement denote nodes ever sent message time then validity statement follows following recursion. prior applying steps corresponding recipients messages satisﬁes following conditions node belongs node member ever sent message belongs applying steps corresponding recipients messages indeed satisﬁes note initial conﬁguration nodes send corresponding colors parents. hence statement holds initial conﬁguration. assume statement holds nodes ever sent message time i.e. according step node recipient message replies back sending color sender. note that according statement sender must adhere according step node sends updated color parents children communicated before. based argument provided regarding step sending messages parents guarantees indeed satisﬁes also constraints with communicated before statement sending messages nodes prescribed guarantees indeed satisﬁes argument establishes validity recursion. recursion given above together fact statement holds initial conﬁguration grants validity statement concludes proof. proof statement statement follows statement lemma lemma proof statement reader referred sec. c-i.iii appendix proof. proof statement follows prove number messages exchanged edge bounded constant independent size graph. based step node sends message upon updating color discovering color different pre-update color. according state transition diagram depicted fig. throughout execution node could pass states {∅◦clash} node changes state cannot back state ever hence step results messages expairing nodes different colors together. inspection step results highest number messages exchanged edge white-colored node green-colored node which show results messages exchanged edge. whitecolored node sends white-colored message greencolored neighbor following exchange messages takes place step white-colored message received greencolored node send back green-colored message upon receipt green-colored message send white-colored message also updates color green based cug. upon receipt white-colored message send back green-colored message however since color updated green time send message step completes proof. proof statement throughout execution exist three types messages exchanged nodes namely white- green- red-colored message. therefore encode said three types bits required. statement follows statement argument provided above. first using combination broadcast convergecast pre-assigned initiator node sends initialization message initialize nodes receives acknowledgement nodes received initialize. using asynchspanningtree algorithm done time then broadcasts control message startd∗ nodes using asynchspanningtree algorithm done time denotes diameter upon receipt startd∗ node sends color parents prescribed initialization phase outlined sec. main text. state result form lemma introduce following notation. adopt expression state following starting state node transits state upon receiving sequence messages m··· m··· {∅◦clash} formally state resx sult lemma. proof. proof straightforwardly accomplished examining possible cases showing statement holds true them. provide sample case consider using given sec. straightforward check holds true. order-invariance property captured following lemma sequence mπ··· constructed original sequence m··· series pairwise permutations. worth noting order-invariance property formalized analogous notion exchangeability probability theory.", "year": "2018"}