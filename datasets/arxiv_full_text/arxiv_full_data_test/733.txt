{"title": "PyPhi: A toolbox for integrated information theory", "tag": "q-bio", "abstract": " Integrated information theory provides a mathematical framework to fully characterize the cause-effect structure of a physical system. Here, we introduce PyPhi, a Python software package that implements this framework for causal analysis and unfolds the full cause-effect structure of discrete dynamical systems of binary elements. The software allows users to easily study these structures, serves as an up-to-date reference implementation of the formalisms of integrated information theory, and has been applied in research on complexity, emergence, and certain biological questions. We first provide an overview of the main algorithm and demonstrate PyPhi's functionality in the course of analyzing an example system, and then describe details of the algorithm's design and implementation.  PyPhi can be installed with Python's package manager via the command 'pip install pyphi' on Linux and macOS systems equipped with Python 3.4 or higher. PyPhi is open-source and licensed under the GPLv3; the source code is hosted on GitHub at https://github.com/wmayner/pyphi . Comprehensive and continually-updated documentation is available at https://pyphi.readthedocs.io/ . The pyphi-users mailing list can be joined at https://groups.google.com/forum/#!forum/pyphi-users . A web-based graphical interface to the software is available at http://integratedinformationtheory.org/calculate.html . ", "text": "neuroscience training program university wisconsin–madison madison department psychiatry wisconsin institute sleep consciousness university wisconsin–madison integrated information theory provides mathematical framework fully characterize cause-effect structure physical system. here introduce pyphi python software package implements framework causal analysis unfolds full cause-effect structure discrete dynamical systems binary elements. software allows users easily study structures serves up-to-date reference implementation formalisms integrated information theory applied research complexity emergence certain biological questions. first provide overview main algorithm demonstrate pyphi’s functionality course analyzing example system describe details algorithm’s design implementation. ‘pip install pyphi’ linux macos systems equipped python higher. pyphi open-source licensed gplv; source code hosted github https//github.com/wmayner/pyphi. comprehensive continually-updated documentation available https//pyphi.readthedocs.io. pyphi-users mailing list joined https//groups.google.com/forum/forum/pyphi-users. web-based graphical interface software available http//integratedinformationtheory.org/calculate.html. integrated information theory proposed theory consciousness. central hypothesis physical system meet five requirements order physical substrate subjective experience intrinsic existence composition information integration exclusion cause-effect structure physical system applicable discrete dynamical systems. framework proven useful study consciousness also applied research complexity emergence certain biological questions describe output input software give overview main algorithm course reproducing results obtained example system studied design implementation discuss specific issues concerning algorithm’s implementation. finally availability future directions describe software obtained discuss functionality planned future versions. software primary functions unfold full discrete dynamical system interacting elements compute value compute maximally-irreducible cause-effect repertoires particular elements within system. first function implemented pyphi.compute.major_complex returns systemirreducibilityanalysis object system’s contained ‘ces’ attribute value contained ‘phi’. attributes detailed online documentation. function subsystem.concept concept specified elements within system concept contains maximally-irreducible cause effect repertoire probability distributions capture mechanism elements current state constrain previous next state system respectively; value measures irreducibility repertoires; several attributes discussed detailed online documentation. starting point analysis discrete dynamical system composed interacting elements. system represented directed graph interconnected nodes equipped markovian function outputs node’s state next timestep given state parents previous timestep present pyphi analyze deterministic stochastic systems consisting elements states. discrete dynamical system completely specified transition probability matrix contains probabilities state transitions obtained graphical representation system perturbing system possible states observing following state next timestep pyphi fundamental representation system. output. systemirreducibilityanalysis object main output software. represents results analysis system question. several attributes ‘ces’ causeeffectstructure object containing system’s concepts; ‘cut’ object represents minimum-information partition system ‘partitioned_ces’ causeeffectstructure concepts specified system applying mip; ‘phi’ value measures difference unpartitioned partitioned ces. concept represents maximally-irreducible cause maximally-irreducible effect mechanism state. ‘mechanism’ attribute contains indices mechanism elements. ‘cause’ ‘effect’ attributes contain maximallyirreduciblecause maximallyirreducibleeffect objects describe mechanism’s respectively; contains purview repertoire partitioned repertoire value. ‘phi’ attribute contains concept’s value minimum values mie. state transitions. imposes uniformity marginal distribution previous states analysis capture direct causal relationships across single timestep without confounding factors influences system network nodes tpm. node tpm—in case truth-table deterministic logic gate. yellow signifies state; white signifies off. system’s composed tpms nodes shown state-by-node form note pyphi’s representation first node’s state varies fastest according little-endian convention moreover assumes instantaneous causation; assumed elements dynamical system influence another timestep next. therefore require system satisfies following markov condition called conditional independence property element’s state must independent state others given state system systems binary elements satisfies represented state-by-node form since need store element’s marginal distribution rather full joint distribution. keyword argument network pyphi.network. completely specifies system providing necessary; however explicit connectivity information used make computations efficient especially sparse networks pyphi rule certain causal influences priori missing connections note means providing incorrect result inaccurate output. given pyphi assumes full connectivity; i.e. assumes element effect other guarantees correct results. mathematical framework typically formulated using graphical causal models representations physical systems elements. framework builds causal calculus operator introduced pearl order assess causal relationships among elements interventions used actively elements specific state resulting state transition observed. analysis. element system interventions keep state every observation. noise element system interventions state chosen uniformly random. finally connection source element target element make source appear noised target remaining uncut connections source still correctly transmit state. small deterministic system logic gates described describing algorithm implemented terms manipulations link graphical operations defined above. schematic algorithm shown fig. fig. detailed illustration given calculating first step create network object. choose provide -dimensional state-by-node form required argument provide well since know self-loops system pyphi information speed algorithm schematic mechanism level. pyphi functions named boxes arguments grey. arrows point callee caller. functions organized postulate correspond denotes tensor product; denotes power set. system states represented tuples meaning meaning off. case analyze entire system subsystem contain three nodes. nodes include specified either labels indices denotes power set. conditions causal analysis graphical representation system background conditions fixed current state subsystem perturbed observed order derive tpm. representation equivalent operation performed conditioning system state nodes outside subsystem marginalizing nodes pyphi done subsystem created; subsystem accessed attribute e.g. subsystem.tpm. lowest-level objects system cause repertoire effect repertoire nodes within subsystem called mechanism another nodes within subsystem called purview mechanism. cause repertoire probability distribution captures information specified mechanism purview describing previous state purview constrained current state mechanism. mechanism nodes state noising non-mechanism nodes time remove causal influence purview; observing resulting state transition ignoring state non-purview nodes order derive distribution purview states noised resulting state transition observed ignoring state non-mechanism nodes. bayes’ rule applied resulting distribution purview states corresponding operations detailed calculation cause/effect repertoires illustrated calculating independent noise perturbation/observation step. avoid counting correlations outside mechanism-purview pair constraints current state mechanism. graphically process would correspond replacing noised node parent multiple purview nodes mechanism nodes multiple independent virtual nodes however equivalent definition repertoires eqs. obviates need actually implement virtual nodes pyphi. note repertoires returned multidimensional form indexed state tuples above. repertoires reshaped -dimensional needed e.g. plotting care must taken numpy’s fortran ordering used pyphi’s little-endian convention indexing states respected pyphi provides assessed information mechanism purview next step assess integrated information quantifying extent cause effect repertoires mechanism-purview pair reduced repertoires parts. tested partitioning parts cutting connections them. applying perturbation/observation procedure cutting connections obtain partitioned repertoire. since partition renders parts independent terms manipulations partitioned repertoire calculated product individual repertoires parts. partitioned repertoire different original unpartitioned repertoire mechanism whole specify integrated information purview. contrast repertoire cannot factored selectivity causal influence mechanism integrated whole purview repertoire said irreducible. partition quantified distance unpartitioned repertoire partitioned repertoire many ways divide mechanism purview parts irreducibility measured every partition partition yields minimum irreducibility called minimum-information partition integrated information mechanism-purview pair distance unpartitioned repertoire partitioned repertoire associated mip. pyphi supports several distance measures partitioning schemes subsystem.effect_mip methods. returns repertoireirreducibilityanalysis object contains well value mechanism purview temporal direction unpartitioned repertoire partitioned repertoire. example compute effect product repertoire repertoire empty mechanism however repertoire cannot factored without information loss; distance unpartitioned partitioned repertoire nonzero maximally irreducible effect specified mechanism. done searching possible purviews repertoireirreducibilityanalysis object maximal value. subsystem.mic subsystem.mie methods implement search procedure; +--------------------------++--------------------------+ purview purview --|| repertoire repertoire partitioned repertoire partitioned repertoire |+--------------------------+ +--------------------------+ note pyphi repertoires distributions purview states rather system states. occasionally convenient represent repertoires distributions entire system. done expand_cause_repertoire expand_effect_repertoire methods concept object assume unconstrained distribution states non-purview nodes implemented pyphi.compute.ces function simply calls subsystem.concept every mechanism power subsystem nodes. returns causeeffectstructure object containing concepts every mechanism except specifies concept described point irreducibility subsystem’s evaluated applying integration postulate system level. integration mechanism level idea measure difference made partition take minimal value irreducibility subsystem. parts edges going part rendering causally ineffective. implemented operation follows ecut denote directed edges subsystem edge ecut source node target node edge modify individual node marginalizing states resulting specifies function implemented causal influence removed. combine modified node tpms recover full partitioned subsystem. finally recalculate subsystem modified unpartitioned partitioned cess several distances supported; configuration). distance evaluated every partition minimum value across partitions subsystem’s integrated information measures extent specified subsystem irreducible minimal partition. procedure implemented pyphi.compute.sia function returns systemirreducibilityanalysis object verify value example system minimal partition removes causal connections final step unfolding system apply postulate exclusion system level. compute subset network considered subsystem find maximal called maximally-irreducible cause-effect structure system. subsystem giving rise called major complex; overlapping subsets lower excluded. non-overlapping subsets analyzed find additional complexes within system. pyphi designed easy interactive exploratory research settings nonetheless remaining suitable large-scale simulations component larger applications. also designed efficient given high computational complexity algorithms iit. describe implementation details optimizations used software. pyphi supports three different representations -dimensional state-by-node multidimensional state-by-node state-by-state. state-by-node form canonical representation pyphi -dimensional form used input visualization multidimensional form used internal computation. state-by-state representation given input option accustomed general form. given state-by-state form pyphi raise error satisfy state-by-node form matrix entry gives probability node system state representation advantage compact state-by-state form entries instead number nodes. note admits representation pyphi nodes binary; specified single entry case since probabilities must -dimensional tpms must implicit mapping states indices. pyphi mapping achieved listing state tuples lexicographical order interpreting binary numbers state first node corresponds least-significant e.g. state mapped index designating first node’s state least-significant analogous choosing little-endian convention organizing computer memory. convention preferable mapping stable inclusion nodes including another node subsystem requires concatenating rows column rather interleaving them. note opposite convention used writing numbers positional notation; care must taken converting states indices different representations state-by-state provided pyphi user converted state-by-node form conditional independence property checked. note state-by-node form necessarily satisfies internal computations reshaped dimensions rather first dimensions correspond states nodes last dimension corresponds probabilities node words indices rows -dimensional unraveled dimensions dimension indexed -dimensional index according little-endian convention. stored numpy array multidimensional form allows take advantage numpy indexing state tuple index directly without converting integer index importantly multidimensional representation simplifies calculation marginal conditional distributions cause/effect repertoires allows efficient broadcasting probabilities multiplying distributions. specifically python multiplication operator acts tensor product operands numpy arrays equal dimensionality dimension either a.shape b.shape cause effect repertoires mechanism purview describe mechanism nodes particular state constrain possible states purview nodes respectively. describe derived pyphi. effect repertoire begin simplest case calculating effect repertoire mechanism purview consisting single element defined conditional probability distribution states purview element given current state mechanism pre-processing step performed subsystem object created node object created element subsystem. node contains individual extracted subsystem’s tpm; matrix number node’s parents entry gives probability node state given parents state node represented internally multidimensional state-by-node form usual singleton dimensions subsystem elements parents node. effect repertoire calculated conditioning purview node’s state mechanism nodes also parents purview node pyphi.tpm.condition_tpm function marginalizing non-mechanism nodes pyphi.tpm.marginalize_out. resulting array multiplied array ones desired shape numpy’s broadcasting feature step equivalent taking tensor product array maximum-entropy distribution mechanism nodes parents final result distribution mechanism nodes desired. again pyphi tpms repertoires represented tensors dimension corresponding node numpy multiplication operator distributions different nodes equivalent tensor product. thus effect repertoire arbitrary purview trivially implemented taking product effect repertoires purview node numpy.multiply. cause repertoire cause repertoire single-element mechanism purview defined conditional probability distribution states purview given current state mechanism effect repertoire obtained conditioning marginalizing tpm. however gives conditional probabilities states given state bayes’ rule first applied express cause repertoire terms conditional distribution states given state marginal distribution previous states uniform distribution. analysis captures mechanism state constrains purview without biased whether certain states arise frequently others dynamical evolution system cause repertoire calculated marginalizing states non-mechanism elements mechanism node obtained indexing last dimension node’s state marginalizing non-purview nodes pyphi.tpm.marginalize_out. effect repertoire resulting array multiplied array ones desired shape order obtain distribution entire purview. finally case probabilities obtained columns necessarily distribution normalized pyphi.distribution.normalize. normalization factor ensures distribution sums implemented pyphi numpy.multiply pyphi.distribution.normalize. complete illustration procedures calculating postulates induce natural hierarchy computations pyphi’s implementation mirrors hierarchy using object-oriented programming factoring computations compositions separate functions possible. advantage approach level computation performed independently higher levels; example interested certain mechanisms rather full mics could simply call subsystem.effect_mip mechanisms instead calling pyphi.compute.sia extracting resulting systemirreducibilityanalysis object separating calculation many subroutines exposing user also advantage easily composed implement functionality already built-in. many aspects pyphi’s behavior configured pyphi.config object. configuration specified yaml file example available github repository. pyphi imported checks current directory file named pyphi_config.yml automatically loads exists. configuration settings also loaded arbitrary file pyphi.config.load_config_file function. describe various optimizations approximations used software reduce complexity calculations memoization caching optimizations described appendix. mentioned input providing connectivity information explicitly greatly reduce time complexity computations certain cases missing connections imply reducibility priori. example system level subsystem strongly connected necessarily zero. unidirectional system part rest always found actually remove edges cess without identical accordingly pyphi immediately excludes subsystems finding major complex system. similarly mechanism level pyphi uses exclude certain purviews consideration computing efficiently determining repertoires purviews reducible without needing explicitly compute them. suppose sets nodes exist partitions edges edges effect repertoire mechanism purview factored repertoire distances available pyphi earth mover’s distance hamming distance ground metric. computing repertoires costly operation time complexity number nodes purview however comparing effect repertoires pyphi exploits theorem states distributions multiple nodes emds marginal distributions individual node independent. analytical solution time complexity significant improvement general algorithm conditional independence property conditions theorem hold calculations effect repertoires thus analytical solution used half repertoire calculations performed analysis. theorem formally stated proved appendix. one. approximation reduces scope search possible system cuts. instead evaluating partitioned unidirectional bipartitions system bipartitions evaluated sever edges single node rest network vice versa. since goal find minimal value across possible partitions approximation provides upper bound exact value system. concepts. choices mechanism partitioning schemes distance measures possible partitioned system contains concepts reducible unpartitioned system thus part unpartitioned ces. reason pyphi default computes partitioned scratch partitioned tpm. concepts approximation concepts ignored. instead repeating entire computation system partition requires reevaluating possible candidate mechanisms irreducibility mechanisms taken account already specify concepts unpartitioned ces. many types systems concepts partition rare. approximations using concepts option thus often accurate. note however approximation provides neither theoretical upper lower bound exact value system. pyphi’s main limitation algorithm exponential time number nodes number states subsystems mechanisms purviews partitions must considered grows exponentially size system. limits size systems practically analyzed nodes. example calculating major complex systems three five seven stochastic majority gates connected circular chain bidirectional edges takes respectively using approximation calculations take practice actual execution times substantially variable depend specific network analysis network structure determines effectiveness optimizations discussed above. markovian satisfies conditional independence property. reasonable assumptions intended case software analyzing causal derived using calculus perturbations however guarantee assumptions valid circumstances tpms derived observed time series whether system markov property conditional independence property carefully checked applying software novel contexts. pyphi installed python’s package manager command ‘pip install pyphi’ linux macos systems equipped python higher. open-source licensed general public license source code version-controlled hosted public repository github https//github.com/wmayner/pyphi. comprehensive continually-updated documentation available online https//pyphi.readthedocs.io. pyphi-users mailing list joined https//groups.google.com/forum/forum/pyphi-users. web-based graphical interface software available http//integratedinformationtheory.org/calculate.html. versions. include module calculating multiple spatial temporal scales theoretically required exclusion postulate module implementing calculus actual causation formulated software also updated reflect developments optimizations algorithm. marshall walker tononi albantakis causal analysis reveal autonomy models biological systems. philosophical transactions royal society london mathematical physical engineering sciences. doi./rsta... course computing systemirreducibilityanalysis several functions pyphi called multiple times input. example calculating cause_repertoire cause_repertoire require calculating cause_repertoire similarly cause_repertoire unpartitioned repertoire candidate mechanism purview first term expression partitioned repertoire candidate mechanism purview partition situations natural optimization technique reduce expensive re-computation functions memoization function computed given input input-output pair stored lookup table; function called input output simply looked table returned without computing function again. subsystem._single_node_effect_repertoire un-normalized cause repertoire single-node mechanism effect repertoire single-node purview respectively systemirreducibilityanalysis object stored persistently filesystem rather memory directory named __pyphi_cache__ means systemirreducibilityanalysis objects automatically saved across python sessions quickly retrieved simply running code useful interactive exploratory work. behavior controlled pyphi.config.cache_sias configuration setting. note however feature primarily convenience intended replace explicit data management. additionally care must taken erase disable cache upgrading versions pyphi changes algorithm invalidate previously computed output. final caveat results stored filesystem accumulate occupy large amount disk space __pyphi_cache__ directory periodically removed. consider system cuts edges nodes nodes edges none node tpms changed applying thus subsystem unchanged product node tpms. since cause-effect structure system function subsystem’s cause-effect structure partitioned subsystem cause-effect structure unpartitioned subsystem identical. definition mechanism-purview pair said block factorable exists permutation mechanism indices permutation purview indices block diagonal block diagonal proof. consider mechanism constituted elements purview constituted elements. assume without loss generality effect purview. since block factorable exist permutations block diagonal i.e. note either thus edges leaves subsystem’s unchanged. since effect repertoire mechanism-purview combination function subsystem’s unpartitioned effect repertoire partitioned repertoire identical.", "year": "2017"}