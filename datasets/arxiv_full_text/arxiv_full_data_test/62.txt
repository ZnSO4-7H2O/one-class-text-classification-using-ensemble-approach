{"title": "Optimal Seed Solver: Optimizing Seed Selection in Read Mapping", "tag": "q-bio", "abstract": " Motivation: Optimizing seed selection is an important problem in read mapping. The number of non-overlapping seeds a mapper selects determines the sensitivity of the mapper while the total frequency of all selected seeds determines the speed of the mapper. Modern seed-and-extend mappers usually select seeds with either an equal and fixed-length scheme or with an inflexible placement scheme, both of which limit the potential of the mapper to select less frequent seeds to speed up the mapping process. Therefore, it is crucial to develop a new algorithm that can adjust both the individual seed length and the seed placement, as well as derive less frequent seeds.  Results: We present the Optimal Seed Solver (OSS), a dynamic programming algorithm that discovers the least frequently-occurring set of x seeds in an L-bp read in $O(x \\times L)$ operations on average and in $O(x \\times L^{2})$ operations in the worst case. We compared OSS against four state-of-the-art seed selection schemes and observed that OSS provides a 3-fold reduction of average seed frequency over the best previous seed selection optimizations. ", "text": "computer science department carnegie mellon university pittsburgh usa. dept. electrical computer engineering carnegie mellon university pittsburgh usa. computational biology department carnegie mellon university pittsburgh usa. dept. computer engineering bilkent university bilkent ankara turkey. department computer science engineering washington university louis seed-and-extend based read mappers mrfast razers shrimp hobbes reads partitioned several short non-overlapping segments called seeds. seeds used indexes reference genome reduce search space speed mapping process. since seed subsequence read contains every correct mapping read reference genome also mapped seed mapping locations seeds therefore generate pool potential mappings read. mapping locations seeds reference genome precomputed stored seed database fm-index quickly retrieved database lookup. errors read read still correctly mapped long exists seed read error free. error-free seed obtained breaking read many non-overlapping seeds; general tolerate errors read divided seeds based pigeonhole principle least seed error free. potential mapping locations seeds veriﬁed using weighted edit-distance calculation needleman-wunsch algorithms) examine quality mapping read. locations pass ﬁnal veriﬁcation step valid mappings recorded mapper later stages genomic analysis. computing edit-distance expensive operation primary computation performed read mappers. fact speeding computation subject many works area research shifted hamming distance gene myers’ bit-vector algorithm simd implementations edit-distance algorithms allow edits mappers must divide reads multiple seeds. seed increases number locations must veriﬁed. furthermore divide read seeds lengths seeds must reduced make space increased number seeds; shorter seeds occur frequently genome requires mapper verify even potential mappings. therefore building fast error tolerant mapper high sensitivity select many seeds minimizing frequency occurrence genome ensure fast operation. goal work theoretically-solid groundwork enable techniques optimal seed selection current future seed-and-extend mappers. abstract motivation optimizing seed selection important problem read mapping. number non-overlapping seeds mapper selects determines sensitivity mapper total frequency selected seeds determines speed mapper. modern seed-and-extend mappers usually select seeds either equal ﬁxed-length scheme inﬂexible placement scheme limit potential mapper select less frequent seeds speed mapping process. therefore crucial develop algorithm adjust individual seed length seed placement well derive less frequent seeds. results present optimal seed solver dynamic programming algorithm discovers least frequently-occurring seeds l-bp read operations average operations worst case. compared four state-of-the-art seed selection schemes observed provides -fold reduction average seed frequency best previous seed selection optimizations. availability provide implementation optimal seed solver https//github.com/cmu-safari/optimal-seed-solver contact hxincmu.edu calkancs.bilkent.edu.tr onurcmu.edu introduction invention high-throughput sequencing platforms past decade triggered revolution ﬁeld genomics. platforms enable scientists sequence mammalian-sized genomes matter days created opportunities biological research. example possible investigate human genome diversity populations genomic variants likely cause disease study genomes species ancient hominids better understand human evolution. however sequencing platforms drastically increase computational burden genome data analysis. first billions short segments aligned long reference genome. read aligned sites reference based similarity process called read mapping reads matched locations genome certain allowed number errors insertions deletions substitutions matching strings approximately certain number allowed errors difﬁcult problem. result read mapping constitutes signiﬁcant portion time spent analysis genomic data. associated search space large grows exponentially number seeds increases. seed selected position read length long overlap seeds. observe signiﬁcant advantage selecting seeds unequal lengths possible seeds equal lengths drastically different levels frequencies. goal paper develop inexpensive algorithm derives optimal placement length seed read overall frequencies seeds minimized. frequencies seeds typically differ figure shows static distribution frequencies ﬁxed-length seeds human reference genome ﬁgure shows average seed frequency decreases increase seed length. longer seeds patterns index reference genome. thus pattern average less frequent. paper makes following contributions examines frequency distribution seeds seed database counts often seeds different frequency levels selected using naive seed selection scheme. conﬁrm discovery prior works frequencies evenly distributed among seeds frequent seeds selected often naive seed selection scheme. show phenomenon persists even using longer seeds. provides implementation optimal seed ﬁnding algorithm optimal seed solver uses dynamic programming efﬁciently least frequent nonoverlapping seeds given read. prove algorithm always provides least frequently-occurring seeds read. optimal seed solver existing seed selection optimizations including adaptive seeds filter mapper cheap k-mer selection fasthash optimal preﬁx selection hobbes mapper spaced seeds patternhunter compare complexity memory trafﬁc average frequency selected seeds optimal seed solver four state-of-the-art seed selection mechanisms. show optimal seed solver provides least frequent seeds among existing seed selection optimizations reasonable complexity memory trafﬁc. motivation build fast error tolerant mapper high mapping coverage reads need divided many infrequently occurring seeds. mappers able correct mappings read minimizing number edit-distance calculations need performed. achieve goal overcome major challenges seeds short general therefore frequent genome; frequencies seeds vary signiﬁcantly. provide discussions challenge greater detail. assume read length base-pairs erroneous tolerate errors read need select seeds renders seed long average. given desired error rates many mainstream mappers large typically average seed length hash-table based mapper greater fig. frequency distribution seeds ﬁxed-length seed databases. plot shows many unique seeds frequency level. notice trend plot continuous line made many discrete data points. figure also observe frequencies seeds evenly distributed seeds lengths base-pairs many seeds frequencies ﬁgure seed frequencies high seed counts often however also seeds frequencies greater even though seed counts frequencies usually explains plots figure follow bimodal distribution; except seeds perhaps seeds frequency seeds peaks around although ultra-frequent seeds among seeds ubiquitous genome. result randomly selected read high chance read contains frequent seeds. effect best illustrated figure presents numbers frequencies consecutively selected seeds reduce total frequency selected seeds need intelligent seed selection mechanism avoid using frequent patterns seeds. importantly limited number base-pairs read need carefully choose length seed. extension infrequent seed necessarily provide much reduction total frequency seeds consume base-pairs could used extend frequent seeds. besides determining individual seed lengths also intelligently select position seed. multiple seeds selected small region read closely packed together seeds forced keep short lengths potentially increase seed frequency. based observations goal paper develop algorithm calculate length placement seed read. hence total frequency seeds minimized. call seeds optimal seeds read produce minimum number potential mappings veriﬁed maintaining sensitivity mapper. call frequencies optimal seeds optimal frequency read. fig. frequency distribution seeds runtime selecting seeds consecutively mapping reads real read genome project different number required seeds. unlike figure average frequency seeds average frequencies seeds figure greater furthermore figure observe ultra-frequent seeds selected often less frequent seeds seed count increases higher seed frequencies observation suggests ultra-frequent seeds surprisingly numerous reads especially considering ultra-frequent seed patterns total seed database call phenomenon frequent seed phenomenon. frequent seed phenomenon explained previous works summarize highly frequent seed patterns ubiquitous genome therefore appear often randomly sampled reads reads sampled shotgun sequencing. frequency distributions seed lengths provided supplementary materials. takeaway figure figure although longer seeds average less frequent shorter seeds seeds still much frequent others prevalent reads. therefore naive seed selection methods biggest challenge deriving optimal seeds read large search space. allow seed selected arbitrary location read arbitrary length read length possibilities extract single seed. multiple seeds search space grows exponentially since position length newly selected seed depend positions lengths previously selected seeds. seeds many seed selection schemes. although theory seed length assume length seed bounded range bound based observation practice neither short seeds long seeds commonly selected optimal seeds. ultra-short seeds frequent. seeds shorter frequencies ultra-long seeds consume many base-pairs read shorten lengths seeds increase frequencies. furthermore long seeds mostly either unique non-existent reference genome extending unique non-existent seed longer provides little beneﬁt consuming extra base-pairs read. bounding seed lengths reduces search space optimal seeds. however essential oss. still work without seed length limitations although perform extra computation. describe optimal seed solver algorithm three sections. first introduce core algorithm oss. improve algorithm optimizations optimal divider cascading early divider termination. finally explain overall algorithm provide pseudo code. core algorithm naive brute-force solution optimal seeds read would systematically iterating possible combinations seeds. start selecting ﬁrst seed instantiating possible positions lengths seed. position length ﬁrst seed instantiate possible positions lengths second seed sampled ﬁrst seed. repeat process rest seeds sampled seeds. combination seeds calculate total seed frequency minimum total seed frequency among combinations. problem brute-force solution examines obviously suboptimal combinations. example figure m-seed combinations extracted read combinations position among them optimal smaller total seed frequency. number seeds greater know ﬁnal optimal solution seeds position exactly like since seeds appended figure also appended figure produce smaller total seed frequency. words compared potential part optimal solution worth appending seeds after. general among combinations equal numbers seeds position read combination smaller total seed frequency potential becoming part bigger optimal solution. therefore partial read combinations subset seeds partial read optimal subset seeds partial read might relevant optimal solution entire read. suboptimal solutions partial read lead optimal solution pruned. fig. -seed combinations position read. total seed frequency smaller combinations extended adding third seed making respectively. third seed total seed frequency must greater observation suggests summarizing optimal solutions partial reads smaller number seeds prune search space optimal solution. speciﬁcally given seeds substring starts beginning read optimal seeds could part optimal solution read. suboptimal combinations seeds pruned. storing optimal solutions partial reads smaller number seeds also helps speed computation larger numbers seeds. assuming already calculated stored optimal optimal frequency seeds substrings calculate optimal -seed solution substrings iterate series divisions substring. division divide substring parts extract seeds ﬁrst part seed second part. minimum total seed frequency division simply optimal m-seed frequency ﬁrst part optimal -seed frequency second part. already optimal m-seed frequency ﬁrst part -seed frequency second part calculated stored optimal frequency division computed addition lookups. optimal -seed solution substring simply division yields minimum total frequency. given seed requires least smin base-pairs substring length total smin possible divisions examined. relationship summarized recurrence function equation denotes optimal m-seed frequency substring denotes length implements strategy using dynamic programming algorithm calculate optimal -seed solution read computes stores optimal solutions partial reads fewer seeds iterations. iteration computes optimal solutions substrings regard speciﬁc number seeds. iteration computes optimal mseed solutions substrings starts beginning re-using optimal solutions computed previous iteration. substring performs series divisions ﬁnds division provides minimum total frequency seeds. division computes optimal m-seed frequency summing optimal -seed frequency ﬁrst part -seed frequency second part. frequencies obtained previous iterations. overall starts seed iterates seeds. finally computes optimal -seed solution ﬁnding optimal division reuses results iteration. optimizations dynamic programming algorithm optimal seeds l-bp read operations iteration examines substrings substring inspects divisions smin divisions l-bp substring). total divisions veriﬁed iteration. speed reduce average complexity processing iteration propose optimizations optimal divider cascading early divider termination. optimizations empirically reduce average complexity processing iteration describe optimizations detail. optimal divider cascading point assumption optimal solutions substrings within iteration independent other optimal division substring independent optimal division another substring thus must derived independently. observe assumption necessarily true exists relationship substrings different lengths iteration ﬁrst optimal divider shorter substring must closer position towards beginning read compared ﬁrst optimal divider longer substring. call phenomenon optimal divider cascading depicted figure proof optimal divider cascading always true provided supplementary materials. early divider termination optimal divider cascading able reduce search space ﬁrst optimal divider substring exclude positions come ﬁrst optimal divider previous longer substring. however search space still large since divider prior ﬁrst optimal divider previous substring could optimal divider. reduce search space dividers substring propose second optimization early divider termination. based optimal divider cascading start position ﬁrst optimal divider previous substring. then gradually move divider towards beginning check total seed frequency division move. process ﬁrst part division gradually shrinks second part gradually grows show figure according lemma supplementary materials optimal frequency ﬁrst part must monotonically non-decreasing optimal frequency second part must monotonically non-increasing. fig. propagating dividers substring. divider starts position previous substring’s ﬁrst optimal divider gradually moves towards beginning substring reaches termination position fig. substrings ﬁrst optimal dividers iteration. observe ﬁrst optimal divider longer substring never towards beginning read ﬁrst optimal divider shorter substring. based optimal divider cascading phenomenon know substrings iteration ﬁrst optimal divider shorter substring must ﬁrst optimal divider longer substring. relationship reduce search space optimal dividers substring processing substrings within iteration longest shortest. iteration start longest substring read read itself. examine divisions read ﬁrst optimal divider then move next substring length substring need check dividers prior position ﬁrst optimal divider read. processing length substring move length substring whose search space reduced positions closer position beginning read ﬁrst optimal divider length substring. procedure repeated shortest substring iteration processed. position divider freqp denote frequency second part ∆freqp denote change frequency ﬁrst part current next move. early divider termination suggests that divider stop moving backward whenever |∆freqp| |freqp|. dividers prior position guaranteed greater total seed frequencies. call stopping position termination position division position termination division denoted name ﬁrst second part respectively. divider comes prior termination position compared termination division ﬁrst part shorter second part longer. hence optimal frequency ﬁrst part greater optimal frequency second part denote increase optimal smaller. |∆freqp frequency ﬁrst part current division termination denote decrease second part. division |∆freqp |∆freqt|. since based lemma |∆freqp frequency seed smaller also |freqt| |∆freqp combining three inequalities |∆freqp |∆freqp suggests compared termination division frequency increase ﬁrst part must greater frequency reduction second part. hence overall optimal frequency division must greater optimal frequency termination division. therefore divisions prior termination position cannot optimal. using early divider termination reduce search space dividers within substring exclude positions prior termination position. since second part substring hosts seed frequencies seeds decrease extending length observe termination position substring reached fairly quickly moves. optimal divider cascading early divider termination experiments observe need verify divisions average substring. conclude optimizations reduced average complexity optimal seed solver full algorithm full algorithm optimal seed solver. present calculating optimal x-seed frequency read assume already optimal -seed frequency substring retrieved o-time lookup optimalf function. information preprocessed prior mapping calculated dynamically runtime. calculated runtime requires lookups seed database possible substrings read. irstoptdivider function calculate ﬁrst optimal divider substring. optimal seeds calculated ﬁlling array data size array element stores data optimal seed frequency ﬁrst optimal divider. element column stores optimal i-seed frequency substring well ﬁrst optimal divider substring. retrieve starting ending positions optimal seed backtrack array backward induce optimal substrings optimal dividers iteration. pseudo code backtracking process provided supplementary materials. related works primary contribution work dynamic programming algorithm derives optimal non-overlapping seeds read operations average. knowledge ﬁrst work calculates optimal seeds optimal frequency read. related prior works optimizations seed selection mechanism reduce seed frequencies read using greedy algorithms. existing seed selection optimizations classiﬁed three categories extending seed length avoiding frequent seeds rebalancing frequencies among seeds. optimizations ﬁrst category extend frequent seeds longer order reduce frequencies. optimizations second category sample seed positions read reject positions generate frequent seeds. optimizations third category rebalance frequencies among seeds average seed frequency runtime consistent static average seed frequency seed database. algorithm optimalseedsolver input read output optimal x-seed frequency freq ﬁrst x-seed optimal divider global data structure data array data functions ﬁrstoptdivider computes ﬁrst optimal divider substring optimalfreq retrieves optimal -seed frequency substring pseudocode fill first iteration smin qualitatively compare optimal seed solver four representative prior works selected three categories. cheap k-mer selection fasthash optimal preﬁx selection hobbes adaptive seeds filter mapper spaced seeds patternhunter among four prior works represents works ﬁrst category; represent works second category spaced seeds represents works third category. elaborate greater details. adaptive seeds filter seeks reduce frequency seeds extending lengths seeds. read starts ﬁrst seed beginning read keeps extending seed seed frequency predetermined threshold subsequent seed starts previous seed left read repeats extension process last seed found. guarantees seeds frequency algorithm ﬁrstoptdivider output ﬁrst optimal divider substring global data structure data array data functions optimalfreq retrieves optimal -seed frequency substring pseudocode ﬁrst prev div; freq int; prev freq int; prev freq int; prev smin cheap k-mer selection aims reduce seed frequencies selecting seeds wider potential seed pool. ﬁxed seed length samples seed positions consecutively read position apart another k-bp. among positions selects seed positions yield least frequent seeds avoids using positions generate frequent seeds. seed frequencies followed sort although fast provide limited seed frequency reduction limited pool select seeds from. instance common mapping setting read length seed length read divided positions. potential positions select from forced gradually select frequent seeds greater seed demands. tolerate errors read select seeds potential seed positions. implies select frequent seed potential seeds. shown figure seeds average frequency selecting frequent position potential seeds renders high possibility selecting frequent seed higher frequency average. similar optimal preﬁx selection also uses ﬁxed length seeds. however allows greater freedom choosing seed positions. unlike select seeds positions multiple seed length allows seeds selected position read long overlap. selecting seeds consecutively starting beginning read always produce infrequent seeds. although seeds longer either unique non-existent reference seeds still frequent occurrences even small smax small cannot guarantee selected seeds less frequent cannot extend seed smax-bp even frequency still greater seed starts position yields long frequent seed extend seed smax accept seed frequency still greater setting static reads worsens problem. reads drastically different. reads include frequent short patterns reads many highly frequent short patterns. reads without frequent short patterns produce frequent seeds unless large result selected seeds short reads many frequent short patterns high possibility producing longer seeds mediumsized small batch reads global small number reads many frequent short patterns high chance producing many long seeds read enough length support. large number reads without frequent short patterns produce many short resembling optimal seed ﬁnding algorithm basis also dynamic programming algorithm implements simpler recurrence function. major difference need derive optimal length seed seed length ﬁxed reduces search space optimal seeds single dimension seed placements. worst case/average complexity compared complex requires seed frequency lookups. return ﬁnds less frequent seeds especially large seed numbers. however ﬁxed seed length cannot reduce seed frequencies extending seeds longer. spaced seeds rebalancing frequencies among patterns seed database introducing hash function guided user-deﬁned bit-mask. different patterns hashed hash value considered single rebalanced seed. carefully designing hashing function extracts basepairs selected positions longer pattern spaced seeds group frequent long patterns infrequent long patterns merge rebalanced seeds smaller frequency variations. runtime long seeds selected consecutively reads processed rebalancing hash function later. compared spaced seeds disadvantages. first hash function cannot perfectly balance frequencies among rebalanced seeds. rebalancing still large disparity seed frequency amongst seeds. second seed placement spaced seeds static accommodate high frequency seeds. therefore positions generate frequent seeds avoided table average case complexity memory trafﬁc comparison seed selection optimizations including optimal seed solver adaptive seeds filter cheap k-mer selection optimal preﬁx selection spaced seeds naive note different empirical average case complexity worst case complexity. average case worst case complexity optimizations equal. results section compare average case complexity memory trafﬁc effectiveness four prior studies spaced seeds well naive mechanism selects ﬁxed seeds consecutively. memory trafﬁc measured number required seed frequency lookups single read. effectiveness seed selection scheme measured average seed frequency mapping reads real read genomes project different numbers seeds. measure execution time mechanism different seed selection optimizations combined different seed database implementations. spaced seeds hash tables short ﬁxed-length seeds employs slower memory efﬁcient fmindex longer variant-length seeds. however combination inter-changeable. spaced seeds also work well fm-index also combined large hash-table given sufﬁcient memory space. besides different existing implementations unique seed database optimizations introduces variations execution time. reasons compare complexity memory trafﬁc seed selection scheme without measuring runtime performance. benchmark seed optimization scheme multiple conﬁgurations. benchmark multiple frequency thresholds read fails provide enough seeds many long seeds small thresholds read processed ﬁxed seed length -bp. benchmark naive three ﬁxed seed lengths benchmark spaced seeds default bit-mask hashes long seeds long signatures. table summarizes average complexity memory trafﬁc seed selection optimization. table observe requires seed frequency lookups worst average case complexity tied ops. nonetheless effective seed selection scheme figure shows. among seed selection optimizations provides largest frequency reduction seeds average shown figure average seed frequencies increase seeds. expected less ﬂexibility seed placement seeds. seeds also means shorter average seed length also contributes greater average seed frequencies. average seed frequencies remains similar three fewer seeds. three seeds average seed frequencies increase seeds. three seeds reads enough basepairs accommodate seeds since maximum seed length smax however beyond three seeds reads start fail failed reads passed instead. therefore increase three seeds mainly increase cks. seeds observe experiment total reads fail processed instead. average seed frequency decreases increasing seed length number seeds small number seeds large obvious greater seed lengths provide smaller average seed frequencies. fact seeds average seed frequency rises slightly increase seed length because small numbers seeds read plenty space arrange accommodate slightly longer seeds. therefore case longer seeds reduce average seed frequency. however large numbers seeds even small increase seed length signiﬁcantly decrease ﬂexibility seed arrangement. case frequency reduction longer seeds surpassed frequency increase reduced ﬂexibility seed arrangement. moreover beneﬁt longer seeds diminishes greater seed lengths. many seeds already infrequent -bp. extending infrequent seeds longer introduce much reduction total seed frequency. result corroborates urge enabling ﬂexibility individual seed length seed placements. discussion shown results section requires seedfrequency lookups order derive optimal solution read. non-trivial seed database implementation fm-index time consuming process. reads include frequent short patterns expensive procedure little beneﬁt simpler seed selection mechanisms also produce low-frequency seeds. therefore designing mapper best used junction experiment observe effective greedy seed selection optimization still provides frequent seeds average optimal. better greedy algorithms provides less frequent seeds without large number database lookups also included future research. conclusion optimizing seed selection important problem read mapping. number selected non-overlapping seeds deﬁnes error tolerance mapper total frequency selected seeds determines performance mapper. build fast error tolerant mapper essential select large number nonoverlapping seeds keeping seed infrequent possible. paper conﬁrmed frequent seed phenomenon discovered previous works suggests naive seed selection scheme mappers tend select frequent seeds reads even using long seeds. solve problem proposed optimal seed solver dynamic-programming algorithm derives optimal seeds read minimum total frequency. improved optimizations optimal divider cascading early seed termination. optimizations reduced average-case complexity achieved worst-case complexity. compared four prior studies adaptive seeds filter cheap k-mer selection optimal preﬁx selection spaced seeds showed provided -fold seed frequency reduction best previous seed selection scheme optimal preﬁx selection. funding study supported grant alkan mutlu kingsford) marie curie career integration grant alkan seventh framework programme. alkan also acknowledges support science academy turkey bagep program. alkan kidd marques-bonet aksay antonacci hormozdiari kitzman baker malig mutlu sahinalp gibbs eichler. personalized copy number segmental duplication maps using next-generation sequencing. genet ferragina manzini. opportunistic data structures applications. proceedings annual symposium foundations computer science focs pages washington ieee computer society. flannick thorleifsson beer jacobs grarup burtt mahajan fuchsberger atzmon benediktsson blangero bowden brandslund brosnan burslem chambers christensen douglas duggirala dymek farjoun fennell fontanillas fors´en gabriel glaser gudbjartsson hanis hansen hreidarsson hveem ingelsson isomaa johansson jørgensen jørgensen kathiresan kong kooner kravic laakso j.-y. lind lindgren linneberg masson meitinger mohlke molven morris potluri fig. average seed frequency comparison among optimal seed solver adaptive seeds filter cheap k-mer selection optimal preﬁx selection spaced seeds naive results gathered mapping reads read genome project different numbers seeds ﬁgure smaller average seed frequency indicates effective seed selection mechanism. greedy seed selection algorithms. conﬁguration invoked greedy seed selection algorithms fail deliver infrequent seeds. however study beyond scope paper explored future research. scally dutheil hillier jordan goodhead herrero hobolth lappalainen mailund marques-bonet mccarthy montgomery schwalie tang ward yngvadottir alkan andersen ayub ball beal bradley chen clee fitzgerald graves heath heger insights hominid evolution gorilla genome sequence. nature ventura catacchio alkan marques-bonet sajjadian graves hormozdiari navarro malig baker turner chen kidd archidiacono shendure wilson eichler. gorilla genome structural variation reveals evolutionary parallelisms chimpanzee. genome greth emmons pekhimenko kingsford alkan mutlu. shifted hamming distance fast accurate simd-friendly ﬁlter accelerate alignment veriﬁcation read mapping. bioinformatics rauramaa ribel-madsen a.-m. richard rolph salomaa segr`e sk¨arstrand steinthorsdottir stringham sulem teslovich thorsteinsdottir trimmer tuomi tuomilehto vaziri-sani voight wilson boehnke mccarthy njølstad pedersen g.-t. groop stefansson altshuler. loss-of-function mutations slca protect type diabetes. nature genetics green krause briggs maricic stenzel kircher patterson zhai h.-y. fritz hansen durand a.s. malaspinas jensen marques-bonet alkan prfer meyer burbano good schultz aximu-petri butthof hber hffner siegemund weihmann nusbaum lander russ draft sequence neandertal genome. science marques-bonet kidd ventura graves cheng hillier jiang baker malfavon-borja fulton alkan aksay girirajan siswara chen cardone navarro mardis wilson eichler. burst segmental duplications genome african great ancestor. nature meyer kircher m.-t. gansauge racimo mallick schraiber pr¨ufer filippo sudmant alkan rohland tandon siebauer green bryc briggs stenzel dabney shendure kitzman hammer shunkov derevianko patterson andr´es eichler slatkin reich kelso p¨a¨abo. high-coverage genome sequence archaic denisovan individual. science bigham buckingham hannibal mcmillin gildersleeve beck tabor cooper mefford turner smith rieder k.-i. yoshiura matsumoto ohta niikawa nickerson bamshad shendure. exome sequencing identiﬁes mutations cause kabuki syndrome. genet prado-martinez sudmant kidd kelley lorentegaldos veeramah woerner o’connor santpere cagan theunert casals laayouni munch hobolth halager malig hernandez-rodriguez hernando-herraez pr¨ufer pybus johnstone lachmann alkan twigg petit baker hormozdiari fernandez-callejo dabad wilson stevison camprub´ı carvalho ruiz-herrera vives mele abello kondova bontrop pusey lankester kiyang bergl lonsdorf myers ventura gagneux comas siegismund blanc agueda-calpena fulton tishkoff mullikin wilson gonder ryder hahn navarro akey bertranpetit reich mailund schierup hvilsom andr´es wall bustamante hammer eichler marques-bonet. great genetic diversity population history. nature reich green kircher krause patterson durand viola briggs stenzel johnson maricic good marquesbonet alkan mallick meyer eichler stoneking richards talamo shunkov derevianko j.-j. hublin kelso slatkin pbo. genetic history archaic hominin group denisova cave siberia. nature prove inequality essential understand calculated. figure also shows among seeds considered left-extension therefore represented denotes left extension sign denotes concatenation strings. similarly represented right-extension also written right m-bp extension token also freq denotes frequency seed freq freq freq section presents seed frequency distributions runtime regard different seed lengths. results obtained naively selecting different ﬁxed-length seeds consecutively process mapping reads real read genome project. figure figure page show seed frequency distributions ﬁxed-length seeds -bp. ﬁgures three observations average seed frequencies longer seeds smaller beyond seed frequency frequent seeds frequently selected runtime compared figure average frequencies selected seeds much larger average frequencies seeds equal length seed database. lemma substrings iteration substring must include other. among substrings minimum seed frequency outer substring must greater minimum seed frequency inner substring. prove second part lemma using contradiction. assume outer substring greater optimal frequency inner substring. inner substring included outer substring optimal seeds inner substring also valid seeds outer substring. total frequency particular seeds smaller optimal frequency outer substring leads contradiction. lemma extending seeds different lengths position read equal numbers base-pairs seed includes shown figure frequency reduction extending outer seed must greater frequency reduction extending inner seed lemma proven monotonic non-increasing property seed frequency regard greater seed length. example figure seeds taken read including position read. simultaneously extend longer read respectively. corollary extending substrings different lengths ends position read equal number seeds substring includes other frequency reduction optimal seed extending longer substring strictly greater frequency reduction optimal seed extending shorter substring. total three possible cases optimal seed selected selected region selected region optimal seed overlaps selected region seed overlaps prove corollary correct case. since optimal seed overlap optimal seed must same. therefore extending provides frequency reduction optimal seed. lemma suggests optimal seed frequency must greater optimal seed frequency result corollary holds case. starts position ends position assume seed starts ends ends shown figure also assume seed starts starts ends lemma know reduction seed frequency extending greater seed frequency reduction extending also know optimal seed frequency greater seed frequency optimal seed frequency greater seed frequency result frequency reduction optimal seed extending strictly greater frequency reduction optimal seed extending theorem substrings iteration substring includes other ﬁrst optimal divider outer substring must prior position ﬁrst optimal divider inner substring. proof. assume substrings iteration optimal seed solver including also assume ﬁrst optimal divider closer beginning read ﬁrst optimal divider shown figure suppose apply divisions substrings renders four divisions figure shows. prove strictly less frequent solution t-d. since ﬁrst optimal divider minimum frequency dividing must greater dividing freq denotes optimal frequency dividing substring position based assumptions lemma following based corollary know frequency reduction extending strictly greater frequency reduction extending t-d. figure observe second parts extended respectively. produces longer second part based corollary lemma frequency reduction extending less frequency reduction extending t-d. given algorithm backtracking input ﬁnal optimal divider read output array optimal dividers read array global data structure data array data pseudocode push last divider array.push; prev div; iter pseudo code backtracking process provided algorithm idea behind backtracking algorithm simple element column data stores optimal divider substring suggests optimally selecting seeds seed obtain least frequent seeds learn substring provides optimal seeds. similarly repeating process element data learn position length optimal seeds. repeat process learnt optimal dividers read.", "year": "2015"}