{"title": "Graphical Models for Bandit Problems", "tag": ["cs.LG", "cs.AI", "stat.ML"], "abstract": "We introduce a rich class of graphical models for multi-armed bandit problems that permit both the state or context space and the action space to be very large, yet succinctly specify the payoffs for any context-action pair. Our main result is an algorithm for such models whose regret is bounded by the number of parameters and whose running time depends only on the treewidth of the graph substructure induced by the action space.", "text": "introduce rich class graphical models multi-armed bandit problems permit state context space action space large succinctly specify payoﬀs context-action pair. main result algorithm models whose regret bounded number parameters whose running time depends treewidth graph substructure induced action space. introduce rich class graphical models multiarmed bandit problems permit state context space action space large succinctly specify payoﬀs context-action pair. models many context state variables whose values chosen exogenously nature well many action variables whose values must chosen algorithm. context action variables assigned values overall payoﬀ observed. thus setting context variables yields distinct related bandit problem number actions scales exponentially. settings number contexts actions large becoming common applied settings sponsored search number possible user queries eﬀectively unbounded many frequent queries number possible show also large. similarly many problems quantitative trading number ways might break trade multiple exchanges large might also depend many conditioning variables market volatility recent lines research considered large parameterized context spaces large parameterized action consider setting algorithm knows coarse underlying graphical dependency structure model actual parameters. main result no-regret algorithm solving graphical problems computationally eﬃcient wide class natural graphical structures. no-regret mean total regret algorithm bounded number parameters model thus generally greatly sublinear number contexts actions. interestingly running time algorithm depends properties substructure graphical model induced action variables dependencies context variables context action variables arbitrarily complex. treewidth action subgraph constant algorithm runs polynomial time. algorithm combines distributed dynamic programming main challenge face compared standard computations lack payoﬀ entire model instantiated fact models admit linearization certain natural vector space coeﬃcients permits application recent knows knows algorithms noisy linear regression. high level context chosen nature either algorithm succeeds choosing reward-maximizing action eﬀectively discovers another basis vector lowdimensional linear system determined graphical model regret algorithm depends rank underlying vector space always bounded number parameters smaller. feature algorithm distributional assumptions needed sequence contexts chosen arbitrary. however case many authors studied bandit problems number states contexts allowed large number actions size function class expected payoﬀ function belongs assumed small contrast results consider expected payoﬀ function classes inﬁnite well context action spaces assumed large thus call sublinear complexity. unknown weight vector. computational complexity existing algorithms nevertheless linear number actions furthermore rather speciﬁed explicitly linear space parameterizations given underlying graphical locality structure model. recent work metric space contextual bandits assumes action context spaces inﬁnite expected payoﬀ function comes large function class namely lipschitz continuous functions. regret bounds given complex multivariate distribution assumed factorize product several potential functions depend subset variables. next elaborate graph-theoretic aspects model. rest paper structural properties expected payoﬀ function bound regret running time graphical bandit algorithm. particular results depend properties interaction graph expected payoﬀ function graph variables edges deﬁned follows pair variables edge exists deﬁned assumption words join edge potential function depends jointly variables action subgraph subgraph containing action variables edges ical model distribution whose independence structure represents. absence edge between variables graphical model indicates variables probabilistically independent distribution absence edge variables interaction graph indicates variables separable expected payoﬀ function. sparse graphical model leads computationally tractable inference algorithms shortly sparse interaction graphs lead computationally tractable no-regret algorithms graphical bandit problem. illustrate role interaction graph plays approach consider simple contextual bandit problem models restricted version sponsored search. important categories search queries sponsored search related shopping consider task serving response search queries users interested purchasing airline tickets. query speciﬁes values context variables origin city xorigin destination city xdest. speciﬁes values four action variables origin city yorigin destination city ydest cost ﬂight ycost brand accompanying hotel promotion yhotel unknown expected payoﬀ function speciﬁes clickthrough rate query/ad pair. without further assumptions depend variables jointly thus interaction graph fullyconnected graph vertices. however leverage knowledge domain decompose expected payoﬀ function thus simplify interaction graph. query/ad pair assume cities query aﬀect clickthrough rate similarity lack thereof cities contained also assume eﬀect advertised hotel clickthrough rate independent origin city since presumably hotel located destination. figure interaction graph simple sponsored search example described section context variables related query denoted circles. action variables related denoted squares. graph figure simpler fullyconnected graph least quantiﬁable ways smaller maximum degree treewidth subgraph action variables smaller. regret running time contextual bandit algorithm present sections bounded terms properties interaction graph. stress values potential functions speciﬁed learned online algorithm. example algorithm might learn instance ‘jfk’ good substitute ‘new york’ users traveling vegas likely click also oﬀer rooms luxury hotels. also note independencies encoded expected payoﬀ decomposition preserved forming interaction graph. example above interaction graph would identical even potential functions merged single potential function. kind situation algorithm implicitly uses expected payoﬀ decomposition potential function corresponds maximal clique interaction graph. certain probabilistic graphical models markov random ﬁelds share similar property. present details graphical bandit algorithm next three sections give highlevel overview section. approach divide graphical bandit problem subproblems essentially dealing exploitation exploration compose section describe bestact algorithm which given joint context computes ǫ-optimal joint action bestact algorithm assumes access ǫ-good approximation expected payoﬀ computing given joint context bestact algorithm makes many calls oracle note bestact cannot simply issue queries nature instead since ﬁxing joint context several rounds. running time bestact polynomially bounded treewidth action subgraph constant. bestact related existing dynamic programming algorithms ﬁnding maximum posteriori assignment graphical model unlike setting must overcome additional challenge receiving global payoﬀs direct local observations information. section describe payest algorithm implements oracle required bestact. high probability whenever payest receives complete joint assignment either outputs value dimension certain linear subspace. again note payest cannot simple repeatedly playing complete joint assignment averaging observed payoﬀs since algorithm specify joint action round ﬁxing joint context section bestact payest together form graphicalbandits algorithm graphical bandit problems round runs bestact current context uses payest implement oracle required bestact. main diﬃculty integrating algorithms sometimes payest outputs instead value oracle however whenever happens bestact provide feedback causes payest make measurable exploration progress improving ability provide accurate payoﬀ estimates subsequent rounds. dynamic programming applied action subgraph similar standard dynamic programming algorithms viterbi algorithm computing assignment graphical model. setting challenging however. access individual potential functions global expected payoﬀ function furthermore control context argument illustrate diﬃculties suppose action subgraph tree wish standard dynamic programming algorithm which ﬁxing assignment variable’s parent attempts best assignment subtree rooted variable joint context algorithm would require several queries however ﬁrst observation received next context guaranteed same algorithm suﬀers regret round. furthermore previously remarked observation give values individual potentials thus compare joint assignments subtree algorithm sketched must careful assignment variables outside subtree question. becomes even delicate tree. ease exposition give detailed algorithm analysis case acyclic although related algorithm applied arbitrary graph. state results arbitrary graphs without proofs section. selected arbitrarily. argue values computed using function good values respect true expected payoﬀ function theorem action variable assignments tree. given access oracle bestact algorithm computes |a|ǫ-optimal joint action joint context time. proof. arbitrary variable given computed time deﬁnition. thus computing done time. notice acyclic forest handled running tree algorithm connected component. suppose action subgraph arbitrary admits tree decomposition subset maxs∈a treewidth theorem tree decomposition action subgraph treewidth given access oracle bestact algorithm generalized compute |a|ǫ-optimal joint action joint context time. proof idea. approach used tree generalized tree decomposition arbitrary action subgraph. development similar recursive argument given section details omitted space constraints. note order generalized version bestact computationally eﬃcient natural nontrivial restrictions action subgraph required shown restrictions inevitable. example energy ising model statistical physics phrased binary potential functions. however even behavior potential function known contexts still np-hard select action maximizing energy function section present payest algorithm implements ǫ-good oracle required bestact algorithm described section presenting payest give section precise deﬁnition problem designed solve. section give simple solution special case observed payoﬀs deterministic suﬃces convey main ideas approach. solution general problem given section instance knows knows algorithm review details bestact algorithm uses oracle. several time steps bestact speciﬁes complete joint assignment requests value oracle. ideally would like payest unerringly supply values bestact. however since true expected payoﬀ function unknown impossible general. instead payest designed following learning protocol time step algorithm must either output value output special symbol allowed observe independent random variable mean shall section bestact payest integrated respects protocol also bounds number illustration payoﬀ vector coeﬃcient vector consider expected payoﬀ function depends three variables decomposes potential functions. suppose ﬁrst potential adds inputs second potential multiplies them i.e. variable takes values expected payoﬀ function linear function coeﬃcient vector observed payoﬀs deterministic also since coeﬃcient vector linearly independent vectors containing vectors number observation time steps importantly upper bound terms properties interaction graph possible complete joint assignments matrix contains column equals coeﬃcient vector since linearly independent columns containing rank vectors number observation time steps rank potentially much less section give another result bounding rank terms properties interaction graph return general setting longer deterministic independent random variable expected value thanks linearized representation expected payoﬀ function described previous section kwik linear regression algorithm implement payest. time step algorithm observes feature vector φφφs exactly following outputs prediction outputs observes independent random variable expected value w·φφφs weights unknown. case predicted observed payoﬀs feature vector φφφs coeﬃcient vector unknown weight vector payoﬀ vector section compose algorithms previous sections form graphicalbandits algorithm described detail algorithm round graphicalbandits runs bestact current joint context whenever bestact asks oracle value joint action request passed payest coeﬃcient vector bestact terminated immediately joint action played round observed payoﬀ returned payest. since payest kwik linear regression algorithm feedback required order bound number times considered setting contexts chosen arbitrarily regret bound theorem depends rank. because worst-case coeﬃcient vector observed payest linearly independent previously observed coeﬃcient vectors. however note joint contexts drawn distribution worst-case sequence longer vide alternate regret bound algorithm conceding full regret rounds context chosen considering algorithm’s performance remaining rounds. gives structural properties prove statements rank therefore regret algorithm. consider expected payoﬀ function binary potential functions section argued arbitrary default assignment vertices a′}. furthermore assignment variables default assignments. also possible assignments default assignment. finally arbitrary joint assignment remaining variables. consider complete joint assignments form complete coeﬃcient vector places component corresponding potential joint assignment thus contains least linearly independent columns paper described algorithm problems unknown expected payoﬀ function obeys structural constraints encoded graph. graph bounded treewidth bounded degree algorithm tractable suffers regret. important limitation approach graphical structure expected payoﬀ function must speciﬁed advance would like extend algorithm learns structure well. likely challenging since formulations structure learning probabilistic graphical models np-hard. general approach adapt tractable approximation algorithms structure learning setting.", "year": 2012}