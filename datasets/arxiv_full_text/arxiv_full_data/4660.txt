{"title": "The Configurable SAT Solver Challenge (CSSC)", "tag": ["cs.AI", "cs.LG"], "abstract": "It is well known that different solution strategies work well for different types of instances of hard combinatorial problems. As a consequence, most solvers for the propositional satisfiability problem (SAT) expose parameters that allow them to be customized to a particular family of instances. In the international SAT competition series, these parameters are ignored: solvers are run using a single default parameter setting (supplied by the authors) for all benchmark instances in a given track. While this competition format rewards solvers with robust default settings, it does not reflect the situation faced by a practitioner who only cares about performance on one particular application and can invest some time into tuning solver parameters for this application. The new Configurable SAT Solver Competition (CSSC) compares solvers in this latter setting, scoring each solver by the performance it achieved after a fully automated configuration step. This article describes the CSSC in more detail, and reports the results obtained in its two instantiations so far, CSSC 2013 and 2014.", "text": "well known diﬀerent solution strategies work well diﬀerent types instances hard combinatorial problems. consequence solvers propositional satisﬁability problem expose parameters allow customized particular family instances. international competition series parameters ignored solvers using single default parameter setting benchmark instances given track. competition format rewards solvers robust default settings reﬂect situation faced practitioner cares performance particular application invest time tuning solver parameters application. conﬁgurable solver competition compares solvers latter setting scoring solver performance achieved fully automated conﬁguration step. article describes cssc detail reports results obtained instantiations cssc propositional satisﬁability problem prominent problems relevant theory practice test-case generation planning scheduling graph colouring community long history regularly assessing state competitions ﬁrst competition dates back year practical applications solvers typically adjusted perform well speciﬁc type instances hand software veriﬁcation instances generated particular static checker particular software system particular family bounded model checking instances support type customization solvers already expose range command line parameters whose settings substantially aﬀect parts solver. solvers typically come robust default parameter settings meant provide good all-round performance widely known adjusting parameter settings particular target instance classes yield orders-of-magnitude speedups current competitions take possibility customizing solvers account rather evaluate solver performance default parameters. unlike competition conﬁgurable solver challenge evaluates solver performance application-speciﬁc customization thereby taking account fact eﬀective algorithm conﬁguration procedures automatically customize solvers given distribution benchmark instances. speciﬁcally type instances solver automated ﬁxed-time oﬄine conﬁguration phase determines parameter settings optimized high performance then performance evaluated settings solver best performance wins. avoid potential misunderstanding note winning competition solver performance conﬁguration counts matter much performance improved conﬁguration. consequence principle even parameterless solver could cssc strong would beneﬁt conﬁguration nevertheless outperformed solvers specially conﬁgured instance families given track would still track. competition conceptually closely related cssc learning track international planning competition also features oﬄine time-limited learning phase training instances given planning domain online testing phase disjoint instances domain. main diﬀerence learning track cssc learning track every planner uses learning method learning methods thus vary entries. contrast cssc corresponding customization process part competition setup uses algorithm conﬁguration procedure submitted solver. approach evaluating solver performance conﬁguration could course transferred competition. system following ﬁrst describe criteria used design cssc next provide background automated algorithm conﬁguration methods used running competition then discuss csscs held discuss competitions turn including speciﬁc benchmarks used participating solvers results. describe main insights obtained results many cases automated algorithm conﬁguration found parameter settings performed much better solver defaults several cases yielding average speedups several orders magnitude. solvers beneﬁted automated conﬁguration others; result ranking algorithms conﬁguration often substantially diﬀerent ranking based algorithm defaults organized cssc coordination international competition presented competition slots conferences coordinated solver submission deadlines competition minimize overhead participants could submit solver competition using default parameters open parameter spaces cssc. designed cssc remain close international competition’s established format; particular used general categories industrial crafted random also random satisﬁable. furthermore used input output formats competition’s mature code verifying correctness solver outputs scoring function main setup diﬀered competition used relatively small budget minutes solver run. based choice partly fact many solvers runtime distributions rather long tails practitioners often many instances relatively short runtimes benchmark solvers application domain. also evidence competition results would remain quite similar based shorter runtimes based fewer instances therefore order achieve robust performance within ﬁxed computational budget chose many test instances relatively runtime cutoﬀs solver simulate situation faced practitioners limited computational resources limited computational budget conﬁguring solver benchmark given conﬁguration procedure days cores results therefore indicative could obtained performing conﬁguration runs weekend modern desktop machine. since conﬁguration procedures entirely automated fashion robust kind solver failure handled conditions generic wrapper script used olivier roussel’s runsolver tool limit runtime memory counted errors limit violations timeouts maximum runtime seconds. also kept track rich solver runtime data gathered conﬁguration runs made publicly available competition website. avoid bias arising choice algorithm conﬁguration method independently used three state-of-the-art methods applicable runtime optimization smac described detail section evaluated conﬁgurations resulting conﬁguration runs entire training data selected conﬁguration best training performance. executed conﬁguration test determine performance conﬁgured solver. except speciﬁcally noted otherwise performance data report article optimized conﬁguration previously unseen test instances respective benchmark set. part submission package provided solver authors conﬁguration pipeline could identify bugs solver submission also provided trivial benchmark sets pre-submission preparation part competition. chose benchmark families cssc relatively homogeneous terms origin and/or construction process instances family. typically selected benchmark families neither easy hard aimed benchmark sets least could solved within maximum runtime recent machine default conﬁguration solver would perform reasonably well competition. also aimed benchmark sets suﬃcient number instances safeguard over-tuning; practice smallest datasets used instances training testing. disclose benchmark sets used competition results announced. encouraged competition entrants also contribute benchmarks made sure substantially favor solver using contributed benchmarks. problem ﬁnding performance-optimizing algorithm parameter settings arises many computational problems. recent years community developed several dedicated systems general algorithm conﬁguration problem describe problem formally. algorithm parameters domains parameters real-valued integer-valued categorical parameters also conditional instantiation parameters; example consider parameters heuristic mechanism completely ignored unless chosen used means another categorical parameter. finally combinations parameter instantiations labelled forbidden. refer instance algorithm conﬁguration problem conﬁguration scenario method solving algorithm conﬁguration problem conﬁguration procedure order avoid confusion solver optimized problem instances solver optimized for. algorithm conﬁguration demonstrated eﬀective optimizing various solvers literature. example hutter conﬁgured algorithm spear formal veriﬁcation instances achieving -fold speedup software veriﬁcation instances generated static checker calysto .-fold speedup bounded model checking instances zarpas algorithm conﬁguration also enabled development general frameworks stochastic local search solvers automatically instantiated yield state-of-the-art performance types instances; examples frameworks satenstein captain jack applications used local-search based algorithm conﬁguration method paramils cssc wanted avoid bias could arise commitment particular algorithm conﬁguration method thus used three existing general algorithm conﬁguration methods runtime optimization paramils smac refer interested reader appendix details conﬁgurators. here mention details important setup cssc integer-valued intervals requires parameter values listed explicitly; simplicity refer transformation used satisfy requirement discretization. multiple parameter spaces available solver paramils discretized version whereas smac discretized nondiscretized versions. alternative deﬁnition considers optimization expected performance across distribution instances rather average performance across instances consider seen special case distribution uniform given training instances. also possible optimize performance metrics mean performance across instances mean performance widely used option. table overview benchmark sets used cssc tracks industrial sat+unsat crafted sat+unsat random sat+unsat stand factors thousand million respectively. multiple independent runs since randomized algorithms. given cores usual approach simply execute independent conﬁgurator runs pick conﬁguration best performance training set. hand multiple cores single machine fact requires eﬀectively. therefore given available cores conﬁguration approach used independent runs paramils smac using cores gga. ﬁrst cssc held featured three tracks mirroring competition industrial sat+unsat crafted sat+unsat random sat+unsat table lists benchmark families used tracks described detail appendix within track used number test instances benchmark family thereby weighting equally analysis. table summarizes solvers participated cssc along information conﬁguration spaces. eleven submitted solvers ranged complete solvers based conﬂict-directed clause learning stochastic local search solvers. degree parameterization table overview solvers conﬁgurable solver challenge parameters various types ‘cond’ identiﬁes many parameters conditional. also list sizes conﬁguration spaces provided solver developers solvers ordered total number parameters expose varied substantially across submitted solvers parameters. brieﬂy discuss main features solvers’ parameter conﬁguration spaces ordering solvers number parameters. gnovelty+gca gnovelty+gcwa closely related solvers. numerical parameters probability selecting false clauses randomly probability smoothing clause weights. parameters prediscretized solver developer values yielding possible combinations. gnovelty+pcl solver parameters binary parameter four numerical parameters length stagnation path size time window storing stagnation paths probability smoothing stagnation weights probability smoothing clause weights. numerical parameters pre-discretized values solver developer yielding possible combinations. simpsat cdcl solver based cryptominisat adds additional strategies explicitly handling constraints numerical parameters govern constraint strategies frequency random decisions. parameters pre-discretized solver developer yielding possible combinations. satj full-featured library solvers boolean satisﬁability optimization problems. contest applied default cdcl solver exposed parameters four categorical parameters deciding diﬀerent restart strategies phase selection strategies simpliﬁcations cleaning; numerical parameters pre-discretized developer. solver cdcl solver parameters three categorical parameters concerning sorting heuristics used bounded variable eliminiation deﬁnitions adding blocked clauses; nine numerical parameters concerning various frequencies factors limits. parameters pre-discretized solver developer. forl-nodrup cdcl solver parameters. notably control variable selection boolean propagation restarts learned clause removal. third parameters numerical parameters pre-discretized solver developer. clasp-.. solver general answer programming problem also solve maxsat problems. solver clasp-.. cdcl solver parameters pre-processing variable selection heuristic restart policy deletion policy variety uses. conﬁguration space highly conditional several top-level parameters enabling disabling certain strategies. clasp-.. exposes mixed continuous/discrete parameter conﬁguration space manually-discretized one. rissg cdcl solver parameters. include numerical parameters minisat numerical parameters glucose mostly numerical rissg parameters parameters controlling preprocessing/inprocessing performed integrated coprocessor inprocessor parameters resemble lingeling emphasizing blocked clause elimination bounded variable addition probing parameters boolean others numerical parameters prediscretized solver developer. parameter space highly conditional inprocessor parameters dependent switch turning alongside various dependencies. indeed unconditional parameters. finally also seven forbidden parameter combinations ascertain various switches turned inprocessing used. rissgext experimental extension rissg. exposes parameters previously discussed rissg along additional rissg parameters inprocessing parameters. developer implemented extensions week time extensive testing cssc; therefore submitted rissgext closed source making ineligible medals. discuss results closed-source solver separately details solution process including probing look-ahead blocked clause elimination bounded variable elimination glue clauses host mechanisms parameterized parameters each. lingeling exposes full parameter space discretized version parameters subspace categorical parameters executed competition partition compute canada westgrid cluster orcinus. node cluster provisioned memory -core intel xeon cpus cache each enterprise linux server ﬁrst edition cssc unfortunately unable gga. requires multiple cores eﬀective runtime minimization respective multiple-core jobs submitted orcinus cluster stuck queue months without getting started. thus limited using paramils discretized parameter space solvers smac parameter spaces solver authors submitted nine benchmark families gave rise conﬁguration scenarios paramils smac total conﬁguration scenarios. since budget conﬁguration procedure days cores competition’s conﬁguration phase required total days thanks special allocation orcinus cluster able complete phase within week. following standard practice evaluated conﬁgurations resulting conﬁguration runs entire training data selected conﬁguration best training performance. executed conﬁguration test assess performance conﬁgured solver. evaluation phase required much less time conﬁguration phase. three tracks cssc conﬁgured eleven submitted solvers benchmark families within track aggregated results across respective test instances. show winners table discuss results track following sections. additional details tables ﬁgures provided accompanying technical report remind reader cssc score depends well conﬁgured solver diﬀerence default conﬁgured performance. nevertheless still cover default performance prominently following results order emphasize impact conﬁguration diﬀerence cssc standard solver competitions figure visualizes results conﬁguration process winning solver lingeling four benchmark sets. demonstrates even lingeling highly competitive solver terms default performance conﬁgured improved performance wide range benchmarks. note easy benchmark conﬁguration sped lingeling factor harder circuit fuzz instances nearly halved number timeouts improvements smaller traditional hardware veriﬁcation instances similar used determine lingeling’s default parameter settings. table summarizes results solvers eligible medals. table note that like lingeling many solvers beneﬁted conﬁguration. indeed solvers beneﬁted much conﬁguration instances largely default performance worse benchmark. hand rissg featured stronger default performance lingeling beneﬁt much conﬁguration. table also aggregates results across four benchmark families yield overall results industrial sat+unsat track. results show many solvers beneﬁted substantially conﬁguration beneﬁted others causing cssc ranking diﬀer substantially ranking according default solver performance; instance based table results cssc competition track industrial sat+unsat. solver benchmark show number test timeouts achieved default conﬁgured parameter setting bold-facing better one; broke ties solver’s average runtime aggregated results across benchmarks compute ﬁnal ranking. table results cssc competition track crafted sat+unsat. solver benchmark show number test timeouts achieved default conﬁgured parameter setting bold-facing better one. aggregated results across benchmarks compute ﬁnal ranking. figure visualizes improvements algorithm conﬁguration yielded best-performing solver clasp-..-p benchmarks. improvements particularly large instances algorithm conﬁguration decreased number timeouts table summarizes results obtained solvers benchmarks showing conﬁguration also substantially improved performance many solvers. table also aggregates results across benchmark families yield overall results crafted sat+unsat track. forl-nodrup showed best default performance beneﬁted substantially conﬁguration clasp-..-p improved even random sat+unsat track consisted three random benchmarks detailed appendix unif-k instances satisﬁable unif-k unsatisﬁable mixed. table summarizes results benchmarks. shows unif-k benchmark easy complete solvers benchmark also quite easy best solvers solvers could tackle benchmark conﬁguration making diﬀerence performance. again aggregate results demonstrate rankings substantially diﬀerent default conﬁgured versions solvers three solvers default performance ranked cssc vice versa. figure visualizes substantial speedups achieved conﬁguration winning solver clasp-..-p unif-k solver gnovelty+gca http//aclib.net/cssc/ executed competition meta cluster university freiburg whose compute nodes contained .ghz intel xeon -core cpus cache each running ubuntu bit. table results cssc competition track random sat+unsat. solver benchmark show number test timeouts achieved default conﬁgured parameter setting bold-facing better one. results aggregated across benchmarks compute ﬁnal ranking. broke ties solver’s average runtime. show runtimes brevity runtimes important ranking average runtimes solvers union unif-k table overview benchmark sets used cssc tracks industrial sat+unsat crafted sat+unsat random sat+unsat random stand factors thousand million respectively. table overview solvers cssc parameters various types ‘cond’ identiﬁes many parameters conditional. solver also list sizes original conﬁguration space submitted solver developers discretized version well categories solver participated. solvers ordered number parameters expose solvers participated cssc summarized table included cdcl hybrid solvers. solvers diﬀered substantially degree parameterization number parameters ranging dccasat+march-rw combines solver dccasat cdcl solver march-rw. submitted random sat+unsat track. parameter time ratio solver. parameter pre-discretized nine values. csccsat solver based conﬁguration checking dynamic local search methods. submitted random track. features continuous parameters pre-discretized values each giving rise total conﬁguration space possible parameter conﬁgurations. parameters control weighting dynamic local search part probabilities linear make functions used random walk steps. probsat simple solver based probability distributions built simple features make break variables probsat parameters control type parameters probability distribution well type restart. probsat submitted random track. minisat-hack-ed cdcl solver; submitted tracks. categorical parameter numerical parameters ﬁne-tuning luby geometric restart strategies well controlling clause removal treatment glue clauses. numerical parameters conditional choice luby restart strategy numerical parameters pre-discretized solver developer. also forbidden parameter combinations derived weak inequality constraint parameter values. yalsat solver; submitted tracks crafted sat+unsat random parameters parameterize solver’s restart component amongst many components. parameters numerical trivial upper bound cryptominisat cdcl solver; submitted tracks industrial sat+unsat crafted sat+unsat parameters control restarts clause removal variable branching polarity simpliﬁcation several mechanisms. numerical parameters parameterize blocking restart mechanism thus conditional mechanism selected. problem also solve maxsat problems. fundamentally similar solver submitted changes version focused solving part rather solving part. solver clasp-..-p parameters control preprocessing variable selection restart policy deletion policy miscellaneous mechanisms. conﬁguration space highly conditional several top-level parameters enabling disabling certain strategies. finally also forbidden parameter combinations prevent certain combinations deletion strategies. clasp-..-p exposes mixed continuous/discrete parameter conﬁguration space manually-discretized one. submitted tracks. riss-. cdcl solver submitted tracks except random compared version rissg almost doubled number parameters yielding parameters organized simpliﬁcation search parameters. particular added many preprocessing inprocessing techniques including handling extracting cardinality constraints roughly half simpliﬁcation parameters third search parameters categorical simpliﬁcation parameters comprise boolean switches preprocessing techniques in-processor parameters prominently including blocked clause elimination bounded variable addition equivalance elimination numerical limits probing symmetry breaking unhiding gaussian elimination covered literal elimination even stochastic local search. search parameters parameterize wide range mechanisms including variable selection clause learning removal restarts clause minimization restricted extended resolution interleaved clause strengthening. sparrowtoriss combines solver sparrow cdcl solver riss-. ﬁrst running sparrow followed riss-. submitted tracks. sparrowtoriss’s conﬁguration space riss-. plus sparrow parameters parameters controlling switch sparrow riss-. maximal number ﬂips sparrow time sparrow also contrast riss-. sparrowtoriss pre-discretize numerical parameters expresses integer continuous parameters. lingeling successor version; submitted tracks industrial sat+unsat crafted sat+unsat compared lingeling’s parameter space grew roughly third total parameters roughly parameters categorical rest integercssc used conﬁgurators paramils smac benchmark solver smac solver’s full conﬁguration space could contain arbitrary combination numerical categorical parameters. also conﬁgurators discretized version conﬁguration space yielding total conﬁguration approaches paramils discretized gga-discretized smac smac -discretized. could handle complex conditionals solvers; therefore solvers paramils smac variants. cost running third conﬁgurator nearly every conﬁguration scenario reduced budget conﬁguration approach days cores cscc days four cores cssc case paramils smac used four cores perform four independent -day conﬁgurator runs. case performed -day using four cores. evaluated conﬁgurations resulting conﬁguration runs entire training data benchmark hand selected conﬁguration best performance. executed conﬁguration benchmark’s test determine performance conﬁgured solver. four tracks cssc conﬁgured solvers submitted track three benchmark families track aggregated results across respective test instances. show winners table results cssc competition track industrial sat+unsat. solver benchmark show number test timeouts achieved default conﬁgured parameter setting bold-facing better one. aggregated results across benchmarks compute ﬁnal ranking. industrial sat+unsat track consisted three industrial benchmarks detailed appendix circuit fuzz figure visualizes results applying algorithm conﬁguration winning solver lingeling three benchmark sets. shows similar results industrial sat+unsat track cssc lingeling’s strong default performance ‘typical’ hardware veriﬁcation benchmarks could improved slightly conﬁguration much larger improvements possible less standard benchmarks circuit fuzz table summarizes results solvers participated industrial sat+unsat track. results demonstrate that contrast lingeling several solvers beneﬁted largely conﬁguration benchmark reach lingeling’s performance even conﬁguration. minisat-hack-ed performed even better lingeling default parameters beneﬁt conﬁguration much lingeling crafted sat+unsat track consisted three crafted benchmarks detailed appendix graph isomorphism autocorrelation binary sequence n-rooks. figure visualizes improvements conﬁguration yielded benchmarks best-performing solver clasp-..-p eﬀect conﬁguration particularly large n-rooks instances reduced number timeouts similar results cssc conﬁguration also substantially improved performance instances decreasing number timeouts contrast unusual eﬀect occurred clasp-..-p labs instances number timeouts test increased conﬁguration; study reasons detail section table summarizes results solvers crafted sat+unsat track showing performance many solvers also substantially improved benchmarks n-rooks mildly labs benchmark. aggregate results across benchmark families show lingeling best default performance beneﬁted mildly conﬁguration whereas clasp-..-p beneﬁted much conﬁguration thus outperformed lingeling after conﬁguration again note winning solver showed mediocre performance based default clasp-..-p would ranked comparison based default performance. random sat+unsat track consisted three random benchmarks detailed appendix unif-k instances unif-k unsatisﬁable sets contain satisﬁable unsatisﬁable instances. figure visualizes improvements achieved conﬁguration benchmarks best-performing solver clasp-..-p clasp-..-p beneﬁted conﬁguration benchmark reduced number timeouts benchmarks could already solve instances default parameter conﬁguration conﬁguration helped reduce average runtime factors respectively. table summarizes results solvers benchmarks. note solver dccasat+march-rw showed best default performance conﬁguration also solved instances three benchmark sets ranking behind clasp-..-p latter solved instances faster. random track consisted three benchmarks detailed appendix satk sat. figure visualizes improvements conﬁguration achieved benchmarks best-performing solver probsat probsat beneﬁted conﬁguration benchmark default solve single instance maximum runtime seconds conﬁgured version solved instances average runtime seconds since timeouts yield par- score par- speedup factor benchmark largest observed cssc. scenarios conﬁguration also beneﬁcial reducing probsat number timeouts respectively. table summarizes results solvers benchmarks showing table results cssc competition track random sat+unsat. solver benchmark show number test timeouts achieved default conﬁgured parameter settings boldfacing better one; broke ties solver’s average runtime aggregated results across benchmarks compute ﬁnal ranking. next probsat sparrowtoriss beneﬁted conﬁguration. neither cdcl solvers solved single instance three benchmarks solvers yalsat csccsat defaults already well tuned benchmark sets. indeed observed overtuning training sets case each yalsat satk csccsat sat. overall conﬁgurability probsat sparrowtoriss allowed place ﬁrst second respectively despite poor default performance table results cssc competition track random sat. solver benchmark show number test timeouts achieved default conﬁgured parameter settings bold-facing better one; broke ties solver’s average runtime aggregated results across benchmarks compute ﬁnal ranking. previous sections focussed results respective competitions discuss several analyses performed afterwards study overarching phenomena general patterns. however algorithm conﬁguration necessarily work cases. example crafted sat+unsat track cssc encountered case conﬁgured solver performed somewhat worse default solver clasp conﬁgured benchmark family labs timed test instances whereas default timed test instances obvious causes suggest case failure worse-than-default performance training possible since conﬁgurators base decisions subset training instances; subset increases time reaches full training conﬁguration process given enough time. cssc). analysis sampled clasp conﬁgurations uniformly random evaluated par- training test scores benchmarks; figure shows result. ﬁrst observation make directly based ﬁgure n-rooks random conﬁgurations outperform default whereas labs none default simply good start labs thus much harder beat. second since several conﬁgurations good n-rooks conﬁgurators make progress much faster indeed cssc conﬁgurators managed perform times clasp runs time n-rooks labs explains conﬁgurators require time improve training performance labs third assess potential overtuning studied training test performance correlate. visually figure shows strong overall correlation par- training test scores benchmarks; spearman correlation coeﬃcients indeed high however sampled conﬁgurations correlation much stronger n-rooks labs explains improvements labs training necessarily translate improvements test set. solvers consistently beneﬁted conﬁguration others. here quantify conﬁgurability solver given benchmark par- speedup factor conﬁgured version achieved default version computed instances solved least two. examine relationship conﬁgurability number parameters determine whether solvers many parameters consistently beneﬁted less conﬁguration solvers parameters. figure shows conﬁgurability indeed high solvers many parameters increase monotonically number parameters solvers parameters surprisingly conﬁgurable. example conﬁguration sped single-parameter solver dccasat+march-rw least factor four three benchmarks conﬁgured -parameter solver csccsat improved conﬁguration. furthermore probsat achieved best single-benchmark performance improvement parameters. course simple construct examples solver single parameter highly conﬁgurable solver many parameters beneﬁt conﬁguration focus analysis therefore relationship conﬁgurability number parameters solver author reasonably expected would useful expose. figure number solver parameters par- speedup factor conﬁgured default solver. speedup factor solver considers instances solved least default solver conﬁgured solver. symbol denotes benchmark solver figure appendix shows ﬁgure based par- comparison. runtime budget allow conﬁgure solver obvious impact results. extreme case budget towards zero conﬁguration pipeline returns solver defaults small non-zero budgets expect solvers parameters beneﬁt conﬁguration more since conﬁguration spaces easier search. hand increase time budget solvers larger parameter spaces likely beneﬁt smaller parameter spaces figure illustrates phenomenon solvers random sat+unsat track cssc competition’s conﬁguration budget days across cores clasp-..-p performed better dccasat+march-rw extreme case time budget conﬁguration dccasat+march-rw would clasp-..-p since default version performed much better fact figure shows required conﬁguration budget least seconds improving clasp-..-p parameters benchmark conﬁguration dccasat+march-rw single parameter long converged seconds conﬁguration clasp-..-p parameters continued improve performance conﬁguration budget particular benchmark performance would likely continued improve budget larger. thus conclude solver’s ﬂexibility chosen relation available budget conﬁguration solvers parameters often improved quickly highly ﬂexible solving frameworks given enough computational resources powerful conﬁgurators latter ones typically oﬀer greater performance potential. next overall time budget allowed conﬁguration another important time limit cutoﬀ time allowed single solver run; limited overall budget chose quite seconds solver runs conﬁguration process ﬁnal evaluation solvers previously unseen test instances. here study using larger cutoﬀ time evaluation time aﬀects results mimicking situation care performance large cutoﬀ time smaller cutoﬀ time conﬁguration process make progress faster. fact several studies literature used smaller cutoﬀ time conﬁguration testing found improvements time budget around seconds often lead improvements larger cutoﬀ times. table results cssc competition track industrial sat+unsat ﬁnal solvers evaluated per-run cutoﬀ time seconds instead seconds ranking default conﬁgured algorithms attributed chance ties terms timeouts broken average runtimes minisat-hack-ed riss-. sparrowtoriss cryptominisat obtained evaluation cutoﬀ time diﬀerences. expected given larger cutoﬀ time solvers solved substantially instances nevertheless cutoﬀ time seconds solvers conﬁgured variant still performed better default version making conﬁdent conﬁguration substantially overtune achieve good performance easy instances only. cssc addressed performance solvers rather performance conﬁgurators asked whether complex conﬁguration pipeline necessary whether single conﬁgurator would produced similar identical results. indeed counting choice discretized non-discretized parameter space pipeline used conﬁguration approaches thus approaches yielded results itself could reduced overall conﬁguration budget ﬁve-fold. determine whether case evaluated solver performance would observed used conﬁguration approach isolation. conﬁguration scenario approach computed par- slowdown factor cssc result par- achieved respective approach divided par- approach best training performance conﬁguration approach achieves par- slowdown factor close means gives rise solver performance close achieved full cssc conﬁguration pipeline. solver computed geometric mean factors across scenarios conﬁgured for. table geometric mean par- slowdown factors cssc result computed across cssc scenarios respective solver submitted. note training lower bound metric test values smaller possible conﬁguration generalizes better another. entry denotes incompatible conﬁguration space table shows smac variants performed close best solvers meaning would achieved similar results used smac cssc. paramils yielded next best performance followed gga. full results found accompanying technical report despite smac strong performance believe still useful several conﬁguration approaches future csscs ensure robustness assess whether conﬁguration scenarios better suited conﬁguration approaches. also conﬁguration budget inﬂuenced algorithm would perform best competition budget days cores algorithms larger parameter spaces exhibited capacity improvement. algorithm likely applied across range specialized applications made ﬂexible parameterization mechanisms components ﬂexibility exploited automated algorithm conﬁguration. ﬁndings thus challenge traditional approach solver design tries avoid many algorithm parameters rather promote design paradigm programming optimization aims avoid premature design choices rather actively develop promising alternatives parts design enable automated customization achieve peak performance particular benchmarks interest. indeed cssc already observed trend towards evidenced introduction host parameters state-of-the-art solvers riss-. lingeling finally reason conﬁgurable solver competition appropriate insightful sat. contrary similar events would interesting context many challenging computational problems answer programming constraint programming planning. another interesting application domain automatic machine learning algorithm conﬁguration adapt ﬂexible machine learning frameworks dataset hand believe many problems similar ﬁndings reported cssc would obtained leading analogous conclusions regarding algorithm design. many thanks kevin tierney generous help running including addition features suggestion parameter settings conversion script read format. also thank solver developers proofreading description solvers parameters. computational resources competition thank compute canada german research foundation hutter lindauer thank funding research emmy noether grant hoos acknowledges funding nserc discovery grant.", "year": 2015}