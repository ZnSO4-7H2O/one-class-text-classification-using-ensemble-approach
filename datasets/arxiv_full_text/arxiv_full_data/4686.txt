{"title": "An Empirical Evaluation of Portfolios Approaches for solving CSPs", "tag": ["cs.AI", "cs.LG"], "abstract": "Recent research in areas such as SAT solving and Integer Linear Programming has shown that the performances of a single arbitrarily efficient solver can be significantly outperformed by a portfolio of possibly slower on-average solvers. We report an empirical evaluation and comparison of portfolio approaches applied to Constraint Satisfaction Problems (CSPs). We compared models developed on top of off-the-shelf machine learning algorithms with respect to approaches used in the SAT field and adapted for CSPs, considering different portfolio sizes and using as evaluation metrics the number of solved problems and the time taken to solve them. Results indicate that the best SAT approaches have top performances also in the CSP field and are slightly more competitive than simple models built on top of classification algorithms.", "text": "abstract. recent research areas solving integer linear programming shown performances single arbitrarily eﬃcient solver signiﬁcantly outperformed portfolio possibly slower on-average solvers. report empirical evaluation comparison portfolio approaches applied constraint satisfaction problems compared models developed oﬀ-theshelf machine learning algorithms respect approaches used ﬁeld adapted csps considering diﬀerent portfolio sizes using evaluation metrics number solved problems time taken solve them. results indicate best approaches performances also ﬁeld slightly competitive simple models built classiﬁcation algorithms. past decade witnessed signiﬁcant increase number constraint solving systems deployed solving constraint satisfaction problems well recognized within ﬁeld constraint programming diﬀerent solvers better solving diﬀerent problem instances even within problem class also shown areas satisﬁability testing integer linear programming best on-average solver performed portfolio possibly slower on-average solvers. selection process usually performed using machine learning techniques based feature data extracted instances need solved. thus general portfolio approach methodology exploits signiﬁcant variety performance observed diﬀerent algorithms combines portfolio create globally better solver. portfolio approaches particular extensively studied used solving ﬁeld. since historically boolean satisﬁability testing prototypical simplest np-complete problems attracted attention last years seen tremendous progress. problems seemed completely reach decade solved using algorithms better heuristics reﬁned implementation techniques. starting competition held annually evaluate performances diﬀerent solvers real case random generated handcrafted instances deﬁned standard language large number diﬀerent solvers available presence standard input language huge dataset instances supported fostered study diﬀerent solvers exploited order able solve instances faster way. hand best knowledge ﬁeld exists solver uses portfolio approach namely cphydra. solver uses rather small portfolio seems rather limited compared modern portfolio approaches. given situation work tried investigate extent portfolio approach increase performances solver could best portfolio approaches among several existing csps. portfolio approach course important quality solvers included portfolio. however previously mentioned also essential technique used selection diﬀerent solvers. hence order perform study considered versions well known solvers namely abscon bpsolver choco mistral satj diﬀerent versions gecode. using solvers implemented classes portfolio solvers building portfolios solvers ﬁrst class used relatively simple oﬀ-the-shelf machine learning classiﬁcation algorithms order deﬁne solver selectors; second class tried adapt best evolute complex approaches solving csp. third portfolio solver considered cphydra mentioned above. performed empirical evaluation comparison three diﬀerent portfolio approaches. hope results described remaining paper lead insights conﬁrmation quality approaches also empirical data supporting creation better faster solvers. worth noticing adapting portfolios techniques ﬁelds trivial instance since portfolio approaches usually exploit features extracted various instances problems good selection features responsible quality performances approach. moreover diﬀerently world ﬁeld standard language express instances fewer solvers sometimes features constraints supported. overcome limitations tried collect dataset instances extensive possible encoded xcsp xml-based language used express constraints. used dataset evaluate performances three diﬀerent portfolio approaches. remaining paper organized follows. section introduce basic notions give overview successful portfolios approaches proposed literature. section describe dataset features extracted every instance solvers used. section present experiments methodology results obtained. finally section discusses related work section contains concluding remarks. code developed conduct experiments available http//www.cs.unibo.it/~amadini/cpaior_.zip. background constraint satisfaction problem consists ﬁnite variables associated domain possible values variable could take constraints deﬁne allowed assignments values variables given goal normally solution assignment variables satisﬁes constraints problem. machine learning broad ﬁeld uses concepts computer science mathematics statistics information theory complexity theory biology cognitive science construct computer programs automatically improve experience. paper particularly interested classiﬁcation well-known problem consists identifying categories observation belongs means appropriate classiﬁers. classiﬁer therefore function maps instance characterized discrete continuous features ﬁnite number classes basis training instances whose class already known trying exploit knowledge properly classify instance. simplest models built common classiﬁers provided weka tool open source software written java implements collection algorithms data mining tasks. cphydra knowledge cphydra solver uses portfolio approach. solver uses k-nearest neighbor algorithm order compute schedule portfolio constituent solvers maximizes chances solving instance within time-out seconds. weak point cphydra scalable w.r.t. number constituent solvers. fact ﬁnding optimal schedule solvers nphard problem. nevertheless using small size portfolio cphydra able international solver competition. solver selector solver conjugates ﬁxed-time static solver schedule dynamic selection long-running component solver. exploiting fact instances extremely easy solver almost impossible solve others ﬁrst executes time short runs solvers. schedule solvers obtained solving optimization problem similar tackled cphydra computed oﬄine then time given instance solved short runs designated solver executed remaining time. solver chosen among ones able solve majority k-similar instances training dataset. solves scalability issues cphydra schedule computation done oﬄine uses techniques speed search. allowed portfolio solvers best-performing dynamic portfolio international competition satzilla satzilla solver relies runtime prediction models select solver fastest running time given problem instance. international competition satzilla three major tracks competition. recently powerful version satzilla proposed instead using regression-based runtime predictions newer version uses weighted random forest approach provided explicit cost-sensitive loss function punishing misclassiﬁcations direct proportion impact portfolio performance. last version consistently outperforms previous versions satzilla competitors challenge sequential portfolio track. isac instance-speciﬁc algorithm conﬁguration tool isac used solver selector. given highly parametrized solver instance isac optimally tune solver parameters basis given instance features. isac statically clusters every training instance g-means algorithm according normalized feature vector identiﬁes best tuning parameters instances cluster employing algorithm instance needs classiﬁed isac determines cluster nearest center instance selects precomputed parameters cluster. isac easily seen generalization algorithm selector since could used cluster instances instance encountered selects solver solved largest number instances belonging nearest cluster. section introduce three main ingredients portfolios solvers use; features extracted instances used machine learning algorithms; dataset used perform tests. solvers decided build portfolios using solvers international solver competition. able solvers competition namely abscon bpsolver choco mistral satj. moreover using speciﬁc plug-in described able also diﬀerent versions constraint solver gecode thus possibility using portfolio speciﬁc solvers able process instances deﬁned xcsp format features order train classiﬁers extrapolated features xcsp instance. extensive description features retrieved used features cphydra plus features derived variable graph variable-constraint graph xcsp instances. whilst majority features syntactical computed collecting data short runs mistral solver. among syntactical features mention number variables number constraints global constraints number constants size domains arity predicates. dynamic features instead take account number nodes explored number propagations done mistral within time limit seconds. time needed compute features often negligible. dataset tried perform experiments instances realistic large possible. hence constructed comprehensive dataset csps based instances gathered international solver competition publicly available already xcsp normalized format. moreover added dataset instances minizinc suite benchmark. instances written flatzinc ﬁrst compiled xcsp normalized following competition conventions. unfortunately since flatzinc expressive xcsp instances could successfully converted. ﬁnal benchmark built considering instances taken constraint competition instances obtained conversion minizinc instances discarding instances solved mistral ﬁrst seconds computation dynamic features. obtained dataset containing instances instances dataset version solvers collecting results computation times time limit seconds. among dataset instances could solved solver portfolio within time cap. figure indicates relative speed diﬀerent solvers showing solver number instances considered solver fastest one. seen mistral best solver since faster others instances figure following show instead marginal contributions solver many times solver able solve instances solver solve. even case mistral best solver almost order magnitude better second one. worth noticing also versions gecode give marginal contribution. data validation order evaluate compare diﬀerent portfolio approaches tested every approach using -repeated -fold cross-validation dataset randomly partitioned disjoint sets called folds. folds treated turn test considering union used intel dual-core .ghz computers ubuntu remaining folds training data. order avoid possible overﬁtting problem random generation folds repeated times thus obtaining sets instances used test portfolio approaches. every test therefore constituted approximatively instances portfolio approach single fold built taking account training instances. every instance every test computed solving strategy proposed portfolio approach simulated using time seconds checking solving strategy able solve instance time required. evaluate performances portfolio approach computed average solving time portfolio solver percentage solved instances instances test sets. worth noticing order evaluate performance simulated execution solvers considering solving times computed according description previous section. thus implicitly assumed solvers deterministic diﬀerent instance produce results time. moreover order present realistic scenario considered simulation also time taken compute instance features even though usually time short. portfolios portfolio approaches tested portfolios diﬀerent sizes. since realized solvers marginal contribution considered portfolios consisting maximum solvers. every size portfolio composition computed using local search algorithm maximized number instances solved solvers portfolio. possible ties broken minimizing average solving time instances dataset solvers portfolio. oﬀ-the-shelf approaches approaches used oﬀ-the-shelf machine learning classiﬁcation algorithms used training train classiﬁer order select best solver among portfolio. instances solved solver added label solver could predicted. every instance test simulated execution solver selected model. case predicted solver labeled solver ﬁnished unexpectedly time execution backup solver simulated remaining time. decide best backup solver exploited computational social choice theory mapping selection problem voting scenario. considered csps voters elect representative among candidates solvers. could express preferences according favorite solver simulated elections using diﬀerent positional scoring rules plurality approval borda election outcomes clearly sustained mistral backup solver since condorcet winner i.e. candidate preferred voters compared every candidate. train models used weka tool implements well known widely used classiﬁcation algorithms. particular used k-nearest neighbors algorithm decision trees based algorithms bayesian networks rule based algorithms support vector machines meta classiﬁers classiﬁcation algorithms tried diﬀerent parameters order increase accuracy. task performed following best practices available manually trying diﬀerent parameters starting default ones weka. instance support vector machine used radial basis function kernel performing grid search parameters following random forest simply manually tried diﬀerent sizes decision forests. order reproduce cphydra approach computed scheduling would produced every instance test simulated schedule. since approach scale well w.r.t. size portfolio able simulate approach small portfolios compute take account time needed compute schedule; therefore results cphydra presented paper considered upper bound real performances. simulated satzilla approach developing matlab implementation cost-sensitive classiﬁcation model described exception ties solvers comparison broken selecting solver general solves largest number instances. employed mistral backup solver case solver selected satzilla ended prematurely. simulate approach original code compute static schedule since publicly available. compute schedule solvers used instead mixed integer programming solver gurobi solve problem described however order reduce search space instead using column generation method used developers imposed additional constraint requiring every solver integer number seconds. possible obtain good enough schedule solvers fewer seconds. instance thanks code kindly provided yuri malitsky able adapt isac cluster-based techniques create solver selector using pure solver portfolio approach done problems clustered training instances mapped every resulting cluster corresponding best solver. every test instance determined closest cluster according euclidean distance used solver associated ﬁrst. also case mistral used backup solver case failures ﬁrst solver. figures show respectively performances approaches using oﬀ-the-shelf classiﬁers setting baselines performances mistral time seconds virtual best solver i.e. oracle every instance always chooses best solver. report results classiﬁers listed previous section eventually boosted meta classiﬁer whenever improved performances. since approaches similar performances distinguished easily figures report methods allow better comparison performances. ﬁgures almost approaches outperform simple mistral number instances solved average solving time. exception naive bayes approach portfolios solvers makes much errors performances became worse ones mistral. best approach random forest portfolio solvers solved instances however approaches built support vector machines meta classiﬁers similar performances able establish approach better another statistically signiﬁcant used student’s paired t-test. given portfolio approach portfolio size considered instances test sets obtained corresponding sample data binary distribution variable corresponding instance solved portfolio solver less seconds. then given diﬀerent comparing portfolio approaches ﬁxing portfolio size noticed portfolios size ranging performances random forest statistically signiﬁcant w.r.t. signiﬁcant compared approaches. conﬁrms similarity performance random forest classiﬁers seen plots. portfolio size concerned noticed every classiﬁer prediction becomes inaccurate given size thus hindering performance approach. even though larger portfolio means potentially instances could solved best performances obtained using portfolios solvers. classiﬁers drop performances quite signiﬁcant instance classiﬁer portfolio solvers solved less instances version portfolio solvers. also compared peak performances obtained varying portfolio size ﬁxed portfolio approach. turned random forest diﬀerence peak performance statically signiﬁcant w.r.t. case solvers diﬀerence case solvers solvers statically signiﬁcant cases was. results conﬁrm statistical point view intuition sometimes better chose smaller portfolio larger one. since dataset imbalanced tried apply oversampling techniques precise) boost accuracy classiﬁers. however improvements metrics used evaluate performances classiﬁers. fig. show comparison approaches satzilla isac cphydra approach used random forest solver selector. already stated computational cost computing schedule solvers cphydra report results obtained using less solvers. case possible notice best approaches used namely satzilla peak performances. able solve usually instances satzilla satzilla usually faster even though conceptually satzilla really diﬀerent surprisingly close performances. conﬁrmed also statistical point view since performances statistically signiﬁcant portfolio. satzilla instead statistically better tested approaches portfolios size greater moreover decay performances increase portfolio size less pronounced usually happens classiﬁer used solver selector. classiﬁcation based approaches peak performance reached relatively small portfolio peak performances satzilla statistically signiﬁcant w.r.t performances diﬀerent portfolios sizes. performances isac slightly worse random forest maximum reached random forest approach obtained cphydra concerned solved maximum number instances portfolio size reaching slightly better peak performance obtained random forest even though statistically signiﬁcant way. reaching maximal number solved instances cphydra performances decreasing real scenario would rather poor since computing optimal solvers schedule consume time. figure possible note cphydra differs approaches developed minimize average solving time. heuristic decide solver needs ﬁrst order minimize solving time. reason cphydra approach among considered values positive correlation. indeed pearson correlation coeﬃcient values means almost linear relationship. conversely best performing approaches correlaconsiderable performances achieved satzilla encouraged combine approaches using ﬁxed-time static solver schedule dynamic selection long-running solver made using satzilla approach. surprise performances combined approach improve individual performances satzilla. even though goal paper compare performances diﬀerent portfolio approaches would like spend also words time needed build prediction model. obviously task performed oﬄine maybe using cluster parallelize workload time needed build model signiﬁcant. however could change dynamic scenario like case system time exploits instances previously solved increase eﬃciency performances. approaches studied paper adapted dynamic scenario updating models periodically. clearly update model requires hours system figure report times needed diﬀerent approaches build prediction model fold dataset. without considering cphydra model computed every instance solving np-hard problem among tested methods employs longest time build model satzilla. even though task easily parallelizable computation portfolio solvers using machine required hour. also seen plot building time grows w.r.t. portfolio size since satzilla needs compute every pair solvers weighted random forest trees. correlation model building times portfolio sizes happens also adaboostm classiﬁer instead approaches cost building models depend portfolio size. approach concerned figure present times needed compute static schedule fold. already stated np-hard problem solution times heavily depend speciﬁc training data erratic unpredictable behavior. even though satzilla clearly winners comparison diﬀerent portfolio approaches csps could case dynamic scenarios approaches like random forest online machine learning classiﬁcation algorithms could useful. sake clarity section presented portfolio approaches used. section brieﬂy present relevant works portfolios. gebruers case-based reasoning select solution strategies csps. consider portfolio strategies apply k-nearest neighbor algorithm predict strategy speed search solutions social golfer problems. streeter instead optimization techniques produce schedule solvers executed speciﬁc order speciﬁc amounts time order maximize probability solving given instance. classiﬁcation-based algorithm selection speciﬁc studied. given instance evaluation problem objective able decide a-priori whether integer programming solver hybrid best. selection done basis instance structure determined static features derived constraint graph features extracted training instances corresponding best approach identiﬁed. resulting data passed classiﬁcation algorithm builds decision trees. alternative model-based portfolio approach presented addresses problem predicting solver performances given instance using dirichlet compound multinomial distribution create schedule solvers work implemented diﬀerent portfolio approaches solving constraint satisfaction problems approaches obtained using machine learning techniques adapting csps algorithms proposed literature mainly solving ﬁeld. evaluated compared diﬀerent approaches considering dataset consisting instances taken diﬀerent kind constraint competitions selection versions diﬀerent solvers. portfolio approaches evaluated basis number problems solved time taken solve them. experimental results show approaches last competitions namely satzilla best ones among considered paper instances solved time needed solve them. however approaches using oﬀ-the-shelf classiﬁers solver selector best performances potentially used scenarios time needed build model make predictions matters. aninteresting empirical fact that portfolio approaches considered here strong anti-correlation average solving time number solved instances. minimizing average solving time setting therefore lead solve instances vice versa. instances used evaluate portfolio approaches smaller thousands problems available community. thus results limited signiﬁcance results existing approaches. however believe made ﬁrst step towards clariﬁcation importance portfolio approaches solving csps. future work plan extend number protfolio approaches considering also dynamic schedule approach regression based approach previous version satzilla approaches based feature extraction like moreover also interested studying impact instancespeciﬁc algorithm conﬁguration tools like isac hydra ﬁeld allowing automatic tuning search solver parameters boost solver performances.", "year": 2012}