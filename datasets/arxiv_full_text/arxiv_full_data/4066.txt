{"title": "Fast Image Scanning with Deep Max-Pooling Convolutional Neural Networks", "tag": ["cs.CV", "cs.AI"], "abstract": "Deep Neural Networks now excel at image classification, detection and segmentation. When used to scan images by means of a sliding window, however, their high computational complexity can bring even the most powerful hardware to its knees. We show how dynamic programming can speedup the process by orders of magnitude, even when max-pooling layers are present.", "text": "idsia joint institute university lugano university applied sciences southern switzerland founded dalle molle foundation promoted quality life. deep neural networks excel image classiﬁcation detection segmentation. used scan images means sliding window however high computational complexity bring even powerful hardware knees. show dynamic programming speedup process orders magnitude even max-pooling layers present. deep max-pooling convolutional neural networks deep neural networks convolutional max-pooling layers. convolutional neural networks traced back neocognitron ﬁrst successfully applied relatively small tasks digit recognition image interpretation object recognition back size greatly limited computational power available hardware. since however greatly proﬁted graphics processing units simple gpu-based multilayer perceptrons establised state results mnist handwritten digit dataset made deep large ﬁrst implementation gpu-based cuda parallel computing platform yielded benchmark records multiple object detection tasks. ﬁeld deep learning neural networks exploded. multi-column improved previous results many benchmarks including handwritten digits latin letters chinese characters traﬃc signs natural images another ﬂavor greatly improved accuracy subset imagenet recently google parallelized large cluster cores image classiﬁcation returns vector class posterior probabilities provided input patch whose ﬁxed width height usually exceed hundreds pixels depends network architecture. also excel image segmentation object detection segmentation image data within square patch size used determine class central pixel. network trained patches extracted images ground truth segmentations segment unseen image trained used classify pixels. object detection within image trivially cast segmentation problem pixels close centroid object classiﬁed diﬀerently background pixels. unseen image segmented centroid detected object determined using simple image processing techniques. solving segmentation detection tasks requires apply network every patch contained image prohibitively expensive implemented naive straightforward way. consider convolutional layer immediately input layer evaluating ﬁrst patch contained input image patch convolved large number kernels compute output maps; evaluating next patch convolutions re-evaluated huge amount redundant computation. better compute convolution whole input image resulting images contain maps patch contained input image. particular case without max-pooling layers optimization trivially implemented computing convolutions ﬁrst layer entire input image computing convolutions subsequent layers resulting extended maps. approach yielded real time detection performance combined dedicated fpga even asic integrated circuits. however present much power max-pooling layers interleaved convolutional layers. max-pooling cannot handled using straightforward approach outlined obtain smaller extended contain information patches contained input image; instead patches whose upper left corner lies even coordinates original image represented. subsequent max-pooling layer would aggravate problem. contribution consists optimized forward-propagation approach avoids problems fragmenting extended maps resulting max-pooling layer fragment contains information independent fragments union fragments contains information patches input image. similar approach previously used handling single subsampling layer simple face detection. mechanism however completely general. handles arbitrary architectures mixing convolutional max-pooling layers order ensures redundant computation performed stage. followed number fully-connected layers. optimization described paper concerns convolutional max-pooling layers allows outputs layer discuss forward-propagation fully-connected layers trivial approach suﬀer redundant computations. ﬁrst recall convolutional max-pooling layers forward-propagated patch level extend approach proposed optimization operates level whole image figure illustrates approaches. square input patch represented containing input maps denote width height maps input image kernels assumed square maps obtained output intermediate layer square. denote index max-pooling layer. layer’s output square maps size obtained function wl−/k size square max-pooling kernel; architecture number maps unchanged max-pooling layer i.e. |pl| |pl−|. optimized testing images consider square input image size want compute network outputs windows completely contained within i.e. windows denote fragment layer index fl}. fragment associated denote index max-pooling layer. output consists fragments kfl− fragments size square max-pooling kernel. particular input fragment fl−} generates output fragments. consider given input fragment associated ifin containing input extended maps. oﬀsets deﬁned cartesian product k−}×{ produced. extended maps generated applying max-pooling operation corresponding extended starting left oﬀset speciﬁcally pixel coordinates output computed maximum pixels corresponding input coordinates that convolutional layers alter number fragments whereas max-pooling layer produces times number fragments given input. therefore ﬁnal number fragments generated equal product squares kernel sizes max-pooling layers; example table produces size layer using patch-based approach. consider image-based approach extended maps given fragment layer subimage cropped extended maps corresponds contents corresponding maps patch contained original image. single fragment contains data subset patches contained original image. collectively fragments given layer contain data whole patches contained original image. discuss speedup image-based approach comparison separate evaluation patches contained input image. consider example largest network used neuronal membrane segmentation image size approach theory almost three orders magnitude faster straightforward patch-based forward-propagation approach. practice simple matlab implementation yields -fold speedup highly optimized patch-based implementation. figure input electron microscopy slice corresponding segmentation output data isbi segmentation challenge approach exact method patch-based image-based approaches yield identical results.", "year": 2013}