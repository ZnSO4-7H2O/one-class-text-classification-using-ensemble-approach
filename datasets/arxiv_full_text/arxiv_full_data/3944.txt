{"title": "On the Benefits of Inoculation, an Example in Train Scheduling", "tag": ["cs.AI", "cs.NE"], "abstract": "The local reconstruction of a railway schedule following a small perturbation of the traffic, seeking minimization of the total accumulated delay, is a very difficult and tightly constrained combinatorial problem. Notoriously enough, the railway company's public image degrades proportionally to the amount of daily delays, and the same goes for its profit! This paper describes an inoculation procedure which greatly enhances an evolutionary algorithm for train re-scheduling. The procedure consists in building the initial population around a pre-computed solution based on problem-related information available beforehand. The optimization is performed by adapting times of departure and arrival, as well as allocation of tracks, for each train at each station. This is achieved by a permutation-based evolutionary algorithm that relies on a semi-greedy heuristic scheduler to gradually reconstruct the schedule by inserting trains one after another. Experimental results are presented on various instances of a large real-world case involving around 500 trains and more than 1 million constraints. In terms of competition with commercial math ematical programming tool ILOG CPLEX, it appears that within a large class of instances, excluding trivial instances as well as too difficult ones, and with very few exceptions, a clever initialization turns an encouraging failure into a clear-cut success auguring of substantial financial savings.", "text": "abstract local reconstruction railway schedule following small perturbation traﬃc seeking minimization total accumulated delay diﬃcult tightly constrained combinatorial problem. notoriously enough railway company’s public image degrades proportionally amount daily delays goes proﬁt enhances evolutionary algorithm train re-scheduling. procedure consists building initial population around pre-computed solution based problem-related information available beforehand. optimization performed adapting times departure arrival well allocation tracks train station. achieved permutationbased evolutionary algorithm relies semi-greedy heuristic scheduler gradually reconstruct schedule inserting trains another. experimental results presented various instances large real-world case involving around trains million constraints. terms competition commercial mathematical programming tool ilog cplex appears within large class instances excluding trivial instances well diﬃcult ones exceptions clever initialization turns encouraging failure clear-cut success auguring substantial ﬁnancial savings. permission make digital hard copies part work personal classroom granted without provided copies made distributed proﬁt commercial advantage copies bear notice full citation ﬁrst page. copy otherwise republish post servers redistribute lists requires prior speciﬁc permission and/or fee. gecco’ july seattle washington usa. copyright ---// ..... punctuality stands important factor consumer satisfaction plays role railway world race competitive edge. moreover delay given train results additional occupation resources hence ﬁnancial losses. problem dealt provided together real world datasets sncf french national railroad company. concerned diminution resulting delays case small perturbations traﬃc minute delay costs sncf euros precisely operational reason train delayed minutes point network involves taking within minutes right decisions space-wise time-wise neighbouring trains consequence minimal terms accumulated delays enforcing great deal operational commercial safety constraints. problem hand therefore diﬃcult combinatorial constrained optimisation problem equivalent form job-shop scheduling problem. moment problem solved real time human operators make expert knowledge common sense perform optimisation. ﬁrst scientiﬁc investigation problem sncf description solving mixed integer program commercial tool ilog cplex. obtained results satisfactory show adequacy chosen model prove computational tractability meet criteria real-time exploitation suggest weakness respect combinatorial explosion. indeed show several hours necessary fast computer reach acceptable solutions average-size instances problem. additionally computational eﬃciency seems greatly aﬀected growth instance either size complexity eventually leads intractability. second investigation source present work launched sncf’s initiative. lead problem’s formulation solving evolutionary terms based indirect approach permutation representation described below. early results reported show encouraging results single large instance evolutionary algorithm much faster cplex early search systematically converges suboptimal levels ﬁtness. work also showed evolutionary algorithm could fruitfully hybridized cplex yield eﬃcient memetic algorithm. present paper details results obtained many different instances investigates surprisingly eﬃcient non-random initialization procedure evolutionary algorithm makes outperform cplex instances. practitioners working real-world applications agree good stuﬀ happen algorithm properly relevant domain knowledge pure black-box optimization bound lead nowhere cases. many ways achieve proper domain knowledge supply among stand importance wideness coming concise informative representation designing intelligent operators perform competent recombination eﬃcient mutative exploration. another often neglected provide problem-speciﬁc knowledge modify algorithm’s initialization phase heuristically. common ways include biasing random sampling toward relevant zones seeking provide richer primordial soup good building blocks works exist speciﬁc subject improving initialization argue eﬃcient easy improve evolutionary algorithm’s eﬃciency. notable exception work surry provides overview real-world application examples in-depth discussion issues involved like premature convergence population diversity. happens possible excellent initialize well build initial population around previously known good solution. approach taking although purpose technicalities slightly diﬀer norm. instead using existing good solution actual problem building using constructive heuristics search methods actually pre-solve part problem using evolutionary algorithm. strategy indeed divide&conquer described section problem decomposed three parts easily solved beforehand results excellent starting point actual optimization phase. number teams worked particular case train scheduling. give list means exhaustive important examples. caprara oﬀered formulation problem along solving algorithm makes graph-theoretic techniques lagrangian relaxation. parkes ungar market algorithms trains represented virtual agents competitively interact allocation resources attributed eﬃcient auctionbased system. kwan propose co-evolutionary approach initial timetable generation. finally juill´e mixes permutation-based evolutionary search constraint oriented programming solve bi-objective instance train timetabling problem decision support context. following juill´e approach indirect genotype ordering trains illustrated figure railway network seen graph nodes stations switchings interconnecting edges eventually hold several tracks trains use. train ﬁxed ordered list nodes visit three degrees freedom train node times arrival departure track choice track choice actually implies three tracks chosen incoming outgoing edges inside node three decisions linked underlying physical constraints picking instance particular incoming track restricts number possible subsequent tracks inside node outgoing edge. node therefore holds list triplets indicating physically possible combinations among choice made. illustrated self-explanatory figure schedules represented using space/time diagrams. visual representation useful railway scheduling experts global glimpse complex network quickly sections gives brief enumeration constraints limiting aforementioned degrees freedom. please refer exhaustive detailed list. constraints hard constraints cannot possibly violated mostly safety reasons. constraints exactly exhaustive respect real world operational conditions gets pretty close deﬁnitely places problem outside problem category. clarity quantiﬁers omitted equations given below assuming inequalities apply obvious relevant sets. instance safety spacing constraints apply trains resource point. greek letters introduced alphabetical order represent prescribed constants spacing intervals. safety spacing. times must suﬃcient distance pair trains either enough time undertake complete emergency braking procedures. applies edges well nodes switching gates edges connected node share switching gates. gates limited capacities able example handle train time. spacing constraints appear consequence ensure proper shared physical resource. constraints responsible large part problem’s combinatorial complexity. goal optimisation procedure minimise total accumulated delay i.e. trains nodes diﬀerence actual time arrival theoretical one. note used ﬁrst step probably improved future studies. many reﬁnements indeed obviously desirable like having trains smaller importance matter less seeking well spread rather strictly minimal delay indirect approach based permutation representation. approach classical job-shop timetabling problems. mapping function generally called scheduler constructs solution iterative greedy insertion elements order dictated permutation. greedy means train placed schedule uses available resources left previously scheduled trains optimal way. underlying idea evolutionary optimisation process come permutation representing order trains allowed available resources priority according could forced wait ﬂuidiﬁcation purposes. order resulting evolutionary algorithm form basis eﬃcient response perturbation created problem. evolutionary algorithm thus evolves population permutations. permutations turned proper schedules scheduler. schedules evaluated total accumulated delay respect initial unperturbed schedules provide ﬁtness. population goes traditional evolutionary loop reaches satisfactory solution. role scheduler read permutation trains place them turn schedule respecting speciﬁed constraints. following sections explain constraints checked conﬂicts detected eliminated. route arrival departure times initialised original unperturbed value departure time previous node plus minimum time takes current node. constraint checking loop begins kind constraint turn checks violation. happens call conﬂict occurs. conﬂict solved using either method described below raised loop started again. loop naturally goes violation raised. constraint violated train scheduled conﬂict solved ways. possible moves variables forward time violation threshold overcome. move impossible removed schedule thus solving conﬂict placed scheduling stack re-inserted right done latter called kick procedure called limited number times train order avoid inﬁnite unscheduling cycles. three diﬃculties created using indirect approach. ﬁrst removing previously scheduled trains destructurates permutation ﬁnal scheduling order initially present permutation. makes optimisation process harder understand therefore enhance. second diﬃculty lies fact permutations feasible individuals them trains cannot enter schedule without violating constraints individuals strongly penalized ﬁtness disappear early evolution. finally combination indirect approach fast semi-greedy scheduler leads suboptimal solutions major problem goal excellent optimal solutions quickly. issues discussed extensively problem evolutionary algorithm optimal permutation results optimal schedule scheduler. chose direct representation permutations straightforwardly encoded using sequence integers. representations considered like edge representation random keys however edges meaningless random keys would another mapping step between genotype phenotype making even harder understand navigates search space. additionally beyond simplicity terms implementation direct representation better suited design speciﬁc intelligent operators based expert knowledge problem often success diﬃcult real-world problems. standard replacement scheme borrowed evolution strategies population parents produces children using variation operators among parents oﬀspring best individuals chosen parents next generation. smoother replacement so-called evolutionary programming tournament individual virtually encounters randomly chosen opponents scores ﬁtter them. highest scores selected become parents next generation. tournament turned essential layer-based initialization schemes allow ﬁtness random individuals survive initial competition high ﬁtness inoculated individuals. finally ordered selection means members population successively called produce children turn. allows diversity preserving selection pressure selection pressure comes replacement procedure. implemented extensive experimentation showed using simple although enhanced swap mutation best choice. among variation operators tested variant partially matched crossover uniform order crossover half-swap mutation variety enhancements inspired metaheuristics space reasons retained swap mutation detailed here. mutation simply consists swapping elements permutation means trains exchanging ranks permutation. prevent disruptive swapping takes place within restricted radius means swapped elements cannot distant permutation spots. swapping operation repeated times. drawing analogy simulated annealing trade-oﬀ exploration exploitation controlling number times swap performed mutation operation. parameter remains ﬁxed ﬁrst generations decreases according following monotonous function calibrated -uple additionally following radcliﬀe surry make choice number transpositions less deterministic narrow drawing realisation binomial mean still likely value neighbouring values possible well values impossible. interesting especially late search converged although moving completely random permutations reasonably natural ones. scheduling trains completely random order makes little sense. first obvious heuristics dictate natural orderings many subsets trains earlier trains scheduled ﬁrst chains connecting trains scheduled order important trains come ﬁrst etc. importantly theoretical schedule designed real-world scheduling experts nearly optimal beneﬁts long history optimization reﬂected relative priorities given certain pairs subsets trains example access given high-speed track. starting random population algorithm rediscover structure along come permutations correspond natural schedules situated reasonably close theoretical unperturbed schedule. correcting initially present minor violations. peculiar problem instance data studied typical real-world problems. happens theoretical schedule respect constraints speciﬁed mathematical model besides minimizing consequences perturbation gradual reconstruction algorithm must therefore detect correct small numerous inconsistencies found everywhere schedule space-wise time-wise. solving actual problem. actual real-time purpose algorithm ﬁnding permutation produces schedule provides satisfying answer local perturbation occurred respecting aforementioned constraints. idea solved beforehand depend particular incident instance solved. needs evolutionary algorithm empty perturbation means solving ﬁctitious meaningless results solution excellent respect used inoculant good starting point whenever instance needs solved. allows algorithm point directly optimize eﬃciently without being slowed diﬃculties previously found upon solved. kind initialization referred inoculation literature introduced pre-calculated solution around initial population built called inoculant noted below. next section describes various ways done. note cplex also uses constructive procedure come good intial solution situated close unperturbed schedule. unfortunately indirect approach take initial solution cannot used starting point evolutionary algorihtm know turn corresponding permutation. build initial population used evolutionary algorithm cloning perturbing inoculant many times needed. perturbation similarly mutation does achieved performing chosen number transpositions inoculant perturbed times noted below. diﬀerent initialization schemes following gradual perturbation initial population built individual perturbed increasing radius. individual number thus .princ. idea beneﬁt large variety possibilities ranging close away order quick excellence avoiding premature convergence. default. layer initialization still order beneﬁt excellence zone close diversity provided randomness radicalise previous method cutting initial population layers size uniformly perturbed radius transpositions. actually used schemes turn layers scheme goes step toward radicalisation gets intermediate layer order focus clearly sources building blocks interested inoculant initial randomness. results reported obtained problem size large complex railway network representing suburban interconnections large city. corresponds cplex terms million variables million constraints. results vary greatly respect perturbation instance considered. inﬂuential factors time perturbation occurs occurs long corresponding train delayed. therefore compare results obtained several instances representing variety diﬀerent cases. illustrative example instance medium/high diﬃculty corresponds train becertain threshold however perturbation gets strong introduces much randomness placing initially outside feasible zone reached back little less hour. figure diﬀerent perturbation values mass mutation approximately equivalent illustrates strong perturbation momentarily kicking outside feasible zone. proceed comparing various inoculation strategies described earlier mass mutation gradual perturbation layers three layers result vary across instances general trend following better alternatively better another equivalent third result conﬁrmed conﬁdence available runs wilcoxon test report results below. varying experiments seeks establish whether simulated annealing inspired decrease mutation strength described section useful opposed constant value slightly randomized using binomial law. modify algorithmic variants detailed accordingly compare results diﬀerent easy instances hard ones. exempliﬁed ﬁgure algorithmic variants usually perform better easy incidents. particular outperforms equivalent variants including easy incidents. figure shows particularly striking example better alone better hard instances however shown ﬁgure simple small perturbation radius appears best choice performs signiﬁcantly better others several cases worse rest cases. come second example performing better alone. conﬁguration observed often. overall unless knows advance kind incident occurred easy hard hard tell which best choice. diﬃcult incidents evolutionary algorithm’s target choice intuition simplicity suggest keep weapon choice. duration delay particularly important grows instance quickly easy hard. algorithm behaves diﬀerently easy hard instances. instance classiﬁed easy cplex reaches optimum almost immediately. illustrate diﬀerence compare results obtained pairs instances easy version hard obtained increasing results discussed considered sake clarity striking illustrative ones charted below. results obtained evolutionary algorithm given averaged eleven runs. dominance equivalence algorithmic variants refereed wilcoxon unsigned test conﬁdence. ram. instance independently cplex hours evolutionary algorithm generations report comparisons terms speed machine ﬁrst hours computation observed suﬃciently signiﬁcant period time. population size parents producing oﬀspring. extensive experimentation particular values also shown algorithm robust respect parameters. present experiments mutation radius limited table details gives convenient various algorithmic variants described earlier whose results compared below. column describes mutation strength either constant decreased described section case calibrating -uple given; subscript indicates binomial procedure described section init column states initial population built around previously obtained inoculant using parameters described above perturbation radius mass mutation proportions layers etc. begin studying straightforward procedure mass mutation diﬀerent perturbation strengths aﬀect eﬃciency. seen ﬁgure robust standpoint performance aﬀected lies beyond purpose work conducted industrial contract compare performances evolutionary algorithms cplex large diﬃcult problem long term objective real-time use. context initialization procedure introduce great help increases algorithm’s eﬃciency considerably. results obtained compare cplex variant algorithm. cplex hours comparison made ﬁrst time takes evolutionary algorithm make hundred generations converge seemingly global optimum. nothing much happens generations i.e. hours evolutionary algorithms whereas cplex make brutal leaps several hours absence progress. ultimately aiming real-time performance chose focus shortest possible signiﬁcant period time hours here keeping mind happens cplex next hours. easy instances begin with instances cplex seen ﬁgure ﬁnds best solution immediately almost immediately evolutionary algorithm cannot hope better perfection random initialization version outperformed. inoculation helps greatly reducing sometimes even almost suppressing illustrated ﬁgure hard instances picture entirely diﬀerent. example shown ﬁgure typical random initialization version completely outperformed cplex getting close terms ﬁtness minutes around beginning second hour. inoculated version however clearly outperforms cplex beginning reaching almost optimal values quickly similarly excellent results obtained incidents. cases considered period hours shown ﬁgure inoculated version evolutionary algorithm even able reach solutions much better quality obtained cplex period time. particular case cplex actually catches hours computation time goes slightly down. figure easy incidents algorithmic variants usually perform better mass mutation alone. particularly striking example three layers scheme simulated annealing inspired decrease mutation strength much better others. dichotomy exist easy hard instances particular variants better suited others case explanation seems nature ﬁtness landscape situated around optimum. easy instances feasible zone situated around optimum large well structured. such beneﬁt variants introduce interesting random blocks risk disruption infeasibility performs wider sampling initial zone pointed inoculant. hard instances however small feasible zones rougher landscape around optima sense small perturbations like single short-radius transposition make good permutation infeasible. argue case conservative tightly focused mass mutation scheme therefore better chances success exploratory variant. evolutionary algorithm used parallelization. done ways. ﬁrst make several runs parallel. results considered work averaged runs. inter-run variance usually quite high parallel computers would proﬁtable. parallel runs would additionally allow beneﬁt several parametrisations thus increasing chances quick convergence. ultimately problem solved real-time means within minutes almost regardless computational ressources needed. second parallelize distribute ﬁtness evaluations could therefore considered. case replacement scheme computers cluster would reduce considered hours less minutes. innovation research department lipari project. among sncf staﬀ would like personally thank louis-marie cl´eon gilles dessagne christelle l´erin laurent gely v´eronique vulpilli`eres. juill´e. combining constraints-based modeling evolutionary search real-world train timetabling application. presented march kargupta. search polynomial complexity described permutation-based evolutionary algorithm eﬃciently solves large diﬃcult real-world problem. thanks non-random initialization based inoculation good starting point obtained pre-solving part problem competition cplex cases except solution trivial found immediately cplex. mentioned earlier minute delay railway network costs everything included around euros situation illustrated ﬁgure occurs yearly potential savings brought evolutionary algorithm respect cplex reach several dozen million dollars. cplex however remains interesting reasons. first faster easy instances. second given enough time reaches better quality solution good practical guideline would therefore computers always cplex parallel. moreover work hybridizing algorithms early eﬀorts direction) would certainly fruitful.", "year": 2006}