{"title": "Asymptotic Logical Uncertainty and The Benford Test", "tag": ["cs.LG", "cs.AI", "F.4.1"], "abstract": "We give an algorithm A which assigns probabilities to logical sentences. For any simple infinite sequence of sentences whose truth-values appear indistinguishable from a biased coin that outputs \"true\" with probability p, we have that the sequence of probabilities that A assigns to these sentences converges to p.", "text": "prescribed benford’s law. generally passes generalized benford test converges correct probability similar inﬁnite sequences whose truth values appear indistinguishable independent ﬂips biased coin. give algorithm passes generalized benford test. logical uncertainty aspect problem combining probability logic statistical relational learning another statistical relational learning addresses problem representing probabilistic models logical structure including regularities repeated entities complexities uncertainty number entities. contrast logical uncertainty deals uncertainty logic. paul christiano realistic agent necessarily uncertain environment future also logically necessary consequences beliefs. bers leading digit number base occurs probability log. many mathematical sequences shown frequencies ﬁrst digits satisfy benford’s particular frequencies ﬁrst digits powers provably satisfy benford’s law. give algorithm assigns probabilities logical sentences. simple inﬁnite sequence {φsn sentences whose truthvalues appear indistinguishable biased coin outputs true probability limn→∞ simple enumeration sentences ﬁrst order logic zfc. goal logical uncertainty construct algorithm input outputs probability represents probability true notion probability refer random variables. refers degree uncertainty might logical sentences whose truth-values calculated. much work done related problem input outputs inﬁnite sequence numbers deﬁned limit sequence output input case computable easily provable disprovable work ﬁguring behave independent zfc. easy pass benford test hard-coding probability. diﬃcult pass benford test natural way. best probability assign depends fact frequency true tends toward also fact sequence truth-values contains patterns used quickly compute better probability subsequence. therefore assume sequence truth-values indistinguishable sequence produced coin outputs true probability log. formally assuming {sn|n irreducible pattern probability deﬁned next section. tailored deﬁnition irreducible pattern needs. theory algorithmic randomness oﬀer alternatives. however algorithmic randomness generally considers computable tests focuses case believe reasonable deﬁnition inspired algorithmic randomness would imply deﬁnition intuition behind formula observed frequency sequence select stray right hand side inequality needs shrink slowly enough true random process would stay within probability iterated logarithm gives formula also tight sense cannot replace formula diminishes quickly function proof. simulating input time steps done time ﬁxed constant bulk runtime comes simulating turing machines lines lines takes time enter lines times. therefore program runs time turing machines expressible bits accepts time encoding turing machines must preﬁx-free particular means turing machine encoded bits. denote rational numbers form turing machines number bits necessary encode subset natural numbers accepted time greatest number less equal every ﬁrst elements halts time proportion ﬁrst elements accepts. proof. algorithm three loops outer ranging inner ranging respectively restricted turing machines expressible bits. condition line means eﬀectively range turing machines ranges", "year": 2015}