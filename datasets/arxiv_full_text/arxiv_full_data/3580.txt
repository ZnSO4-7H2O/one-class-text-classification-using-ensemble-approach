{"title": "Generalizing, Decoding, and Optimizing Support Vector Machine  Classification", "tag": ["cs.LG", "cs.CV", "stat.ML"], "abstract": "The classification of complex data usually requires the composition of processing steps. Here, a major challenge is the selection of optimal algorithms for preprocessing and classification (including parameterizations). Nowadays, parts of the optimization process are automized but expert knowledge and manual work are still required. We present three steps to face this process and ease the optimization. Namely, we take a theoretical view on classical classifiers, provide an approach to interpret the classifier together with the preprocessing, and integrate both into one framework which enables a semiautomatic optimization of the processing chain and which interfaces numerous algorithms.", "text": "classiﬁcation complex data usually requires composition processing steps. here major challenge selection optimal algorithms preprocessing classiﬁcation nowadays parts optimization process automized expert knowledge manual work still required. present three steps face process ease optimization. namely take theoretical view classical classiﬁers provide approach interpret classiﬁer together preprocessing integrate framework enables semiautomatic optimization processing chain interfaces numerous algorithms. first summarize connections support vector machine variants introduce generalized model shows variants taken separately highly connected. general connection concepts several variants generated including unary online classiﬁers. model improves understanding relationships variants. used improve teaching facilitate choice implementation classiﬁers. often knowledge implementations classiﬁer transferred variants. furthermore connections also reveal possible problems applying variants. certain situation variants used preprocessing needs prepare data used variant. last least partially possible move help parameters variants optimization algorithm automatically choose best model. complex high dimensional data consequently complex processing chain concatenation different algorithms nearly impossible happened classiﬁcation process components original data used. second step introduce approach called backtransformation. enables visualization complete processing chain input data space thereby allows joint interpretation preprocessing classiﬁcation decode decision process. interpretation compared expert knowledge algorithm working expected generate knowledge errors processing third step meant practitioner hence technical. propose signal processing classiﬁcation environment pyspace enables systematic evaluation comparison algorithms. makes aforementioned approaches usable public. different connected models compared backtransformation applied processing chain generic implementation. furthermore open source software provides interface users developers algorithms optimize processing chain data hand including preprocessing well classiﬁcation. klassiﬁzierung komplexer daten erfordert gew¨ohnlich kombination verarbeitungsschritten. hierbei auswahl optimaler algorithmen vorverarbeitung klassiﬁkation eine große herausforderung. teile dieses optimierungsprozesses sind heutzutage schon automatisiert aber sind immer noch expertenwissen handarbeit notwendig. stellen drei m¨oglichkeiten diesen optimierungsprozess besser handhaben k¨onnen. dabei betrachten etablierte klassiﬁkatoren theoretischen seite stellen eine m¨oglichkeit verf ¨ugung klassiﬁkator zusammen vorverarbeitung interpretieren integrieren beides eine software welche semiautomatische optimierung verarbeitungsketten erm¨oglicht welche zahlreiche verarbeitungsalgorithmen verf ¨ugung stellt. ersten schritt fassen zahlreichen varianten support vector machine zusammen ¨uhren verallgemeinerndes modell welches zeigt dass diese varianten nicht sich allein stehen sondern dass sehr stark verbunden sind. hilfe betrachtung dieser verbindungen m¨oglich weitere svm-varianten generieren beispiel onlineund einklassenklassiﬁkatoren. unser model verbessert verst ¨andnis ¨uber zusammenh ¨ange zwischen varianten. kann lehre verwendet werden wahl implementierung eines klassiﬁkators vereinfachen. oftmals k¨onnen erkenntnisse implementierungen einem klassiﬁkator eine andere variante ¨ubertragen werden. desweiteren k¨onnen entdeckten verbindungen m¨ogliche probleme offenbaren wenn bestimmte varianten anwenden m¨ochte. bestimmten ¨allen sollten einige varianten nicht verwendet werden oder aber restliche verarbeitungskette ¨usste angepasst werden dieser variante verwendet werden k¨onnen. nicht zuletzt teilweise m¨oglich hilfe parametern sich zwischen verschiedenen varianten bewegen optimierungsalgorithmus k¨onnte dadurch bestimmung besten algorithmusses ¨ubernehmen. wenn komplexen hochdimensionalen daten arbeitet verwendet auch komplexe verarbeitungsketten. bisher daher meist nicht m¨oglich herauszuﬁnden welche teile daten gesamten klassiﬁkationsprozess entscheidend sind. dies beheben ¨uhren unserem zweiten schritt backtransformation ein. erm¨oglicht darstellung kompletten verarbeitungskette raum eingangsdaten ¨asst damit eine gemeinsame interpretation vorverarbeitung klassiﬁkation entscheidungsprozess entschl ¨usseln anschließende interpretation kann existierendem expertenwissen abgeglichen werden herauszuﬁnden sich verwendete verarbeitung erwartungsgem verh ¨alt. kann auch neuen erkenntnissen ¨uhren oder fehler verarbeitungskette aufdecken wenn beispiel sogenannte artefakte daten verwendet werden. welche systematische auswertung vergleich verarbeitungsalgorithmen erm¨oglicht. stellt zuvor genannten ¨atze ¨offentlichkeit verf ¨ugung. verschiedenen stark verbundenen svm-varianten k¨onnen verglichen werden backtransformation kann beliebige verarbeitungsketten pyspace angewandt werden dank einer generischen implementierung. desweiteren stellt diese quelloffene software eine schnittstelle algorithmen entwickler benutzer vorverarbeitung klassiﬁkation jeweils vorliegenden daten optimieren. vorteile eigenschaften unserer drei ¨atze werden verschiedenen anwendungen gezeigt beispiel handschrifterkennung oder klassiﬁkation gehirnsignalen hilfe elektroenzephalograﬁe. first would like thank teachers school university especially rosemarie b¨ohm armin bochmann prof. thomas friedrich prof. klaus mohnke prof. bernd kummer irmgard kucharzewski. without people would never become mathematician. importantly would like thank advisor institute director prof. frank kirchner project leader elsa andrea kirchner. gave opportunity work great institute great people great project. usually project work means restricted scientiﬁc work much space ideas. case grateful much space getting machine learning creative developing ideas. elsa andrea kirchner lead interesting challenging area processing electroencephalographic data prof. frank kirchner encouraged take step back look general approaches could also help robotics think bigger scientiﬁc problems longterm perspective. also thank prof. christof ¨uskens discussing optimization perspective thesis structuring thesis thinking scientiﬁc better thinking persons perceive written text handle criticism sirko straube invested numerous teaching lessons never lost patience. much appreciate that. would like thank friends colleagues david feess anett seeland. getting basics thesis support david feess raised ﬁrst interest make support vector machine variants easier understand look sparse classiﬁer trained electroencephalographic data improve usability availability pyspace. needing someone discussion problem anett seeland always also solved programming problems for/with would like thank team leader team sustained learning hendrik metzen. together timo duchrow laid foundations pyspace. numerous discussions papers algorithms largely improved critical view research possible ﬂaws analyses gave scientiﬁc advice. hence also reviewed nearly papers helped improving them. would also like thank coauthors reviewers colleagues supported work especially lisa senger hendrik w¨ohrle johannes teiwes marc tabie foad ghaderi kyoung andrei cristian ignat elmar bergh¨ofer constantin bergatt yohannes kassahun bertold bongardt renate post-gonzales stephanie vareillas. special thanks goes external people provided tools/help thesis like open source software developers free software developers scientists numerous people internet questions provide answers programming problems without people neither pyspace thesis would exist. outlined thesis pyspace largely based open source software stack python wrapping scikit-learn algorithms interfaced. without mendeley software would lost overview references without latex numerous additional packages probably could created readable document. last least would like thank friends choir conductors good music artists. science requires people cheer things well. free one’s mind stay focused also cheering music wonderful tool accompanies lot. support vector machine related methods single iteration batch online learning relative margin c-svm rfda origin separation binary unary classiﬁcation discussion backtransformation using derivative afﬁne backtransformation generic implementation backtransformation applications backtransformation discussion dual optimization problems model connections brmm properties unary classiﬁer variants implementations positive upper boundary support vector estimation", "year": 2018}