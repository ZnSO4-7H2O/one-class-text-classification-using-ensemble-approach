{"title": "Machine Learning for Neuroimaging with Scikit-Learn", "tag": ["cs.LG", "cs.CV", "stat.ML"], "abstract": "Statistical machine learning methods are increasingly used for neuroimaging data analysis. Their main virtue is their ability to model high-dimensional datasets, e.g. multivariate analysis of activation images or resting-state time series. Supervised learning is typically used in decoding or encoding settings to relate brain images to behavioral or clinical observations, while unsupervised learning can uncover hidden structures in sets of images (e.g. resting state functional MRI) or find sub-populations in large cohorts. By considering different functional neuroimaging applications, we illustrate how scikit-learn, a Python machine learning library, can be used to perform some key analysis steps. Scikit-learn contains a very large set of statistical learning algorithms, both supervised and unsupervised, and its application to neuroimaging data provides a versatile tool to study the brain.", "text": "machine learning neuroimaging scikit-learn alexandre abraham fabian pedregosa michael eickenberg philippe gervais andreas muller jean kossaiﬁ alexandre gramfort bertrand thirion ga¨el varoquaux parietal team inria saclay-ˆile-de-france saclay france neurospin gif-sur-yvette france institute computer science university bonn germany department computing imperial college london u.k. institut mines-telecom telecom paristech cnrs ltci paris france correspondence* alexandre abraham parietal team inria saclay-ˆile-de-france saclay france alexandre.abrahaminria.fr abstract statistical machine learning methods increasingly used neuroimaging data analysis. main virtue ability model high-dimensional datasets e.g. multivariate analysis activation images resting-state time series. supervised learning typically used decoding encoding settings relate brain images behavioral clinical observations unsupervised learning uncover hidden structures sets images sub-populations large cohorts. considering different functional neuroimaging applications illustrate scikit-learn python machine learning library used perform analysis steps. scikit-learn contains large statistical learning algorithms supervised unsupervised application neuroimaging data provides versatile tool study brain. keywords machine learning statistical learning neuroimaging scikit-learn python introduction interest applying statistical machine learning neuroimaging data analysis growing. neuroscientists powerful albeit complex tool statistical inference. tools developed computer scientists lack deep understanding neuroscience questions. paper aims machine learning neuroimaging demonstrating general-purpose machine-learning toolbox scikit-learn provide state-of-the-art methods neuroimaging analysis keeping code simple understandable worlds. here focus software; conceptual introduction machine learning methods fmri analysis pereira hastie provides good reference machine learning. discuss scikit-learn toolkit reference machine learning tool variety algorithms matched packages also implemented python thus dovetails nicely rich neuroimaging python ecosystem. paper explores applications statistical learning resolve common neuroimaging needs detailing corresponding code choice methods underlying assumptions. discuss prediction scores also interpretability results leads explore internal model various methods. importantly github repository paper provides complete scripts generate ﬁgures. scope paper present neuroimaging-speciﬁc library rather code patterns related scikit-learn. however nilearn library –http//nilearn.github.io– software package development seeks simplify scikit-learn neuroimaging. rather relying immature black-box library prefer unravel simple didactic examples code enable readers build analysis strategies. paper organized follows. introducing scikit-learn toolbox show prepare data apply scikit-learn routines. describe application supervised learning techniques learn links brain images stimuli. finally demonstrate unsupervised learning techniques extract useful structure images. tools scikit-learn python ecosystem basic scientific python tools neuroimager mature scientiﬁc stack python growing contender landscape neuroimaging data analysis tools nipy nipype scientiﬁc python libraries used paper numpy. provides ndarray data type python efcient n-dimensional data representation array-based numerical computation similar used matlab handles efﬁcient array persistance provides basic operations product. scientiﬁc python libraries including scikit-learn numpy arrays input output data type. scipy higher level mathematical functions operate ndarrays variety domains including linear algebra optimization signal processing. scipy linked compiled libraries ensure high performances together numpy scipy provide robust scientiﬁc environment numerical computing elementary bricks algorithms. matplotlib plotting library tightly integrated scientiﬁc python stack offers publication-quality ﬁgures different formats used generate ﬁgures paper. nibabel access data neuroimaging formats. beginning scripts. scikit-learn machine learning ecosystem scikit-learn general purpose machine learning library written python. provides efﬁcient implementations state-of-the-art algorithms accessible non-machine learning experts reusable across scientiﬁc disciplines application ﬁelds. also takes advantage python interactivity modularity supply fast easy prototyping. variety learning packages. instance python pybrain best neural networks reinforcement learning approaches models fairly black match need interpret results. beyond python weka rich machine learning framework written java however oriented toward data mining. higher level frameworks provides full pipeline apply machine learning techniques neuroimaging. pymvpa python packaging data preparation loading analysis well result visualization. performs multi-variate pattern analysis make external tools scikit-learn shogun pronto written matlab easily interface propose many machine learning algorithms. here rather full-blown neuroimaging analysis pipelines discuss lower-level patterns break neuroimaging data input scikit-learn processed indeed breadth machine learning techniques scikit-learn variety possible applications wide fully exposed high-level interface. note package like pymvpa rely scikit-learn neuroimaging data analysis implements similar patterns behind high-level interface. scikit-learn concepts scikit-learn objects algorithms accept input data form -dimensional arrays size samples features. convention makes generic domain-independent. scikit-learn objects share uniform methods depends purpose estimators models data predictors make predictions data transformers convert data representation another. estimator. estimator interface core library exposes method learning model parameters training data. supervised unsupervised learning algorithms available objects implementing interface. machine learning tasks feature selection dimensionality reduction also provided estimators. predictor. predictor estimator predict method takes input array test makes predictions sample denote input parameter test order emphasize predict generalizes data. case supervised learning estimators method typically returns predicted labels values computed estimated model. transformer. common modify ﬁlter data feeding learning algorithm estimators named transformers implement transform method. preprocessing feature selection dimensionality reduction algorithms provided transformers within library. transformation inverted method called inverse transform also exists. testing estimator setting hyperparameters needs reliable metric evaluate performance. using data training testing acceptable leads overly conﬁdent model performance phenomenon also known overﬁtting. cross-validation technique allows reliably evaluate estimator given dataset. consists iteratively ﬁtting estimator fraction data called training testing left-out unseen data called test set. several strategies exists partition data. example k-fold cross-validation consists dividing samples subsets subset used testing others subsets used train estimator. simplest widely used crossvalidation strategies. parameter commonly another strategy sometimes called monte-carlo cross-validation uses many random partitions data. given model ﬁxed value hyperparameters scores various test sets averaged give quantitative score assess good model maximizing cross-validation score offers principled hyperparameters allows choose different models. procedure known model selection. scikit-learn hyperparameters tuning conviently done gridsearchcv estimator. takes input estimator candidate hyperparameters. cross-validation scores computed hyperparameters combinations possibly parallel order best one. paper regularization coefﬁcient grid search section data preparation volumes data matrix applying statistical learning neuroimaging data standard preprocessing must applied. fmri includes motion correction slice timing correction coregistration anatomical image normalization common template like necessary. reference softwares tasks python interface tools available nipype python library discuss shaping preprocessed data format scikit-learn. machine learning settings need data matrix denote optionally target variable predict spatial resampling neuroimaging data often come nifti ﬁles -dimensional data along transformation matrix used compute voxel locations array indices world coordinates. working several subjects individual data registered common template hence common afﬁne preprocessing. afﬁne matrix express data anisotropy distance voxels depending direction. information used algorithms relying spatial structure data instance searchlight. scipy routine scipy.ndimage.affine transform used perform image resampling changing spatial resolution data. interpolation alters data used carefully. downsampling commonly used reduce size data process. typical sizes resolution scan spatial resolution increasing progress physics. afﬁne matrix encode scaling factors direction. signal cleaning complex indirect acquisition process neuroimaging data often signal-to-noise ratio. contain trends artifacts must removed ensure maximum machine learning algorithms efﬁciency. signal cleaning includes detrending removes linear trend time series voxel. useful step studying fmri data voxel study variation correlation voxels. detrending done thanks scipy normalization consists setting timeseries variance harmonization necessary frequency ﬁltering consists removing high frequency signals. low-frequency signals fmri data caused physiological mechanisms scanner drifts. filtering done thanks fourier transform butterworth ﬁlter -dimensional images -dimensional array masking neuroimaging data represented dimensions spatial dimensions dimension index time trials. scikit-learn algorithms hand accept -dimensional samples features matrices depending setting voxels time series considered features samples. example spatial independent component analysis voxels samples. reduction process d-images feature vectors comes loss spatial structure. however allows discard uninformative voxels ones outside brain. voxels carry noise scanner artifacts would reduce affect quality estimation. selected voxels form brain mask. mask often given along datasets computed software tools spm. data visualisation across examples voxels interest represented axial slice brain. transformations original matrix data required match matplotlib data format. following snippet code shows load display axial slice overlaid activation map. background anatomical scan highest voxels used synthetic activations. cosmetics disable axis plt.axis plt.show note background needed display partial maps. overlaying images done thanks numpy.ma.masked array data structure. several options exist enhance overall aspect plot. found full scripts provided paper. generally boils good knowledge matplotlib. note nipy package provides plot function tuned display activation maps decoding mental representation objects brain context neuroimaging decoding refers learning model predicts behavioral phenotypic variables brain imaging data. alternative consists predicting imaging data given external variables stimuli descriptors called encoding discussed next section. sessions. goal predict category stimulus presented subject given recorded fmri volumes. example already widely analyzed become reference example matter decoding. sake simplicity restrict example subject categories faces houses. target variable predict supervised learning problem. represents object categories a.k.a. classes machine-learning terms. settings takes discrete values learning problem known classiﬁcation opposed regression variable take continuous values age. classification feature selection linear many classiﬁcation methods available scikit-learn. example chose combine univariate feature selection support vector machines classiﬁcation strategy simple efﬁcient used neuroimaging data. applying brain mask data consist voxels features volumes samples. machine learning many features samples challenging socalled curse dimensionality. several strategies exist reduce number features. ﬁrst based prior neuroscientiﬁc knowledge. could restrict mask occipital areas visual cortex located. feature selection second data-driven approach relies univariate statistical test individual feature. variables high individual discriminative power kept. scikit-learn offers panel strategies select features. supervised learning popular feature selection method f-test. null hypothesis test feature takes value independently value predict. scikit-learn sklearn.feature_selection proposes panel feature selection strategies. choose take percentile features ﬁxed number features objects implemented transformers code uses f_classif function along selection ﬁxed number features. reduced feature linear classiﬁer sklearn.svm.svc hyperplane maximally separates samples belonging different classes. classifying sample boils determining side hyperplane lies. linear kernel separating hyperplane deﬁned input data space coefﬁcients related voxels. coefﬁcients therefore visualized image voxels high values inﬂuence prediction others feature_selection selectkbest x_reduced feature_selection.fit_transform clf.fit look discriminating weights coef clf.coef_ reverse feature selection coef feature_selection.inverse_transform searchlight searchlight popular algorithm neuroimaging community. runs predictive model spatial neighborhood voxel tests out-of-sample prediction performance proxy measure link local brain activity target behavioral variable. practice entails performing cross-validation model often voxels contained balls centered voxel interest. procedure implies solving large number svms computationally expensive. detailing efﬁcient implementation algorithm beyond scope paper. however code searchlight generate ﬁgure available github repository accompanying paper. figure maps derived different methods face versus house recognition haxby experiment left standard analysis; center weights screening voxels anova; right searchlight map. masks derived standard analysis original paper displayed blue green. results shown ﬁgure ﬁrst f-score standard analysis brain mapping also statistic used select features; second weights feature selection last searchlight map. note voxels larger weights roughly match methods located house-responsive areas deﬁned original paper. searchlight expanded blurry methods iterates ball around voxels. results match neuroscientiﬁc knowledge highlight high level regions ventral visual cortex known contain category-speciﬁc visual areas. searchlight gives score voxel used afterward classify unseen brain scans. ﬁnal example script data loading result visualization. lines needed scikit-learn classiﬁer. addition thanks scikitlearn modularity easily replaced classiﬁer example. linear models share interface replacing another linear model elasticnet logisticregression requires changing line. gaussian naive bayes non-linear classiﬁer perform well case modiﬁying display done replacing coef theta encoding brain activity decoding images previous experiment category visual stimulus inferred brain activity measured visual cortex. inferring direct link image seen subject associated fmri data. experiment miyawaki several series binary images presented subjects activity visual cortex recorded. original paper training composed random images testing composed structured images containing geometric shapes letters. here sake simplicity consider training cross-validation obtain scores unseen data. following example study relation stimuli pixels brain voxels directions reconstruction visual stimuli fmri decoding task prediction fmri data descriptors visual stimuli encoding task. decoding setting want infer binary visual stimulus presented subject recorded fmri data. stimuli binary treat problem classiﬁcation problem. implies method presented cannot extended as-is natural stimuli described gray values. original work miyawaki uses bayesian logistic regression promoting sparsity along sophisticated multi-scale strategy. indeed expect number predictive voxels limited compare used logistic regression penalized norm known promote sparsity. penalized classiﬁer compared uses square-hinge loss logistic regression uses logit function. value logistic regression logistic regression classiﬁer classiﬁer table -fold cross validation accuracy scores obtained different values parameter table reports performance different classiﬁers various values using -fold crossvalidation. ﬁrst observe setting parameter crucial performance drops inappropriate values particularly true regularized models. logistic regression yield similar performances surprising implement similar models. encoding given appropriate model stimulus e.g. provide approximately linear representation bold activation encoding approach allows quantify voxel extent variability captured model. popular evaluation method predictive score uses prediction left data quantify decrease residual norm brought ﬁtting regression function opposed ﬁtting constant. remaining variance consists potentially unmodelled reproducible signal spurious noise. miyawaki dataset observe mere black white pixel values explain large part bold variance many visual voxels. sticking notation represesents bold signal stimulus write encoding model using ridge regression estimator receptive ﬁelds given retinotopic structure early visual areas expected voxels well predicted presence black white pixel strongly localized so-called population receptive ﬁelds suggests stimulus pixels sufﬁce explain activity brain voxel posterior visual cortex. information exploited using sparse linear regression –the lasso receptive ﬁelds. lassolarscv estimator relies lars algorithm cross-validation lasso parameter. results figure gives encoding decoding results relationship given image pixel four voxels interest brain. decoding settings figures show classiﬁer’s weights brain maps methods. give roughly results weights centered nearby retinotopic areas. figures show reconstruction accuracy score using logistic regression methods give almost identical results. original work reconstruction accurate fovea. explained higher density neurons dedicated foveal representation primary visual area. encoding settings ﬁgure shows classiﬁers weights encoding interpret receptive ﬁelds. receptive ﬁelds neighboring voxels neighboring pixels expected retinotopy primary visual cortex maps visual ﬁeld topologically organized manner. encoding decoding analysis show link selected pixel brain voxels. absence ground truth seeing different methods come conclusion comes face validity. figure miyawaki results decoding encoding. relations pixel four brain voxels highlighted methods. decoding. classiﬁer weights pixel highlighted reconstruction accuracy pixel bottom encoding. receptive ﬁelds corresponding voxels highest scores neighbors. reconstruction accuracy depending pixel position stimulus. note pixels voxels highlighted decoding encoding ﬁgures encoding decoding roughly match approach highlight relationship pixel voxels. resting-state functional connectivity analysis even absence external behavioral clinical variable studying structure brain signals reveal interesting information. indeed biswal shown brain activation exhibits coherent spatial patterns rest. correlated voxel activations form functional networks consistent known task-related networks biomarkers found predictive modeling resting-state fmri would particularly useful could applied diminished subjects cannot execute speciﬁc task. dataset containing control adhd patients resting state data resting state fmri unlabeled data sense brain activity given instant time cannot related output variable. machine learning class problems known unsupervised learning. extract functional networks regions methods group together similar voxels comparing time series. neuroimaging popular method subject ﬁrst example. show obtained functionally-homogeneous regions clustering methods. independent component analysis extract networks blind source separation method. principle separate multivariate signal several components maximizing non-gaussianity. typical example cocktail party problem able separate voices several people using signal microphones located across room. reference method extract networks resting state fmri several strategies used syndicate results across several subjects. calhoun propose dimension reduction followed concatenation timeseries varoquaux dimension reduction canonical correlation analysis aggregate subject data. melodic tool suite uses concatenation approach detailed here. application data preparation steps center also detrend time series avoid capturing linear trends ica. applying resulting time series fastica algorithm scikit-learn straightforward thanks transformer concept. data matrix must transposed using spatial words direction considered random voxels time points. maps obtained capture different components signal including noise components well resting-state functional networks. produce ﬁgures extract components interested exploring main signal structures. start list subject-level data matrices first concatenate time-direction thus implementing concat-ica np.vstack sklearn.decomposition import fastica fastica components_masked ica.fit_transform.t results compare simple concat implemented code sophisticated multi-subject methods namely melodic’s concat canica–also implemented using scikit-learn although discuss code here. display default mode network well-known resting-state network. hard draw conclusions single ﬁrst sight seems canica melodic approaches less subject noise give similar results. listed module ‘sklearn.decomposition‘. good alternative dictionary learning applies regularization extracted components leads sparse compact components ones full-brain require thresholding. learning functionally homogeneous regions clustering machine learning perspective clustering method aggregates samples groups maximizing measure similarity samples within cluster. consider voxels functional brain image samples measure based functional similarity leading clusters voxels form functionally homogeneous regions simple concat-ica figure default mode network extracted using different approaches approach detailed article; middle canica implemented nilearn; right melodic’s concat-ica. data normalized display purposes. approaches several clustering approaches exists pros cons. require setting number clusters extracted. choice depends application large number clusters give ﬁne-grained description data higher ﬁdelity original signal also higher model complexity. clustering approaches make spatial information yield spatially contiguous clusters i.e. parcels. describe clustering approaches simple fast. ward clustering uses bottom-up hierarchical approach voxels progressively agglomerated together clusters. information speciﬁed connectivity graph given ward clustering estimator. graph used allow merges neighboring voxels rely sklearn.feature extraction.image.grid graph function construct graph using neighbor structure image grid optionally brain mask. k-means top-down approach seeking cluster centers evenly explain variance data. voxels assigned nearest center thus forming clusters. imposing spatial model k-means easy often advisable spatially smooth data. apply clustering algorithms common data preparation steps produce data matrix. ward clustering k-means rely second-order statistics speed algorithms reducing dimensionality preserving second-order statistics pca. note clustering algorithms group samples want group voxels. data matrix previously matrix need transpose running scikitlearn clustering estimators. scikit-learn provides wardagglomeration object feature agglomeration ward clustering case using k-means. results clustering results shown ﬁgure clustering extracts known large scale structure calcarine sulcus guaranteed delineate functionally speciﬁc brain regions. rather considered compression useful method summarizing information groups together similar voxels. note that k-means extract spatiallycontiguous clusters gives number regions much larger number clusters speciﬁed although regions small. opposite spatially-constrained ward directly creates regions. bottom-up process tends perform best large number clusters. exist many clustering techniques exposed scikit-learn. determining best process fmri time-series requires precise deﬁnition target application. ward’s clustering k-means among simplest approaches proposed scikit-learn. craddock applied spectral clustering neuroimaging data similar application available nilearn example. conclusion paper illustrated simple examples machine learning techniques applied fmri data using scikit-learn python toolkit order tackle neuroscientiﬁc problems. encoding decoding rely supervised learning link brain images stimuli. unsupervised learning extract structure functional networks brain regions resting-state data. accompanying python code machine learning tasks straightforward. difﬁculties applying proper preprocessing data choosing right model problem interpreting results. tackling difﬁculties providing scientists simple readable code requires building domainspeciﬁc library dedicated applying scikit-learn neuroimaging data. effort underway nascent project nilearn aims facilitate scikit-learn neuroimaging data. examples covered paper scratch surface applications statistical learning neuroimaging. tool stack presented shines uniquely regard opens door combination wide range machine learning methods present scikit-learn neuroimagingrelated code. instance sparse inverse covariance extract functional interaction structure fmri time-series using graph-lasso estimator. modern neuroimaging data analysis entails ﬁtting rich models limited data quantities. high-dimensional statistics problems call statistical-learning techniques. hope bridging general-purpose machine learning tool scikit-learn domain-speciﬁc data preparation code foster scientiﬁc advances. disclosure/conflict-of-interest statement authors declare research conducted absence commercial ﬁnancial relationships could construed potential conﬂict interest. funding acknowledge funding niconnect project nida subsample project digiteo institute france. gorgolewski burns madison clark halchenko waskom nipype ﬂexible lightweight extensible neuroimaging data processing framework python. front neuroinform doi./fninf... hanke halchenko sederberg hanson haxby pollmann pymvpa python toolbox multivariate pattern analysis fmri data. neuroinformatics sonnenburg r¨atsch henschel widmer behr zien shogun detre polyn moore natu singer cohen multi-voxel pattern analysis toolbox. poster presented annual meeting organization human brain mapping available http//www. csbmb. princeton. edu/mvpa o’toole jiang abdi p´enard dunlop parent theoretical statistical practical perspectives pattern-based classiﬁcation approaches analysis functional neuroimaging data. journal cognitive neuroscience miyawaki uchida yamashita sato m.-a. morito tanabe visual image reconstruction human brain activity using combination multiscale local image decoders. neuron tibshirani regression shrinkage selection lasso. j.r. statist. soc. efron hastie johnstone tibshirani least angle regression. annals statistics", "year": 2014}