{"title": "A Methodology for Learning Players' Styles from Game Records", "tag": ["cs.AI", "cs.LG"], "abstract": "We describe a preliminary investigation into learning a Chess player's style from game records. The method is based on attempting to learn features of a player's individual evaluation function using the method of temporal differences, with the aid of a conventional Chess engine architecture. Some encouraging results were obtained in learning the styles of two recent Chess world champions, and we report on our attempt to use the learnt styles to discriminate between the players from game records by trying to detect who was playing white and who was playing black. We also discuss some limitations of our approach and propose possible directions for future research. The method we have presented may also be applicable to other strategic games, and may even be generalisable to other domains where sequences of agents' actions are recorded.", "text": "describe preliminary investigation learning chess player’s style game records. method based attempting learn features player’s individual evaluation function using method temporal diﬀerences conventional chess engine architecture. encouraging results obtained learning styles recent chess world champions report attempt learnt styles discriminate players game records trying detect playing white playing black. also discuss limitations approach propose possible directions future research. method presented also applicable strategic games even generalisable domains sequences agents’ actions recorded. chess popular strategic board games players diﬀerent styles. example chess players positional tactical diﬀerence style aﬀect move choice given board position generally overall plan. problem tackle paper applying machine learning teach computer discriminate players based style. explain methodology brieﬂy review method temporal diﬀerence learning central approach. temporal diﬀerence learning machine learning technique originating seminal work samuel learning occurs minimising diﬀerences predictions actual outcomes temporal sequence observations. samuel used game checkers vehicle study feasibility computer learning experience. although program written samuel achieve master strength precursor checkers program chinook ﬁrst computer program match human world champion. detailed less technical description machine learning samuel’s checkers program.) tesauro demonstrated power technique showing temporal diﬀerence learning combined using neural network enable program learn play backgammon expert level self-play. following approach similar eﬀorts applying technique games chess othello chinese chess self-play time consuming natural make existing game records strong players train evaluation function learning game records also used game extract patterns move prediction using methods temporal diﬀerence learning. necessarily train computer competent game player rather teach play style particular player learning records games played player. important note information available learning include meta-features date game played name opening variation played result game. learning module observes sequence moves played game. looking diﬀerent perspective view problem classiﬁcation. assume train computer play styles chess players kasparov kramnik. problem reformulated follows inspecting record game played kasparov kramnik computer detect conﬁdence player playing white pieces black pieces? even higher level problem recast turing test chess computer fool human human player. sense already true strongest available computer chess programs computers already surpassed humans playing strength mainly increased computing power relying brute-force calculations. moreover seems high correlation choices made human chess grandmasters world class chess engines discuss turing test debate concentrate classiﬁcation problem within domain chess. know problem paper suggest tackling using temporal diﬀerence learning. previous uses temporal diﬀerence learning games attempt learn weights evaluation function order improve play computer program. scenario still attempt learn weights evaluation function objective imitate style given player rather improve program’s play. course player consideration strong example kasparov kramnik resulting program likely improve; method could also used learn evaluation functions weaker players. learning algorithm described section based sutton’s corresponds simplest rule updates current predictions. note general formulation proposed sutton utilises decay factor forces algorithm also take account earlier predictions. accelerate training utilise adaptive learning rate momentum term describe subsection section present proof concept attempt learn styles recent chess world champions kasparov kramnik make learnt feature weights guess game played players white black. despite encouraging results also fundamental limitations approach deﬁning player’s style. particular pointed chess grandmaster pablo segundo choice features probably low-level since strong players seek optimise placement pieces maintain combination pieces according sound tactical positional criteria. higher level tempting classify kasparov tactical player kramnik positional player. however concepts diﬃcult formulate precise manner moreover clear translate algorithmic framework. discuss issues subsection section give concluding remarks. temporal diﬀerence learning widely used tune evaluation function component computer game playing programs example evaluation function component computer game playing program maintains board features statically evaluated program. combining state-of-the-art minimax tree search game speciﬁc heuristics computer game playing programs achieved world-class level surpassing human performance backgammon othello checkers chess. noteworthy computer programs still play amateur level employing recent advances monte carlo methods appears promising approach improving performance concentrate chess assume essence player’s style described relative weighting features evaluation function. focus task tuning weights evaluation function using collection player’s game records. context chess many useful features proposed however discuss subsection choice features easy incorporated novel features relating pawn structures inﬂuence areas within board addition conventional ones. tuning evaluation function game records context improving computer’s performance wellknow approach employing context learning player’s style novel. subsection show accelerate training adapting learning rate adding momentum term. assume without loss generality learning white’s evaluation function evaluation function deﬁnes value game position weighted values game feature weights i.e. values measured units hundredth pawn weights constrained positive weight material balance feature kept constant weights relative material balance. term feature vector vector weights problem tuning evaluation function learning values weights maximise number correct predictions moves made given player. usually objective tune evaluation function game playing program order game position white move white’s probability. position white move white’s black’s next moves replayed game record probability weights time updated using gradient descent according following formula time updated weights could normalised preferred simply weight material balance feature logic underlying decision customary measure value chess position terms pawn units. example positional advantage outweigh deﬁcit material. quiet positions hidden tactics positional factors balanced value position measured material balance pieces board. practice material balance position often dominates evaluation function chess would interesting game always case. note rule temporal diﬀerence update rule since diﬀerence probability player’s opponent’s moves made probability position moves made. possibilities evaluating probability minimax move program would choose actual move made player game record program would choose diﬀerent move. case adjustments made weights would self-play assumption predictions become typical value used learning rate also consider individual adaptive learning rates weight method used similar related methods) uses multiplicative increases decreases rates. speciﬁed constants control rate increase decrease respectively; typically takes restricted learning rates minimum allowed value maximum initially minimum following subsections describe proof-of-concept experiment task learn styles recent chess world champions kasparov kramnik. resulting evaluation functions tested trying discriminate players records games them. subsection describe components underlying chess program used experiment subsection describe evaluation methodology used determine well learned evaluation functions discriminate players. subsection discuss results subsection consider limitations experiment suggest progress made. order carry experiment learn feature weights player’s evaluation function ﬁrst implemented chess playing program matlab. comparable implementation programming language like would considerably faster however chose matlab ﬁrstly convenience experimentation early stages working problem also challenge implementing chess program matlab. computations carried using windows running desktop intel pentium processor ram. tree-search module implements widely used negascout variation alpha-beta pruning minimax algorithm implementation includes quiescence search transposition table ﬁrst features were material balance pseudo-mobility piece-square value tables bishop pair knight pair preference single bishop single knight preference single knight single bishop king safety form castled non-aversion doubled pawns preference saddling opponent doubled pawns queen-side majority king-side majority relative expansion factor. next features related complexes squares deﬁned four corners surrounding rectangle complex; complex measure preference occupying complex. complexes aacc ddee ffhh aacc ddee ffhh aacc ddee ffhh. ﬁnal features isolated d-pawn c-pawn non-isolated pawn e-pawn c-pawn non-isolated pawn maroczy bind d-pawn pawn pawn semi-open c-ﬁle i.e. c-pawn non-isolated d-pawn training purposes considered moves game record order avoid early opening endgames moves normally dealt using precomputed lookup tables separate evaluation functions. computational reasons program performs minimax search depth three check extensions quiescence search taking account captures checks ﬁrst ply. concentrating kasparov’s kramnik’s evaluation functions training carried using collection kasparov’s games kramnik’s validation carried using games kasparov kramnik. standard evaluation technique using separate training validation sets employed. trained weights evaluation functions players using random selections games. testing done using entire validation games. estimated probability deﬁned evaluation function trained player measure natural context since precisely quantity temporal diﬀerence learning deﬁned attempting minimise. given game player positions considered game white move black move. assume without loss generality considering game white’s perspective whether white black. absolute error game deﬁned correctly identify white game threshold value i.e. absolute error less playing white playing white. actually black deﬁnition still valid provided consider game black’s perspective i.e. replaced emphasise white summation taken black taken thus computed perspective i.e. white’s perspective white black’s perspective black. general since computed perspective. therefore able distinguish styles speciﬁed margin. note example classiﬁer discriminate players games examined perspective examined perspective. situation obviously undesirable since attempting classify game players beneﬁt knowing advance player white black. trained tested algorithm games kasparov kramnik described subsection figure shows moving averages feature vectors training. that ﬁrst games relatively stable quite similar players. important maes diﬀer much order avoid bias testing; tests diﬀerence vectors training period average approximately i.e. less figure shows diﬀerence feature vectors players positive values indicate features weights higher kasparov’s vector negative values features higher kramnik’s vector. four features player player higher weight diﬀerence greater brieﬂy discuss these. kapsparov piece-square value tables preference saddle opponent doubled pawns complexes deﬁned squares aacc squares ffhh diﬀerence weight piece-square value tables learnt self-play games generally decided result tactical play closer kasparov’s highly dynamic style. weight diﬀerences complexes indicate kasparov’s tendency white attack black’s king normally castles king-side black attack white’s king players castle opposite wings. kramnik four features preference bishop pair relative expansion factor complexes deﬁned squares ffhh squares ffhh relative expansion factor preference central king-side related kramnik’s preference manoeuvering king-side preference white’s king-side indicate preference keeping king safe especially white. regarding pawn structure features player weight diﬀerence greater kasparov feature subsection indicate preference pawn absence pawn kramnik feature subsection indicate preference pawn absence pawn diﬀerences reﬂect preferred openings since often determine middle game pawn structure. although observations interesting clear that discussed above features using suﬃcient fully capture diﬀerent styles players. moreover weights tell full story features tend higher values others. case however apart material balance values features normally less value pawn. nevertheless context feature selection i.e. determining dominant features player’s evaluation function useful. order optimise results chose test trained feature vectors moves validation games. choice motivated fact expected diﬀerences style noticeable proper middle game positions. particular attempting capture individual opening preferences easily detected meta-level example comparing opening sequences opening book database. nevertheless choice opening reﬂect style degree pawn structures often persist endgame. pointed chess grandmaster pablo segundo choice opening always correlate style considerations choosing opening playing speciﬁc opponent figure show continuous line broken line threshold zero start move varied move ﬁxed mean mean clearly shows potential method. moreover note mean value diﬀerence perspective counting hits perspective counting hits despite moderate success could replicate result games topalov another former world champion training regime. although obtained value mean value obtained correspondingly although obtained value mean value obtained possible games enough train weights topalov’s feature vector. evidence average diﬀerences training topalov’s feature vector kasparov’s kramnik’s approximately i.e. however mentioned above average diﬀerence kasparov’s kramnik’s feature vectors less moreover topalov’s feature vector diverging rather converging training increased. failure train adequate feature vector topalov partly limitations features selected possibly also limitations approach discussed next subsection. noted introduction choice features classifying players’ styles probably low-level since strong players normally play strong moves position possible higher level abstraction player’s style would emerge substantial increase number features given suﬃcient increase computing power. example emergence positional move played deep blue kasparov rematch move unsettled kasparov rest match subsequently lost. unsure best approach capturing higher level elements playing style positional versus tactical within algorithmic framework. possible forward recognising positions tactical indicated observation tactical ability requires strong calculation. note wide range chess manuals promote improvement tactical ability puzzles readily solved powerful computer chess program. hand fewer puzzles improving positional ability exist solution often involves plan rather individual move; solution form plan readily obtainable current computer chess technology puts emphasis brute-force calculation rather form planning. another possibility design include higher level features better capture playing style leave possible direction future research. research machine learning capture style human chess players knowledge discriminate players inspecting records games played them. presented preliminary results using conventional chess engine architecture combined method temporal diﬀerence learning. yielded success described subsection although believe methodology presented sound potentially viable also uncovered fundamental issues need addressed progress made. particular would desirable capture higher level concepts tactical versus positional able classify choices players make game according degree match concepts. since methods used domain chess frequently transfer strategic board games would interesting approach games checkers conclude speculative suggestion even wider domains application example learning proﬁles agents records sequences actions.", "year": 2009}