{"title": "Learning-Based Procedural Content Generation", "tag": ["cs.AI", "cs.HC", "cs.LG", "cs.NE"], "abstract": "Procedural content generation (PCG) has recently become one of the hottest topics in computational intelligence and AI game researches. Among a variety of PCG techniques, search-based approaches overwhelmingly dominate PCG development at present. While SBPCG leads to promising results and successful applications, it poses a number of challenges ranging from representation to evaluation of the content being generated. In this paper, we present an alternative yet generic PCG framework, named learning-based procedure content generation (LBPCG), to provide potential solutions to several challenging problems in existing PCG techniques. By exploring and exploiting information gained in game development and public beta test via data-driven learning, our framework can generate robust content adaptable to end-user or target players on-line with minimal interruption to their experience. Furthermore, we develop enabling techniques to implement the various models required in our framework. For a proof of concept, we have developed a prototype based on the classic open source first-person shooter game, Quake. Simulation results suggest that our framework is promising in generating quality content.", "text": "abstract—procedural content generation recently become hottest topics computational intelligence game researches. among variety techniques searchbased approaches overwhelmingly dominate development present. sbpcg leads promising results successful applications poses number challenges ranging representation evaluation content generated. paper present alternative generic framework named learning-based procedure content generation provide potential solutions several challenging problems existing techniques. exploring exploiting information gained game development public beta test data-driven learning framework generate robust content adaptable end-user target players on-line minimal interruption experience. furthermore develop enabling techniques implement various models required framework. proof concept developed prototype based classic open source ﬁrst-person shooter game quake. simulation results suggest framework promising generating quality content. keywords—procedural content generation learning-based evaluation functions public experience modeling player categorization ﬁrst person shooter quake video games industry expanding rapidly even surpassed movie industry revenue expectations consumers gradually increased point players critics demand cutting edge graphics immersive game play strong replay value releases. generating game content costly requires many different skill sets long periods development. example generating skeletal animation single character take several months. therefore upmost importance create content timely efﬁcient manner. procedural content generation process generating content video game automatically using algorithms. wide variety content generated e.g. assets terrain textures even high level game play structures storyline characters. potential provide basis built upon developers also provide endless stream content player extend lifetime game. used properly reduce amount resources required build game thus drive costs. although often seems like good approach tricky right could actually trouble creating handcrafted content umbrella search-based procedural content generation terminology coined togelis given potential game content space sbpcg employs evolutionary metaheuristic search algorithms explore space efﬁciently content appealing players. result robust trustworthy algorithms require less manual conﬁguration traditional approaches. past years researchers used different sbpcg techniques adapt levels games platformers ﬁrst-person shooters rogue-like games racing games real-time strategy games latest work sbpcg collected special issue sbpcg leads promising results successful applications also poses number challenges pointed special case generate-and-test approach sbpcg needs address three critical issues content representation search space management content test evaluation functions. widely used technique sbpcg evolutionary computation turns effective nature encounters difﬁculties tackling problems regarding three aforementioned issues. first evolutionary algorithm deal genotypeto-phenotype mapping. although direct encodings indirect encodings often used games computational efﬁciency short clear genotype-phenotype distinction. moreover generally guaranteed representations always preserve locality property result ineffective search even entail risk catastrophic failure. next many games large content space sbpcg take long time generate quality content. thus sbpcg seems suitable off-line online content generation. finally population content needs generated evaluated guidance various ﬁtness evaluation functions. fitness functions ill-posed subjective causes difﬁculties developing accurate ﬁtness functions encoding developers’ prior knowledge players’ experiences paper propose novel framework termed learning based procedural content generation aims address main issues encountered existing techniques context commercial video game development. unlike sbpcg lbpcg gains information encoding knowledge/experience data-driven machine learning different contributors involved typical video game development life-cycle developers public beta testers minimizes interference endusers experience. relying generalization learning-based component models framework acts controller game content generation tends create ideal content arbitrary player. result lbpcg several considerable advantages including avoiding hard coded evaluative functions ﬂexibly matching content players’ types/experience adaptivity interfering players’ experience. paper main contributions summarized follows propose novel learning-based framework data-driven nature overcome weaknesses existing techniques develop enabling techniques support proposed lbpcg framework apply lbpcg classic ﬁrst-person shooter game quake proof concept leads prototype generating quality content veriﬁed simulations. rest paper organized follows. sect. reviews relevant background. sect. presents lbpcg framework. sect. describes enabling techniques support lbpcg implementation. sect. describes proof concept applying lbpcg framework quake. last section discusses issues related lbpcg framework. commercial video games development usually wellstructured incorporating many work-ﬂows design testing deployment. companies cohort personnel consisting programmers designers artists production managers testers. paper term people developers. games many iterations features added released test teams. game reached certain level maturity sometimes released public beta test besides ﬁnding reason behind games industry common developers happy game created public opinion different. garnering public opinion useful avoid disastrous event releasing expensively made game public. production tests pass game goes gold released publishers distribution end-user target players terminology. paper conﬁne class content generators create expanded content based parsimonious generic representation i.e. parameterized content description vector speciﬁes degree control content generated along uncontrollable random seed. example content generator would level generator takes multidimensional parameter vector saying many monsters weapons health ammunition doors puzzles generated level. content generator variable parameters generally deﬁne content space possible content generated generator. general content space likely large enough exhaustive exploration content before-hand infeasible. believe ultimate goal manipulate parameters content generator build best content target player’s individual tastes. attain risk catastrophic failure lack quality become main concern given fact content generator generate unplayable content content appropriate anyone’s tastes. illegitimate content extremely undesirable property unbeatable e.g. consists rooms full monsters immediately kill player matter skill level. efforts made ward problem. example studies describe methods combining off-line online models optimizing playability/winnability optimizing challenge/skill success. integrated model avoid catastrophic failure adapt generated content suit speciﬁc player online. although progress made experiment inﬁnite mario still unclear extent models different functionality purpose combined form robust composite models. next personalization content target player driven factors playability skills also player’s affective cognitive experience poses another challenge pcg. generate favored content target player player styles/types need identiﬁed correctly experience must measured accurately. obviously undesirable interfere target player’s experience asking questions much content? avoided. knowledge however existing methods need identify target player’s style/type measure experience learning feedback behavior leads burden target players. moreover existing methods often utilize pre-deﬁned player types/styles e.g. traits personalities terms psychology categorize target players explicitly might encapsulate player types lead difﬁculty infer players’ types/styles pre-deﬁned. furthermore players’ subjective feedback could quite noisy inaccurate exacerbates difﬁculties. avoid modeling target players directly possible learn generic playing style/type model beta testers feedback behavior nevertheless data collection methods often undergoes expensive laborious process collecting data members public often intuitively seems like best build realistic models enjoyment humans. recently system built order predict human behavior based game-play statistics produced pool players study concluded challenges faced work existence many outliers people behave irregular fashion collect direct feedback public questions e.g. asking whether would expected many people would difﬁcult process outliers also deliberately accidentally provide feedback match true opinions. crowd-sourcing applied deal noisy data therefore ongoing critical issue. drift time adapting content target player personalization. work creating adaptive super mario issue touched upon somewhat experiment. hand system fairly successful test switching agent content optimized half-way through. experimental protocol human players however reported players preferred dedicated system purely random system therefore apparent another open problem properly safeguarding online algorithms players change mind time perfectly reasonable case adapting attribute difﬁculty. section ﬁrst describe problem statements resulting main concerns reviewed last section present generic framework address issues context commercial video game development. encode developers knowledge content space represented game parameters avoid completely undesirable content limiting search space effectively enable developers deﬁne controllable player type/style implicit ﬂexible player categorization learn robust true players’ experience crowd-sourcing ﬁltering outliers untrustworthy feedback exploit information beta testers experience gained crowd-sourcing categorize players terms player type/style speciﬁed developers tackle concept-drift problem target players change players’ experience faced online adaptive algorithms. motivated commercial video game development process would divide typical game life cycle three stages development public test on-line believe approach make best developers knowledge development information gained beta players public test generate tailored content on-line stage target players minimizing interruptions them. attain goal propose learning-based procedural content generation framework. general ideas behind lbpcg framework two-fold encoding developers knowledge content modeling public players’ behavior/experience machine learning strategically using learned models control content generator produce on-line content matches target players’ individual preference prediction based behavior. depicted fig. lbpcg framework consists models initial content quality content categorization generic player experience play-log driven categorization individual preference models encode developers knowledge content tackle ﬁrst issues models used model beta players’ behavior/experience link developers knowledge content deals third fourth issues. means four models model designed generate quality content on-line target players last issue addressed. used ﬁlter illegitimate and/or unacceptable content poor quality. view model carving manifold acceptable content original content vector space. within manifold framework eventually select content target player expected limit content search space signiﬁcantly. content represented game parameter vector task model appears binary classiﬁcation problem; i.e. parameter vector model decides leads acceptable unacceptable content. problem might tackled different ways prefer learning-based methodology since encodes developers knowledge implicit avoids handcrafted work done developers. ideal scenario would follows. playing well-selected games developers annotate either acceptable unacceptable based knowledge. annotated games parameter vectors developer assigned labels form training examples train classiﬁer. classiﬁer would able make correct decision game parameter vector. order build learning-based model critical issues select minimal number representative games annotation build learner good generalization. motivation underlying model comes observations prefers content similar game features games already enjoyed. thus preference content features utilized specifying players’ styles/types implicit ﬂexible way. model designed categorize acceptable content terms content features deﬁned developers. using content features acceptable content similar properties would grouped together form game categories identiﬁed unique index. content features generic e.g. challenge frustration fear induction speciﬁc game hand e.g. categorical amounts weapons/monsters ﬁrst person shooter games. depending content feature nature problem model either regression classiﬁcation. reasons described again advocate data-driven methodology. consequently annotation needs performed developers content feature issues learning need addressed learning-based model. learning models difference model works whole content space model needs take surviving content subspaces account annotated games used learning reused train model. well known public beta tests provide valuable information game development. framework explore exploit information well-selected representative games elaborately designed survey. ideally developers sufﬁcient knowledge content space models established. means models developers able select small number representative games quality content game category identiﬁed content features. instead releasing acceptable games beta testers suggest releasing well-selected games initial beta test. motivation behind suggestion would data including play-logs feedback facilitate modeling players’ styles/types pre-deﬁned developers model built result model proposed undertake task. reviewed sect. ii.a public opinions different developers’ feedback often subjective noisy. hence model needs address critical issues genuine consensus selected game without compromised deceitful deliberately inaccurate feedback assign conﬁdence level reliability beta player provides feedback. dealing issues properly model would rank selected games terms public consensus decide reliability participated beta testers. also worth mentioning model used deliver stream games players probably going enjoy extent. hence games used initial individual preference detection model minimize interruption players’ experience. absence accurate personalized model player model provides decent back-up option clariﬁed description model enabling technique next section. model provides reliability information beta testers unreliable beta testers easily thrown out. reliable beta testers play-logs contain rich information diversiﬁed players’ behavior feedback games played provides information genuine preferences speciﬁc content features pre-deﬁned developers model. associating play-logs speciﬁc game content features corresponding feedback straightforward establish direct correspondence players’ behavior recorded play-logs preferred games characterized content features predeﬁned developers. thus correspondence would able categorize players based behavior speciﬁc games. lbpcg framework employ model take task building model formulated supervised learning problem. learning training example takes play-log speciﬁc game content features input corresponding feedback target. model trained able predict preferences target players play-logs pre-deﬁned content features games played. working model seamlessly model yields novel measure categorize target players implicitly tends minimize interrupting target players’ experience. four models accomplished model required online stage generate ideal content target player applying four models strategically. ideal scenario model follows. target player played well-selected games based models his/her categorical preference determined rapidly model. quality games variation his/her preferred content category generated subsequently concept-drift problem occurs. problem detected categorical preference target player quickly determined repeating initial detection process his/her favorite content category generated. enact scenario model needs cope three critical issues minimal number appropriate games initially ensure categorical preference target player determined rapidly ensure sufﬁcient content variation subsequent generated games within particular content category player type determined detect concept-drift occurs tackle effectively. summary lbpcg framework along enabling techniques presented next section provides systematic solution emerging problems existing techniques. here emphasize data-driven learning distinct advantages encoding developers knowledge modeling beta players’ behavior/experience discussed sect. goal model able recognize whether content description vector represents acceptable game not. general denote content space parameters g⊂rd parameter vector game denoted general content space often large exhaustively classiﬁed. tackle problem employ binary classiﬁer conﬁdence decision training number annotated games developers. developer limited resource want keep number possible assured sampling good spectrum games. instead randomly selecting games annotation suggest applying clustering analysis algorithm leads partition clusters. then choose ﬁxed number games cluster results much smaller search space spread throughout entire original space without condensed particular area. avoiding condensed area somewhat assured learning games extremely similar. annotation game developers need play game assign legitimacy label based knowledge. apart label developers also assign labels/scores content features pre-deﬁned themselves used model described later consolidating data annotation/collection reduces workload developers. different methods train classiﬁer propose query-based active learning method especially learning. active learning aims reduce burden developers asking questions possible. algorithm searches training examples least conﬁdence asks developers annotate games least conﬁdence re-trains classiﬁer convergence. algorithm applied developers need annotate least representative game clusters archived clustering analysis. annotated games constitute validation ticq. result active learning algorithm summarized algorithm applying active learning model whole content space reduced smaller search space tends contain acceptable content. instead searching purpose model categorize acceptable content based pre-deﬁned content features denoted feature continuous discrete value. problem model ﬁnding mapping value indicates characteristic category terms content feature depending nature content features formulate problem either regression multi-class classiﬁcation. described sect. iii.b similar issues arising model; acceptable content space generally still large exhaustively searched number annotated games need possible assured sampling good spectrum games therefore proceed similar fashion learning sharing resource exploiting results achieved learning including annotated data clustering analysis results. motivation learning propose generalized active learning algorithm using partition clusters achieved learning choose ﬁxed number acceptable games cluster results much smaller search space spread throughout entire acceptable content space without condensed particular area. furthermore developers need ensure least representative acceptable game annotated clusters re-using acceptable games ticq annotating games annotated games cluster available. annotated acceptable games constitute validation tcc. generalized active learning algorithm summarized algorithm active learning ﬁnishes resultant learners ready predict content features acceptable games content feature learner outputs predicted label/value conﬁdence prediction. note beta players participated survey. secondly positive consensus experience score acceptable game predicted trained regressor indicates conﬁdence score. former utilized learning unreliable beta players outliers order ensure genuine players’ behavior experience learned. latter exploited model facilitate individual preference detection little information target player serve decent fall-back solution target player difﬁcult categorize. goal model accurately mapping target players’ behavior game played game category information characterized content features onto individual preference. create model explore exploit information provided beta players survey. general denote play-log event attributes l⊂rl play-log attribute vector denoted recorded play game problem model formulated follows game played beta players ﬁnding consensus experience game conﬁdence level assigning reliability factor beta player his/her feedback comparing players’ he/she played number games note multi-valued feedback viewed multiple binary feedback. simplify presentation take binary feedback account. indicates positive/negative feedback respectively reliability factor speciﬁed sensitivity speciﬁcity typical crowd-sourcing problem seeks solution inferring true label object noisy labels given multiple annotators. many potential solutions problem adapt generic crowd-sourcing algorithm hereinafter named crowd-em enabling technique meets general requirements extended form feedback including continuous categorical scores crowdem algorithm learning summarized algorithm note player might play games. case simply needs substitute number beta players number beta players actually played game well number games number games player actually played algorithm target player whose cannot detected avoid system failure. formulate problem model design decision-making procedures possible situations personalized content generation on-line stage. general solution strategically using models lbpcg framework tackle various decision-making problems. present solution state machine provides compact precise representation decisionmaking algorithms. naturally establish three states model i.e. categorize produce generalize deal three critical issues arising goal mentioned above respectively. illustrated fig. categorize state designed detect target player’s games he/she played. main idea follows. maximizing positive users experience reliability detection reuse selected games used learning. games already grouped game clusters content features games cluster ranked based value achieved learning. target player played game model uses his/her play-log along content features predict his/her his/her behavior consistent games speciﬁc game category characterized content features suggests target player enjoys games speciﬁc category. then model leaves current state produce state. produce state shown fig. directs model model control content generator produce quality content variation speciﬁc game category determined categorize state. furthermore model employed monitor whether preference drift taken place. whenever concept drift detected model back categorize state. initialization divide training data collected beta tests training subsets d··· setting number thresholds respectively. choose proper classiﬁer train cross-validation ﬁnding optimal parameter record accuracy cross-validation. public beta test play-logs along corresponding feedback recorded data collection system. combining content features played games training data examples however examples quite noisy previously discussed. result explore reliability information beta player learnt model ﬁlter noisy examples. setting thresholds respectively generate training subset examples offered beta players whose thresholds. threshold setting challenging problem since clear criterion reliability score assigned player mean player liar suggest he/she outlier distinct experience majority beta players. tackle problem propose ensemble learning algorithm learning. basic idea using different thresholds produce training sets train classiﬁers training data subsets cross-validation respectively. accuracy measured crossvalidation would used weights construct ensemble classiﬁer. ensemble learning algorithm summarized algorithm model built algorithm used on-line stage model predict individual preference target players based content features games played corresponding play-logs. goal model three-fold discovering target player’s generating favorite content variation target player whose determined well monitoring concept drift behavior generalizing fig. dedicated crisis situation target player’s cannot determined many attempts categorize state. idea tacking problem exploiting models generate quality games likely appreciated public towards minimizing disappointment playing randomly generated games quality. using evaluation functions achieved three models target player receives games large value produced learnt model indicates high likelihood games result positive public experience. moreover model employed predict target player’s game played. his/her determined done categorize state model would produce state generate content matching his/her summary state machine used mode provides enabling technique geared towards generating personalized content target player whose preferences initially unknown. emphasize enabling techniques merely require play-logs target player personalized content generation minimizes interruption his/her experience. section present proof-of-concept prototype applying lbpcg framework ﬁrst-person shooter game quake report simulation results. facilitate presentation hereinafter refer lbpcg-quake lbpcg framework applied quake name composite models quake-icq quake-cc quake-gpe quakepdc quake-ip. ﬁrst-person shooter quake highly acclaimed game open source making ideal platform research since modify suit purposes. made various changes ability output play-logs. oblige generator various software games including quake provides command-line allows ordinal parameters control high-level attributes monster weapon frequencies. oblige employed content generator maps generated content lbpcg-quake. majority parameters effect aesthetic qualities level making somewhat less interesting. chosen subset nine oblige parameters cases combined form content description vector. skill level overall monster count amount health packs amount ammo weapon choice four parameters consolidating control different types monster. parameters vary ﬁxed value something sensible e.g. median value. subset chosen parameters content vector space consists total games certainly infeasible exhaustively search developers play game. addition sample content space randomly becomes clear majority content extremely high level difﬁculty. poses immediate problem algorithms would good idea present nightmarishly difﬁcult game experienced gamer alone completely player. also subtleties content parameters need taken account. example overall number monsters controlled parameter four parameters control proportion different types monsters appear. addition play-logs extract quake high-dimensional. issues make problem ﬁnding enjoyable content target player quite intricate challenging. overcoming challenges lbpcg-quake aims produce maps right amount monsters power-ups best weapons target player. quake-icq learning chose k-medoids algorithm clustering analysis insensible initialization conditions. chose games cluster. thus clustering analysis done reduced space games much reasonable size explore. result developer played labeled games form validation ticq. active learning nonlinear support vector machine kernel used algorithm initialized randomly chosen games different classes. active learning process continued positive negative error rates ticq converged indicating model similar performance respect identifying acceptable unacceptable games. quake-cc learning quake-icq model ﬁrst applied acceptable subspace validation formed consisting labeled games least games difﬁculty category. since categorizing difﬁculty content multi-class classiﬁcation task decomposed binary classiﬁcation sub-tasks active learning. random forests identify useful features automatically complex task trained binary classiﬁers separately algorithm difﬁculty category. again used initialization stopping criteria used quake-icq active learning. learning adopted winner-take-all rule working conﬁdence binary classiﬁers decision-making. quake-gpe learning algorithm directly applied data collected public survey described sect. v-b. analysis found participant made surveys inconsistent play-logs feedback games he/she played several times. hence his/her data quake-gpe learning addition employed nonlinear support vector regressor kernel algorithm instead logistic regressor suggested faced rather complex nonlinear regression problem. crowd-em algorithm terminated log-likelihood function details) reached local maximum epochs. quake-pdc learning employed multiple classiﬁers form ensemble learner algorithm simulations used four different thresholds respectively combination resulted different training data sets. accordingly classiﬁers trained separately combined form ensemble learner used quake-pdc model. special case developer training single developer. quake-gpe quake-pdc however required framework internet simulate scenario gets varied cross-section beta testers possible. facilitate public data collection developed client/server architecture collect surveys people remotely. demonstration purposes chosen content feature difﬁculty consisting categories lbpcgquake. believe likely something people preference for. generate training data quake-gpe learning choose representative games give beta testers; games difﬁculty categories. games selected active learning process. using games quake-cc training process ideal solution retrospect would done. client distributed advertised websites reddit facebook oblige forums. total surveys recorded total people. game played roughly nine times players played average approximately three games. however enthusiastic participant actually produced surveys own. questionnaire consisted questions only enjoy level? rate approximately thirds surveys positive feedback. interestingly surveys showed game difﬁculty increases number very good labels also increases very hard category also labels very bad. middle difﬁculties easy hard least number people labeling very bad. additionally difﬁculty increases less surveys labeled average indicating polarized view points. analysis showed very hard very easy games cause disagreement amongst participants whereas middle difﬁculties caused less disagreement. indicates games gave beta testers well selected since caused controversy potentially allowing distinguish different types players based category. nevertheless survey random means guarantied include different types players. whenever game played modiﬁed quake engine produces large play-log consisting features. features include statistics average number monsters killed game tick much mouse moved direction many monsters type killed. every play-log received beta testers linked answers questions mentioned quake-pdc model used -fold crossvalidation play-logs used quake-gpe learning. provides conﬁdence value ranging decision exploited information improve quake-pdc performance. adjusting decision boundaries different conﬁdence thresholds achieved different test results. immediately apparent fig. positive/negative error rates converge conﬁdence threshold furthermore applied rejection increase accuracy. depicted fig. using rejection threshold hter achieved approximately samples positive negative classes respectively rejected. given nature noisy public surveys believe overall performance reasonable. here emphasize rejecting uncertain play-logs avoid catastrophic failure quake-ip models. simulations used aforementioned conﬁdence rejection thresholds quake-pdc model decision-making. ideally testing quake-ip model requires extensive survey large number reliable target players different types involved play many games. preliminary evaluation managed four reliable people simulate target players. player completely inexperienced video games another expert player remaining roughly somewhere extremes. apart games generated quake-lbpcg target player also asked play games generated comparison models balanced model presents equal numbers games difﬁculty beta test games random model presents completely random games ﬁltering whatsoever. player played games generated model. playing game player asked question public survey i.e. enjoy level? feedback recorded. evaluate performance three different models deﬁne scoring metric based feedback given four target players. games played player denote number games difﬁculty category fig. illustrates test error rates ticq active learning process progresses. +error -error stand errors positive negative samples ticq respectively. also report half-time error rate deﬁned average +error -error denoted avgerror. observed fig. overall error gradually decreases informative examples presented positive negative errors converge acceptable equal error rate approximately iterations. performance ticq reﬂecting distribution quake content space demonstrates effectiveness proposed active learning algorithm. quake-cc model classiﬁes game content categories report overall errors quake-cc active learning fig. clear visualization. observed model reached optimal accuracy iterations training beyond leads over-ﬁtting speciﬁc category. early stop iteration overall error rate error rates different difﬁculty categories follows very easy easy moderate hard very hard. closer look confusion matrix revealed almost misclassiﬁcation happened adjacent difﬁculty categories e.g. hard misclassiﬁed very hard. thus misclassiﬁcation produces catastrophic effect. rejection decision making often increases accuracy reliability however found applying rejection quake-cc model improve performance considerably. hence used quake-cc model optimal performance quake-pdc quake-ip models support target player adaptation. presents randomly generated content rather solidiﬁed content target player on-line stage. hand framework cannot classiﬁed on-line create content game played generates content game played. hence framework mixing on-line off-line properties. next framework adopts typical generate-and-test style generate content provides safe-guards necessary content model exclude optional content long acceptable. finally framework works generic random seed-parameter vector content representation leads certain variation generated content different runs identical parameters hence stochastic generation nature. lbpcg models built development stage lead content evaluation functions; model measuring acceptability generated content model extracting pre-deﬁned content features legitimate game. according taxonomy models direct evaluation functions. moreover models implicitly encode developers knowledge data-driven viewed mixture theory-driven datadriven functions contrast models created public test stage lead novel content evaluation functions terms beta players’ behavior/experience. crowdsourcing learning model yields direct evaluation function mapping game content public experience. model results function mapping players’ behavior speciﬁc content experience could viewed interactive evaluation function despite mixing on-line off-line nature. finally model on-line stage provides personalized algorithm. general personalization carried lbpcg framework based assumptions players certain type/style similar playing behavior games played players whose playing behavior speciﬁc game similar share similar experience. generate quality personalized content target player lbpcg framework undergoes series tests evaluating content different models. thus lbpcg framework limited poor performance evaluation functions generator controlling procedure. enabling techniques proposed paper simply provide tentative technical support lbpcg framework means sophisticated even though lbpcg-quake prototype demonstrates usefulness. propose active learning algorithms models proof algorithms always converge lead satisfactory performance limited number annotated examples. apart exploration unsupervised learning possible employ artiﬁcial agents facilitate annotation reduce developers load instead playing annotated games themselves developers annotate content based agents behavior/performance along small number games play. anticipated evaluation functions direct simulation-based nature established cost robust content space explored thoroughly. performance models critically played number games difﬁculty category enjoyed him/her respectively. hence preference rate player games difﬁculty category pc/npc. player nmpc number games difﬁculty category generated model model player scoring metric deﬁned content categories lbpcgquake. intuitively higher score awarded model indicates model produces games difﬁculty category enjoyed player. thus would metric measure success model terms personalization. fig. depicts scores awarded different models bases feedback four target players. evident fig. quake-ip model clearly performs best players awarded much higher scores models. player quake-ip model awarded highest score among three models large margin. player score awarded quake-ip model superior balanced model inferior random model. based feedback seemed player particular preference easy moderate games. however analysis suggested behavior playing games preference varied signiﬁcantly public survey. consequence quake-cc model little conﬁdence identifying preference player never left categorize state indicates weakness random public survey. lbpcg-quake prototype carries proof concept proposed lbpcg framework. simulation results suggest lbpcg-quake prototype promising towards generating personalized content. lbpcg novel framework would ﬁrst elucidate nature light existing taxonomy first framework neither on-line off-line terms content generation. framework model models controls content generator determined quality data collected public test stage. lbpcg-quake simulation control random beta players. however beta testers different types/styles recruited commercial development. thus likely gain sufﬁcient information players’ behavior/experience representative game played enough beta testers different types/styles beta tester plays least representative game content category. on-line stage target players play quite number games preferred content categories found. hence number content categories characterized content features order presenting games unknown target players could affect experience although factors considered algorithms. result content features pre-deﬁned selected carefully efﬁcient algorithms model studied lead better playing experience. sbpcg generic framework dominates current development. core technique evolutionary computation widely used sbpcg. sbpcg lbpcg share generate-and-test style several main differences follows. first content representation sbpcg critical issue dealt differently different content types. contrast lbpcg works universal content parameter representation regardless content types. next reducing content search space carried differently sbpcg lbpcg; lbpcg employs number datadriven evaluation functions encode developers knowledge implicitly model beta players’ behavior/experience sbpcg often relies evaluation functions constructed static heuristic based explicit prior knowledge target players’ behavior/experience. last perhaps different lbpcg adopts alternative fashion generating game content; content generation driven target players’ historical behavior safeguarded different evaluation functions catastrophic failure avoidance quality assurance. contrast sbpcg uses either heuristic search population-based solutions lbpcg framework presents alternative solution possible combine lbpcg existing techniques. evaluation functions learnt models used sbpcg catastrophic failure avoidance quality assurance content space organization. advocate learning-based enabling techniques models replaceable handcrafted evaluation functions developed prior knowledge purpose long evaluation functions high performance developed advance. perspective personalization lbpcg another experience-driven approach novel evaluation functions achieved models could integrated experience-driven sbpcg facilitate limiting search space. addition adopt subjective play experience modeling approach enabling techniques. appropriate apparatus already deployed platform objective approaches easily used models substitute enhance current conclusion presented lbpcg framework enabling techniques order respond several challenges existing techniques including content representation catastrophic failure avoidance content generation speed-up incorporating player models evaluation functions combination theory-driven interactive evaluation functions. framework demonstrated proof-of-concept prototype based quake leads promising results. ongoing researches developing lbpcg overcome limitation exploring state-of-the-art machine learning relevant approaches improve enabling techniques. authors grateful anonymous public players feedback lbpcg-quake public survey four target players participated lbpcg-quake simulations. chen corresponding author. video-games-bigger-than-ﬁlm.html. ludwig http//programmerjoe.com////procedural-content-is-hard/. togelius yannakakis stanley browne search-based procedural content generation taxonomy survey ieee trans. comput. intell. game. vol. laskov level generation system platform games based reinforcement learning approach thesis school informatics university edinburgh shaker yannakakis togelius towards automatic personalized content generation platform games proc. aiide shaker yannakakis togelius nicolau oneill evolving personalized content super mario bros using grammatical evolution proc. aiide cardamone yannakakis togelius lanzi evolving interesting maps ﬁrst person shooter proc. evoapplications togelius justinussen hartzen compositional procedural content generation proc. ieee conf. comput. intell. games togelius nardi lucas towards automatic personalised content creation racing games proc. ieee conf. comput. intell. games liapis yannakakis togelius limitations choicebased interactive evolution game level design proc. aiide togelius whitehead bidarra guest editorial procedural content generation games ieee trans. comput. intell. game. vol. product release quake yannakakis maragoudakis hallam preference learning cognitive modeling case study entertainment preferences ieee trans. sys. cybern. vol. pedersen togelius yannakakis modeling player experience content creation comput. intell. vol. baumgarten cairns colton miller unsupervised modelling player style ieee trans. comput. intell. game. vol.", "year": 2013}