{"title": "Gene Expression Programming: a New Adaptive Algorithm for Solving  Problems", "tag": ["cs.AI", "cs.NE", "I.2.2"], "abstract": "Gene expression programming, a genotype/phenotype genetic algorithm (linear and ramified), is presented here for the first time as a new technique for the creation of computer programs. Gene expression programming uses character linear chromosomes composed of genes structurally organized in a head and a tail. The chromosomes function as a genome and are subjected to modification by means of mutation, transposition, root transposition, gene transposition, gene recombination, and one- and two-point recombination. The chromosomes encode expression trees which are the object of selection. The creation of these separate entities (genome and expression tree) with distinct functions allows the algorithm to perform with high efficiency that greatly surpasses existing adaptive techniques. The suite of problems chosen to illustrate the power and versatility of gene expression programming includes symbolic regression, sequence induction with and without constant creation, block stacking, cellular automata rules for the density-classification problem, and two problems of boolean concept learning: the 11-multiplexer and the GP rule problem.", "text": "gene expression programming genotype/phenotype genetic algorithm presented first time technique creation computer programs. gene expression programming uses character linear chromosomes composed genes structurally organized head tail. chromosomes function genome subjected modification means mutation transposition root transposition gene transposition gene recombination onetwo-point recombination. chromosomes encode expression trees object selection. creation separate entities distinct functions allows algorithm perform high efficiency greatly surpasses existing adaptive techniques. suite problems chosen illustrate power versatility gene expression programming includes symbolic regression sequence induction withconstant creation block stacking cellular automata rules density-classification problem problems boolean concept learning -multiplexer rule problem. gene expression programming like genetic algorithms genetic programming genetic algorithm uses populations individuals selects according fitness introduces genetic variation using genetic operators fundamental difference three algorithms resides nature individuals individuals linear strings fixed length individuals nonlinear entities different sizes shapes individuals encoded linear strings fixed length afterwards expressed nonlinear entities different sizes shapes mind history life earth difference superficial systems kind entity functions genome body kinds systems condemned limitations easy manipulate genetically lose functional complexity exhibit certain book river eden dawkins gives list thresholds life explosion. first replicator threshold consists self-copying system hereditary variation. also important replicators survive virtue properties. second threshold phenotype threshold replicators survive virtue causal effects something else phenotype. simple example replicator/phenotype system dna/protein system life earth. life move beyond rudimentary stage phenotype threshold crossed similarly entities survive virtue properties. understandingly effort recent years scientific community cross phenotype threshold evolutionary computation. prominent effort developmental genetic programming binary strings used encode mathematical expressions. expressions decoded using five-bit binary code called genetic code. contrary analogous natural genetic code genetic code applied binary strings frequently produces invalid expressions therefore huge amount computational resources goes toward editing illegal structures limits system considerably. surprisingly gain performance minimal alone cannot introduce variation action remaining operators genetic variation introduced population. operators randomly select chromosomes modified. thus chromosome might modified several operators time interplay chromosomes expression trees implies unequivocal translation system translating language chromosomes language expression trees structural organization chromosomes presented work allows truly functional genotype/phenotype relationship modification made genome always results syntactically correct programs. indeed varied genetic operators developed introduce genetic diversity populations always produces valid ets. thus artificial life system well established beyond replicator threshold capable adaptation evolution. advantages system like clear nature important emphasized. first chromosomes simple entities linear compact relatively small easy manipulate genetically second exclusively expression respective chromosomes; entities upon selection acts according fitness selected reproduce modification. during reproduction chromosomes individuals reproduced modification transmitted next generation. account characteristics extremely versatile greatly surpasses existing evolutionary techniques. indeed complex problem presented work evolution cellular automata rules density-classification task surpasses four orders magnitude. present work shows structural functional organization chromosomes; language chromosomes translated language ets; chromosomes function genotype phenotype; individual program created matured reproduced leaving offspring properties thus capable adaptation. paper proceeds detailed description illustration technique examples chosen different fields. flowchart gene expression algorithm shown figure process begins random generation chromosomes initial population. chromosomes expressed fitness individual evaluated. individuals selected according fitness reproduce modification leaving progeny traits. individuals generation turn subjected developmental process expression genomes confrontation selection environment reproduction modification. process repeated certain number generations solution found. note reproduction includes replication also action genetic operators capable creating genetic diversity. replication genome copied transmitted next generation. obviously replication start position corresponds root then function attached many branches arguments function. assemblage complete baseline composed terminals formed. case following formed looking structure orfs difficult even impossible advantages representation except perhaps simplicity elegance. however orfs analyzed context gene advantages representation become obvious. stated previously chromosomes fixed length composed genes equal length. therefore length gene also fixed. thus varies length genes length orfs. indeed length equal less length gene. first case termination point coincides gene second case termination point somewhere upstream gene. function noncoding regions genes? fact essence evolvability allow modification genome using genetic operator without restrictions always producing syntactically correct programs without need complicated editing process highly constrained ways implementing genetic operators. indeed paramount difference previous implementations without linear genomes genes composed head tail. head contains symbols represent functions terminals whereas tail contains terminals. therefore different alphabets occur different regions within genome chromosome consists linear symbolic string fixed length composed genes. shown despite fixed length chromosomes code different sizes shapes. structural organization genes better understood terms open reading frames biology coding sequence gene begins start codon continues amino acid codons ends termination codon. however gene respective sequences upstream start codon sequences downstream stop codon. although start site always first position gene termination point always coincide last position gene. common genes noncoding regions downstream termination point. straightforward reading left right bottom. expression starting terminating orfs named k-expressions note ordering differs postfix prefix expressions used different implementations arrays stacks evident examples above modification made genome matter profound always results valid obviously structural organization genes must preserved always maintaining boundaries head tail allowing symbols function tail. section shows operators work modify genome individuals reproduction. chromosomes usually composed gene equal length. problem number genes well length head chosen. gene codes sub-et sub-ets interact another forming complex multisubunit details interactions fully explained section three orfs codes sub-et position marks start gene; though evident upon construction respective sub-et. shown figure first ends position second ends position last also ends position thus chromosomes code orfs expressing particular sub-et. depending task hand sub-ets selected individually according respective fitness form complex multi-subunit selected according fitness whole multi-subunit patterns expression details selection discussed throughout paper. however keep mind sub-et separate entity part complex hierarchical structure complex systems whole parts. nature phenotype multiple levels complexity complex organism itself. trnas proteins ribosomes cells forth also products expression ultimately encoded genome. cases however expression genetic information starts transcription protein genes proceeds translation simplest individual complex expression genetic information starts translation transfer information gene process already presented section decoding genes shown. contrast nature expression genetic information simple. worth emphasizing fact need transcription message gene directly translated chromosomes composed orfs obviously encoded individuals different degrees complexity. simplest individuals encoded single gene organism case product single gene cases organism multisubunit different sub-ets linked together particular function. cases organism emerges spatial organization different sub-ets cases organism emerges interactions conventional sub-ets different domains however cases whole organism encoded linear genome. seen translation results formation sub-ets different complexity complete expression genetic information requires interaction sub-ets another. simplest interactions linking sub-ets particular function. process similar assemblage different protein subunits multi-subunit protein. sub-ets algebraic boolean expressions mathematical boolean function argument used link sub-ets final multisubunit functions chosen addition multiplication algebraic sub-ets boolean sub-ets. current version linking function priori chosen problem easily introduced genome; instance last position chromosomes also subjected adaptation. indeed preliminary results suggest system works well. figure illustrates linking sub-ets addition. note root final encoded genome. note also final could linearly encoded following k-expression however evolve solutions complex problems effective touse multigenic chromosomes permit modular construction complex hierarchical structures gene codes small building block. small building blocks separated other thus evolve independently. instance tried evolve solution symbolic regression problem presented section single-gene chromosomes success rate would fall significantly case discovery small building blocks constrained longer free evolve independently. kind experiment shows effect powerful hierarchical invention system capable easily evolving simple blocks using form complex structures figure shows another example sub-et interaction sub-ets simplest kind case sub-ets linked function clusters turn linked also another function three last clusters also linked forming large multi-subunit kind chromosomal architecture used evolve solutions -multiplexer problem section also evolve cellular automata rules density-classification problem. individual figure could converted following k-expression figure expression multigenic chromosomes ets. two-genic chromosome tails shown bold. sub-ets codified gene. result posttranslational linking addition. figure expression multigenic chromosomes ets. three-genic chromosome tails shown bold sub-ets codified gene. result posttranslational linking type linking function well number genes length gene priori chosen problem. always start using singlegene chromosome gradually increasing length head; becomes large increase number genes course choose function link them. start addition cases another linking function might appropriate. idea course find good solution provides means finding one. section examples fitness functions described. examples fitness functions given problems studied section success problem greatly depends fitness function designed goal must clearly correctly defined order make system evolve direction. important application symbolic regression function finding goal find expression performs well fitness cases within certain error correct value. mathematical applications useful small relative absolute errors order discover good solution. range selection excessively narrowed populations evolve slowly incapable finding correct solution. hand opposite done range selection broadened numerous solutions appear maximum fitness good solutions. solve problem evolutionary strategy devised permits discovery good solutions withhalting evolution. system left find best possible solution within minimum error. broad limit selection operate given instance relative error allows evolutionary process started. indeed founder individuals usually unfit modified descendants reshaped selection populations adapt wonderfully finding better solutions progressively approach perfect solution. mathematically fitness individual program expressed equation error chosen absolute error equation error chosen relative error range selection value returned individual chromosome fitness case target value fitness case note perfect fmax note kind fitness function system find optimal solution itself. another important application boolean concept learning logic synthesis fitness individual function number fitness cases performs correctly. boolean applications though fundamental penalize individuals able solve correctly fitness cases probably reflects likelihood correctly solving binary boolean function. advisable select individuals capable solving fitness cases. mark symbolic value fitness attributed instance usually process evolution motion unfit individuals easily created initial population. however future generations highly individuals start appear rapidly spreading population. easy problems like boolean functions arguments really important complex problems convenient choose bottom line selection. problems following fitness function used problems presented work individuals selected according fitness roulettewheel sampling coupled cloning best individual preliminary study different selection schemes suggests appreciable difference long cloning best individual guaranteed schemes perform better problem others another. however complex problems seems roulettewheel selection elitism best. according fitness luck roulette individuals selected reproduce modification creating necessary genetic diversification allows evolution long run. except replication genomes selected individuals rigorously copied remaining operators randomly pick chromosomes subjected certain modification. however except mutation furthermore chromosome might chosen none several genetic operators introduce variation population. feature also distinguishes entity never modified operator time thus modifications several genetic operators accumulate reproduction producing offspring different parents. although vital replication uninteresting operator alone contributes nothing genetic diversification. according fitness luck roulette chromosomes faithfully copied next generation. fitter individual higher probability leaving offspring. thus replication genomes selected individuals copied many times outcome roulette. roulette spun many times individuals population always maintaining population size. mutations occur anywhere chromosome. however structural organization chromosomes must remain intact. heads symbol change tails terminals change terminals. structural organization chromosomes maintained individuals produced mutation structurally correct programs. note function mutated terminal vice versa function argument mutated function arguments vice versa modified drastically. note also mutation gene example nature point mutation sequence gene slightly change structure protein change neutral mutations fairly frequent here although neutral mutations exist mutation coding sequence gene much profound effect usually drastically reshapes transposable elements fragments genome activated jump another place chromosome. three kinds transposable elements. short fragments function terminal first position transpose head genes except root short fragments function first position transpose root genes entire genes transpose beginning chromosomes. existence elements remnant developmental process first used single-gene chromosomes systems gene terminal root little use. multigenic chromosomes introduced feature remained operators important understand mechanisms genetic variation evolvability. sequence genome might become element therefore elements randomly selected throughout chromosome. copy transposon made inserted position head gene except start position. typically transposition rate three elements different length used. transposition operator randomly chooses chromosome start element target site length transposon. consider -genic chromosome below transposition sequence upstream insertion site stays unchanged whereas sequence downstream copied element loses head many symbols length element note that despite insertion structural organization chromosomes maintained therefore newly created individuals syntactically correct programs. note also transposition drastically reshape upstream insertion site profound change. thus kind operator seen high rate lowest levels elements start function thus chosen among sequences heads. that point randomly chosen head gene scanned downstream function found. function becomes start position element. functions found nothing. typically root transposition rate three elements different sizes used. operator randomly chooses chromosome gene modified start element length. consider following -genic chromosome gene transposition entire gene functions transposon transposes beginning chromosome. contrast forms transposition gene transposition transposon deleted place origin. length chromosome maintained. note numerical applications function chosen link genes addition expression evaluated chromosome modified. situation differs applications linking function commutative instance function chosen link sub-ets -multiplexer problem section however transforming power gene transposition reveals operator conjugated crossover. example functionally identical chromosomes chromosomes identical gene different positions recombine individual duplicated gene might appear. known duplication genes plays important role biology evolution interestingly individuals duplicated genes commonly found process problem solving. root transposition whole head shifts accommodate element losing time last symbols head elements tail gene subjected transposition nearby genes stay unchanged. note again newly created programs syntactically correct structural organization chromosome maintained. modifications caused root transposition extremely radical root modified. nature transposable element inserted beginning coding sequence gene causing frameshift mutation radically changes encoded protein. like mutation transposition root insertion tremendous transforming power excellent creating genetic variation. kind recombination time offspring created exhibit different properties parents. one-point recombination like mentioned operators important source genetic variation being mutation operators chosen gep. one-point recombination rate used depends rates operators. typically global crossover rate used. two-point recombination chromosomes paired points recombination randomly chosen. material recombination points afterwards exchanged chromosomes forming daughter chromosomes. consider following parent chromosomes suppose bond gene bond gene chosen crossover points. then paired chromosomes bonds exchange material crossover points forming offspring below note first gene parents split downstream termination point. indeed noncoding regions chromosomes ideal regions chromosomes split cross without interfering orfs. note also second gene chromosome also downstream termination point. however gene chromosome split upstream termination point profoundly changing sub-et. note also chromosomes recombined noncoding region gene chromosome activated integrated chromosome transforming power two-point recombination greater one-point recombination useful evolve solutions complex problems especially multigenic chromosomes composed several genes used. gene recombination entire gene exchanged crossover. exchanged genes randomly chosen occupy position parent chromosomes. consider following parent chromosomes newly created individuals contain genes parents. note kind recombination similar genes exchanged time exchanged genes different material introduced population. worth noting operator unable create genes individuals created different arrangements existing genes. fact gene recombination used unique source genetic variation complex problems solved using large initial populations order provide necessary diversity genes however creative power based shuffling genes building blocks also constant creation genetic material. structural organization chromosomes namely length head number genes chosen. advisable start short single-gene chromosomes gradually increase figure shows analysis problem. population size individuals evolutionary time generations used. equivalent one-point mutations chromosome used experiments order simplify analysis. fitness cases shown table fitness evaluated equation |c-tj| equal less |c-tj| thus fmax equivalent target function. note also efficiently evolve solutions using large values capable evolving large complex sub-ets. worth noting compact genomes efficient. therefore certain redundancy fundamental efficiently evolve good programs. consider instance multigenic system composed genes linked addition. shown figure success rate case maximum value figure shows progression average fitness population fitness best individual experiment summarized table column correct solution found generation sub-ets linked addition detailed analysis program shows actions redundant problem hand like addition multiplication however existence unnecessary clusters even pseudogenes like gene important evolution individuals type representation single-gene system equivalent greatly surpasses technique however much complex single-gene system chromosomes encode gene suppose could find solution analysis shown figure could increase number genes choose function link them. instance could choose increase number genes gradually. figure shows success rate problem depends number genes. analysis equivalent one-point mutations chromosome pris three transposons lengths used. note cope well excess genes success rate -genic system still high figure another important relationship shown success rate depends evolutionary time. contrast generations norm nothing much possibly discovered populations adapt evolve indefinitely material constantly introduced genetic pool. finally suppose multigenic system sub-ets linked addition could evolve satisfactory solution. could choose another linking function instance multiplication. process repeated good solution found. dynamics populations. oscillations average fitness even discovery perfect solution unique gep. certain degree oscillation small population sizes used solve problems presented work. however identical pattern obtained using larger population sizes. figure compares evolutionary dynamics populations individuals generations. plot shows progression average fitness experiment identical summarized table column genetic operators switched remaining dynamics obtained mutation alone gene recombination combined gene transposition one-point recombination two-point recombination gene recombination worth noticing homogenizing effect kinds recombination. interestingly kind pattern similar evolutionary dynamics populations also worth noticing plot gene recombination alone case perfect solution found. shows sometimes impossible find perfect solution shuffling existing building blocks done implementations without mutation. indeed gene recombination similar effect recombination permits exclusively recombination mathematically concise blocks. note even generalized shuffling building blocks results oscillatory dynamics table parameters symbolic regression sequence induction sequence induction using ephemeral random constants block stacking -multiplexer problems. number runs number generations population size number fitness cases head length number genes chromosome length mutation rate one-point recombination rate two-point recombination rate gene recombination rate transposition rate elements length transposition rate elements length gene transposition rate random constants mutation rate specific transposition rate selection range error success rate figure possible evolutionary dynamics populations. analysis plots show progression average fitness population. plot operators switched rates shown table column case perfect solution found generation plot mutation case perfect solution found generation plot gene recombination plus gene transposition switched case perfect solution found generation plot one-point recombination case perfect solution found generation plot two-point recombination case perfect solution found generation plot gene recombination case perfect solution found best fitness found generation problem sequence induction special case symbolic regression domain independent variable consists nonnegative integers. however sequence chosen complicated expression used symbolic regression different coefficients used. solution kind problem involves discovery certain constants. different approaches problem constant creation shown without using ephemeral random constants another using ephemeral random constants. shown column table probability success problem using first approach note constants created scratch algorithm. seems real-world problems kind approach advantageous because first never know beforehand kind constants needed second number elements terminal much smaller reducing complexity problem. however ephemeral random constants easily implemented gep. additional domain created. structurally comes tail length equal consists symbols used represent ephemeral random constants. gene constants created beginning circulation guaranteed genetic operators. besides special mutation operator created allows permanent introduction variation random constants. domain specific transposition also created order guarantee effective shuffling constants. note basic genetic operators affected necessary keep boundaries region different alphabets. shown column table probability success problem considerably lower first approach. furthermore prior knowledge solution enabled case correctly choose random constants. therefore real-world applications magnitude type coefficients unknown appropriate system find constants itself. however numerical applications discovery constants fundamental easily created indicated here. block stacking goal find plan takes initial configuration blocks randomly distributed stack table places stack correct order. case blocks letters word universal. first three take argument takes arguments. version loops processed beginning solved particular order action argument executed least despite state predicate argument loop executed once timing iterations. terminals consisted three sensors version refers block stack whether correct not; stack empty blocks correctly stacked sensor returns true otherwise returns false; refers obviously next needed block immediately multigenic system composed three genes length used problem. linking sub-ets consisted sequential execution sub-et subplan. instance first sub-et empties stacks next sub-et proceed fill them fitness determined fitness cases generation empty stack plus nine initial configurations nine letters stack randomly generated. empty stack used prevent untimely termination runs fitness point attributed empty stack however capable efficiently solving problem using random initial configurations fitness function follows empty stack fitness point attributed; partially correctly packed stack fitness points attributed; completely correctly stacked word fitness points attributed. thus maximum fitness idea make population programs hierarchically evolve solutions toward perfect plan. fact usually first useful plan discovered empties stacks programs learn partially fill empty stacks finally perfect plan discovered fills stacks completely correctly note first sub-plan removes blocks stacks correct letter; second sub-plan correctly stacks remaining letters; last sub-plan nothing. emphasized plans maximum fitness evolved fact perfect universal plans generation tested nine randomly generated initial configurations sufficient allow algorithm ability evolve rules densityclassification problem intensively investigated rules discovered performed poorly approaching accuracy rule human-written rule. also used evolve rules density-classification task rule discovered surpassed rule human-written rules. section shows successfully applied difficult problem. rules evolved accuracy levels thus exceeding human-written rules rule evolved simplest wrap-around array binary-state cells cell connected neighbors sides. state cell updated defined rule. rule applied simultaneously cells process iterated time steps. frequently studied version problem neighborhood thus size rule space search problem huge number figure shows updated state cellular automaton upon application certain transition rule. figure one-dimensional binary-state cellular automaton arrows represent periodic boundary conditions. updated state shown central cell. symbols used represent neighborhood also shown. task density-classification consists correctly determining whether contain majority majority making system converge respectively state state density function arguments actions local cells limited information communication must coordinated another correctly classify ics. indeed find rules perform well challenge several algorithms used evolve better rules best rules performances discovered using coevolutionary approach ga-evolved rules however section compare performance applied difficult shown fourth column table probability success problem high despite using nine random initial configurations. worth noting uses fitness cases cleverly constructed cover various classes possible initial configurations indeed real-life applications always possible predict kind cases would make system discover solution. algorithms capable generalizing well face random fitness cases advantageous. cellular automata studied widely idealized versions massively parallel decentralized computing systems capable emergent behaviors. complex behaviors result simultaneous execution simple rules multiple local sites. density-classification task simple rule involving small neighborhood operating simultaneously cells one-dimensional cellular automaton capable making converge state initial configuration number generations population size number head length number genes chromosome length mutation rate -point recombination rate transposition rate elements length transposition rate elements length fitness evaluated unbiased case fitness function number system stabilizes correctly configuration time steps designed order privilege individuals capable correctly classifying majority thus system converged cases indiscriminately configuration fitness point attributed. cases system correctly converged either configuration addition rules converging alternated pattern eliminated easily discovered invade populations impeding discovery good rules. finally individual program could correctly classify majorities bonus equal number added number correctly classified case instance program correctly classified majority another majority receives fitness points. note ends position program accuracy tested unbiased lattice thus better rule tested lattice rule table rule shown table figure shows three space-time diagrams rule. comparison used populations individuals generations thus total fitness evaluations made whereas made fitness evaluations. therefore problem outperforms four orders magnitude another experiment rule slightly better accuracy obtained. again performance determined unbiased lattice. case obviously same. case total unbiased three-genic chromosomes sub-ets linked used. parameters used shown second column table fitness function slightly modified introducing ranking system individuals capable correctly classifying receive bonus equal correctly classified bonus correctly classified three bonus also experiment individuals capable correctly classifying kind situation although indiscriminately differentiated fitness equal table description rules discovered using density-classification problem. rule also shown. output bits given lexicographic order starting finishing figure three space-time diagrams describing evolution states rule. number shown diagram. correctly converged uniform pattern; converged wrongly uniform pattern. rule -multiplexer respectively boolean functions seven activities. whereas solution -multiplexer well-known boolean function solution rule practically unknown program evolved complicated impossible know program really does. section shows efficiently applied evolve boolean expressions several arguments. furthermore structural organization chromosomes used evolve solutions -multiplexer example figure three space-time diagrams describing evolution states rule. number shown diagram. converges respectively correct configuration could converge uniform pattern. universal solution -multiplexer. figure shows progression average fitness population fitness best individual experiment summarized table column shown fifth column table solves -multiplexer success rate worth noting could solve -multiplexer population size generations could solve using individuals details implementation gene expression programming thoroughly explained allowing researchers implement algorithm. furthermore problems chosen illustrate functioning show paradigm used solve several problems simple organization used efficiently solve certain problems. example organization successfully used evolve rules density-classification problem discovering better rules rule task -bit boolean multiplexer decode -bit binary address return value corresponding data register thus boolean -multiplexer function arguments three determine address eight determine answer. uses single-character chromosomes correspond respectively possible combinations arguments boolean -multiplexer function. problem random sampling combinations used generation fitness cases evaluating fitness. fitness cases assembled address address sub-set random combinations used generation. therefore total random fitness cases used generation adaptation environment. case fitness program number fitness cases boolean value returned correct plus bonus fitness points sub-set combinations solved correctly whole. therefore total fitness points attributed correctly decoded address maximum fitness idea make algorithm decode address time. fact individuals learn decode first address another last different fields advantage running efficiently personal computer. concept behind linear chromosomes enabled considerably outperform existing adaptive algorithms. therefore offers possibilities solving complex technological scientific problems. also important original multigenic organization chromosomes makes truly hierarchical discovery technique. finally gene expression algorithms represent nature faithfully therefore used computer models natural evolutionary processes.", "year": 2001}