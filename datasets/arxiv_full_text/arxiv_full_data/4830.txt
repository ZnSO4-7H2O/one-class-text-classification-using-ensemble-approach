{"title": "Probabilistic Relational Model Benchmark Generation", "tag": ["cs.LG", "cs.AI"], "abstract": "The validation of any database mining methodology goes through an evaluation process where benchmarks availability is essential. In this paper, we aim to randomly generate relational database benchmarks that allow to check probabilistic dependencies among the attributes. We are particularly interested in Probabilistic Relational Models (PRMs), which extend Bayesian Networks (BNs) to a relational data mining context and enable effective and robust reasoning over relational data. Even though a panoply of works have focused, separately , on the generation of random Bayesian networks and relational databases, no work has been identified for PRMs on that track. This paper provides an algorithmic approach for generating random PRMs from scratch to fill this gap. The proposed method allows to generate PRMs as well as synthetic relational data from a randomly generated relational schema and a random set of probabilistic dependencies. This can be of interest not only for machine learning researchers to evaluate their proposals in a common framework, but also for databases designers to evaluate the effectiveness of the components of a database management system.", "text": "validation database mining methodology goes evaluation process benchmarks availability essential. paper randomly generate relational database benchmarks allow check probabilistic dependencies among attributes. particularly interested probabilistic relational models extend bayesian networks relational data mining context enable eﬀective robust reasoning relational data. even though panoply works focused separately generation random bayesian networks relational databases work identiﬁed prms track. paper provides algorithmic approach generating random prms scratch gap. proposed method allows generate prms well synthetic relational data randomly generated relational schema random probabilistic dependencies. interest machine learning researchers evaluate proposals common framework also databases designers evaluate eﬀectiveness components database management system. data mining central step knowledge discovery databases. relies several research areas including statistics machine learning. usually machine learning techniques developed around data representation known propositional learning approaches. however development communication storage technologies data management practices taken aspects. data present large number dimensions several diﬀerent types entities. growing interest extracting patterns data representation relational data mining approaches emerged interest ﬁnding patterns given relational database statistical relational learning emerged area machine learning enables eﬀective robust reasoning relational data structures paper particularly interested probabilistic relational models represent relational extension bayesian networks probability model speciﬁcation concerns classes objects rather simple attributes. prms present probabilistic graphical formalism enables ﬂexible modeling complex relational interactions. prms proved applicability several areas allow minimize data preprocessing loss signiﬁcant information prms implies construction either experts applying learning algorithms order learn model existing observational relational data. prms learning involves ﬁnding graphical structure well conditional probability distributions best relational training data. evaluation learning approaches usually done using randomly generated data coming either real known networks randomly generated ones. however neither ﬁrst second available literature. moreover growing interest database community produce database benchmarks support illustrate decision support systems real-world business tasks uncertainty unmissable aspect. benchmarks designed support dsss consider task. paper propose algorithmic approach allows generate random prms scratch populate database instance. originality process allows generate synthetic relational data randomly generated relational schema random probabilistic dependencies. since prms bring together neighboring subﬁelds computer science namely machine learning database management process useful domains. imperative statistical relational learning researchers evaluate eﬀectiveness learning approaches. hand interest database designers evaluate eﬀectiveness database management system components. allows generate various relational schemas simple complex ones populate database tables huge number tuples derived underlying probability distributions deﬁned neville jensen term ‘relational bayesian network’ refer bayesian networks extended model relational databases term ‘prm’ general sense distinguish family probabilistic graphical models interested extracting statistical patterns relational models. paper preserve term used bayesian networks directed acyclic graphs allowing eﬃciently encode manipulate probability distributions high-dimensional spaces. formally deﬁned follows several approaches proposed learn data evaluation learning algorithms requires either known networks random generation process. former allows sample data perform learning using data order recover initial gold standard net. latter allows generate synthetic data order provide large number possible models carry experimentation varying models simple complex ones. random bayesian networks generation comes provide graph structure parameters. statnikov proposed algorithmic approach generate arbitrarily large tiling smaller real-world known networks. complexity ﬁnal model controlled number tiling connectivity parameter determines maximum number connections node next tile. works devoted generation synthetic networks without guarantee every allowed graph produced uniform probability authors proposed approach called pmmixed algorithm allows generation uniformly distributed bayesian networks using markov chains. using algorithm constraints generated nets added relative ease constraints nodes degree maximum number dependencies graph etc. structure generated easy construct complete bayesian network randomly generating associated probability distributions sampling either uniform dirichlet distributions. ﬁnal standard sampling method forward sampling used generate observational data. manner data organized database depends chosen database model. relational model commonly used represents basis large scale knowledge representation systems formally relational representation deﬁned follows relation possibly foreign attributes foreign attribute ﬁeld points ﬁeld another relation called referenced relation. associated constraint referential constraint. chain constraints constitutes referential path. referential path relation found called referential cycle. relation headings constraints described relational schema usually interaction relational database ensured specifying queries using structured query language part speciﬁc operators extract signiﬁcant meaning aggregators. aggregation function takes multi-set values ground type returns summary requests need cross long reference paths possible back forth. composed slots deﬁne functions objects ones indirectly related. call composition slots slot chain call slot chain single-valued crossed reference slots cardinality determining data distribution generating loading components database system test. several propositions developed context. main issue provide large number records using known distributions order able evaluate system results research known benchmarks used ultimate goal generate large dataset nowadays several software tools available populate database instances knowing relational schema structure. records generated basis input considering attributes probabilistically independent relevant benchmarks used evaluate decision support systems. transaction processing performance council organization provides tpc-ds benchmark designed suitable real-world business tasks characterized analysis huge amount data. tpc-ds schema models sales sales returns process organization. tpc-ds provides tools generate either data sets query sets benchmark. nevertheless uncertainty management stays prominent challenge provide better rational decision making. probabilistic relational models extension relational context. bring together strengths probabilistic graphical models relational presentation. formally deﬁned follows meta-model used describe overall behavior system. perform probabilistic inference model instantiated. instance contains class objects involved system relations hold structure known relational skeleton deﬁnition relational skeleton relational schema partial speciﬁcation instance schema. speciﬁes objects class relations hold objects. however leaves values attributes unspeciﬁed. node every attribute every object x.a. depends probabilistically parents form x.k.b instance deﬁned prm. single-valued parent aggregate computed random variables {y|y x.k} attribute ote.rating reference slots ote.u ote.m ovie. ote.u relates objects class objects class ser. dotted links presents reference slots. example slot chain would friedman proposed relational greedy hill-climbing search algorithm. applied greedy search procedure explore space structures allowing increasingly large slot chains. structures generated using edge delete edge reverse edge operators aggregation functions needed score function used relational extension bayesian dirichlet score expressed follows standard evaluating eﬀectiveness proposed approaches needed. however neither relational benchmarks general random generation process available. random probabilistic relational models generation established order evaluate proposed learning approaches common framework. used predeﬁned schema generated number dependencies varying conditional probability tables attributes dirichlet distribution. authors generated relational synthetic data perform experimentation. generation process based particular family relational schemas straints. schema fully connected tree structure. torti proposed slightly diﬀerent representation prms developed basis object-oriented framework expert knowledge. main issue probabilistic inference rather learning. experimental studies randomly generated prms using layer pattern. architecture pattern imposes particular order searching connections classes generating reference slots relational schema also creating relational skeleton. indication made generation probabilistic dependencies attributes. addition interested neither populating relational database communicating database management system. lack famous prms literature paper proposes synthetic approach randomly generate probabilistic relational models scratch randomly instantiate populate relational databases. best knowledge addressed. working relational variety bayesian networks generation process inspired classical methods generation random respecting relational domain representation. generated using generate relational schema function. then graph dependency structure generated using generate dependency structure determine slot chains functions ﬁnally conditional probability tables generated generate function bayesian networks first relational skeleton generated using generate relational skeleton function then using create function ground bayesian network generated generated generated relational skeleton. relational schema generation process depicted algorithm generate relational schema given number classes contain referential cycles also respects relational model deﬁnition presented section apply concepts graph theory random schema generation. associate issue structure generation process nodes represent relations assumption allows browse classes order discover probabilistic dependencies later traduced searching structures containing single connected component cies class generate primary attribute using generate rimary function. then randomly generate number attributes associated domains using generate attributes relational schemas suﬃcient generate databases attributes independent. need randomly generate probabilistic dependencies attributes classes schema. especially focus random generation dependency structure. latter identiﬁed conditional probability distributions sampled similar standard parameter generation. descriptive attribute connected another diﬀerent possible slot chains. theoretically number slot chains inﬁnite. practice user-deﬁned maximum slot chain length kmax speciﬁed identify horizon possible slot chains. addition kmax value least equal order neglect potential dependencies annotated express slot chain dependency detected. dependencies following steps. first oriented edges dependency structure keeping structure. identify variable dependency drawn random choice legal slot chain related dependency. structure identiﬁcation presented algorithm idea node parents class classes promoting intra-class dependencies order control ﬁnal model complexity discussed condition promotes discovery intra-class dependencies coming short slot chains. longer slot chain lower chance ﬁnding probabilistic dependency slot chain. follow condition classes propose construct separated sub-dags built attributes corresponding class using generate function. then construct super-dag previously constructed sub-dags. stage super-dag contains disconnected components idea inter-class dependencies manner connect disconnected components keeping global structure. inter-class dependencies constrain choice adding dependencies among variables belong class. attribute generate super function chooses randomly step take consideration variable reached diﬀerent slot chains dependency descriptive attributes depend chosen one. following generation process give priority shorter slot chains selection. consequently used penalization term discussed longer indirect slot chains penalized probability occurrence probabilistic dependency slot chain length inversely proportional expl. relational schema using generate otential slot chains function. then create vector probability occurrence slot chain length number slot chains length slot chains list. value rapidly decrease value increases allows reduce probability selecting long slot chains. sample slot chain slot chains list following using draw function. chosen slot chain implies aggregator choose randomly list existing ones using random choice function. slot chain determination depicted algorithm simplifying slot chains. ﬁnding slot chains duplicate slot chains might encountered. ’duplicate’ mean slot chains produce result. example schema ﬁgure ote.u empty slot chain slot chain results target movie object. duplicates found pick shorter avoid redundant unnecessary computations. improvement previous work simpliﬁcation slot chains considered. apply following rule simplify slot chains. slot chain represented sequence reference slots inverse slot chain simpliﬁed eliminating last slots. simpliﬁed slot chain would then ρ.ρ. .ρn−.ρn−. done repetitively simpliﬁcation possible. generated schema together added probabilistic dependencies generated parameters results probabilistic relational model. instantiate latter need generate relational skeleton. then fully determined relational skeleton cpds already present meta-level. relational skeleton imagined nodes objects diﬀerent classes present associated relational schema edges directed object another conforming reference slots present relational schema. graph fact special case k-partite graph deﬁnition regard relational skeleton generation process considered problem generating objects assigning links resulting graph k-partite graph deﬁnition previous work presented algorithm generate relational skeleton generates nearly number objects class iteratively adds random edges objects pair classes direction edges conform underlying schema. approach fact create realistic skeleton real world relational skeleton tends scale-free i.e. degree vertices graph follows power law. hence real datasets number objects classes foreign keys tend high compared classes foreign keys referenced classes. thus took diﬀerent approach generate relational skeleton. improved approach generating k-partite graph presented algorithm adapt directed scale-free graph generation algorithm special k-partite graph chinese restaurant process apply preferential attachment. basic idea iteratively generate object class parents relational schema recursively edge object objects children classes. process essentially depth ﬁrst search begin generating object root node graph encounter node edge object parent node either existing object encountered node. object parent node gets selected total number objects generated far. thus skeleton graph grows probability getting connected objects decrease objects higher indegree preferred adding edges. iteration performed starting nodes without parents relational schema dag. thus subgraphs picked randomly %i.e. root objroot object root nroot nroot children children root generate subskeleton %perform depth-ﬁrst search edges recursively objc create object type %add edge objp objc {epc} childrenc children graph generate subskeleton objc existing object type picked randomly probability indegree objc %add edge objp objc {epc} iteration. beginning iteration nodes without parents picked randomly latter case. iteration process continued skeleton contains required number objects. process equivalent generating data bayesian network. generate many relational database instances needed sampling constructed gbn. speciﬁcity generated tuples sampled functional dependencies also probabilistic dependencies provided randomly generated prm. relational schema generation. figure presents result running algorithm classes. class primary added number attributes generated randomly together possible states attribute using policies described section finally foreign attributes speciﬁed following figure example generated relational schema dotted lines represent referential constraints generated dependency structure arrows represent probabilistic dependencies. here excluded slot chains overload ﬁgure. details slot chains probabilistic dependencies detected given paragraph generation. performed phases. start constructing structure result phase figure then maximum slot chain length kmax randomly determine slot chain dependency detected. kmax result phase gives rise graph dependency structure figure contains intra-class creation. generated follow steps presented section create populate instance. create relational skeleton relational schema performing depth ﬁrst search schema ﬁrst three iterations shown ﬁgures schema node without parent complete returns objects class shown ﬁgure iteration obtain diﬀerent number objects. ﬁgure ﬁrst iteration created objects whereas second third iteration resulted four objects respectively. continue iteration obtain required number objects skeleton. instantiate probabilistic model generated previous step generation skeleton obtain ground bayesian network. sampling enables populate values attributes objects relational skeleton. example generated random dataset objects. corresponding schema diagram shown ﬁgure also shows number objects class. diagram generated using schemaspy. figure generating objects performing depth first search relational schema. ﬁgure shows iteration performed schema ﬁgure sub-ﬁgures above upper graph concerned relational schema lower graph relational skeleton generated. node encountered step shown thick lines. colors used visual distinguish objects diﬀerent classes signiﬁcant meaning process. begin creating object node ‘class’ parent. then traverse children node schema object class object created. continuing encounter node ‘class’ ‘class’ like earlier objects ‘class’ ‘class’ generated. ‘class’ child reach ‘class’. step object ‘class’ already present. object ‘class’ either create object connected ‘class’. example gets linked object ‘class’. next step ‘class’ encountered child ‘class’. here ‘class’ gets attached existing object ‘class’. createsonlytwoobjects. skeletonaftertheﬁrstiterationhasﬁveobjects.theseconditerationcreatesfournewobjectswhereasthethirditeration theobjectwillthenbelinkedtoanexistingobjectoranewoneandthesamethinggoesonforthenewobjects.herethe relationalskeletongraph.ateachiterationanewobjectof‘class’willalwaysbegeneratedasitdoesnothaveanyparent. figurenexttwoiterationsofdfsontherelationalschemaofﬁgurefollowingtheﬁrstiterationofﬁguretogenerate proposed algorithms implemented pilgrim software platform actively developing provide eﬃcient tool deal several probabilistic graphical models developed pilgrim uses boost graph library manage graphs probt manipulate objects database template library communicate databases. currently postgresql rdbms supported platform. besides algorithms also implemented serialization prms. currently formalization prms propose enhanced version syntax probmodelxml speciﬁcation serialize generated models. added tags specify http//pilgrim.univ-nantes.fr/ http//www.boost.org/ http//www.probayes.com/fr/bayesian-programming-book/downloads/ http//dtemplatelib.sourceforge.net/dtl introduction.htm http//www.cisiad.uned.es/techreports/probmodelxml.pdf policy generating relational schema structure. randomly generate relational schema structure pmmixed algorithm generates uniformly distributed dags dags space. structure generated algorithm disconnected graph whereas need structure containing single connected component. preserve condition together interest generating uniformly distributed examples follow rejection sampling technique. idea generate following pmmixed principle contains connected component accepted otherwise rejected. repeat steps generating structure satisfying condition. policies generating dependency structure. follow pmmixed principle construct structure inside class. then order inter-class dependencies modiﬁed version pmmixed algorithm constrain choice adding dependencies among variables belong class. complexity relational schema generation process. algorithm structured three loops. namely expensive ﬁrst loop dedicated structure construction uses pmmixed algorithm. time complexity pmmixed algorithm complexity slot chains determination process. expensive operation algorithm generate otential slot chains method. latter explores recursively relational schema graph complexity relational skeleton generation process. relational skeleton generation algorithm basically iteration depth ﬁrst search relational schema. thus complexity algorithm developed process allows randomly generate probabilistic relational models instantiate populate relational database. generated relational data sampled functional dependencies relational schema also probabilistic dependencies present prm. process generally used data mining methods probabilistic generative model allowing randomly generated relational data. moreover enriched test query components help database designers evaluate eﬀectiveness rdbms components.", "year": 2016}