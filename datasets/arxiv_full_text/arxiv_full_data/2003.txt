{"title": "Machine learning approximation algorithms for high-dimensional fully  nonlinear partial differential equations and second-order backward stochastic  differential equations", "tag": ["math.NA", "cs.LG", "cs.NE", "math.PR", "stat.ML", "65C99, 65M99, 60H30, 65-05"], "abstract": "High-dimensional partial differential equations (PDE) appear in a number of models from the financial industry, such as in derivative pricing models, credit valuation adjustment (CVA) models, or portfolio optimization models. The PDEs in such applications are high-dimensional as the dimension corresponds to the number of financial assets in a portfolio. Moreover, such PDEs are often fully nonlinear due to the need to incorporate certain nonlinear phenomena in the model such as default risks, transaction costs, volatility uncertainty (Knightian uncertainty), or trading constraints in the model. Such high-dimensional fully nonlinear PDEs are exceedingly difficult to solve as the computational effort for standard approximation methods grows exponentially with the dimension. In this work we propose a new method for solving high-dimensional fully nonlinear second-order PDEs. Our method can in particular be used to sample from high-dimensional nonlinear expectations. The method is based on (i) a connection between fully nonlinear second-order PDEs and second-order backward stochastic differential equations (2BSDEs), (ii) a merged formulation of the PDE and the 2BSDE problem, (iii) a temporal forward discretization of the 2BSDE and a spatial approximation via deep neural nets, and (iv) a stochastic gradient descent-type optimization procedure. Numerical results obtained using ${\\rm T{\\small ENSOR}F{\\small LOW}}$ in ${\\rm P{\\small YTHON}}$ illustrate the efficiency and the accuracy of the method in the cases of a $100$-dimensional Black-Scholes-Barenblatt equation, a $100$-dimensional Hamilton-Jacobi-Bellman equation, and a nonlinear expectation of a $ 100 $-dimensional $ G $-Brownian motion.", "text": "high-dimensional partial diﬀerential equations appear number models ﬁnancial industry derivative pricing models credit valuation adjustment models portfolio optimization models. pdes applications high-dimensional dimension corresponds number ﬁnancial assets portfolio. moreover pdes often fully nonlinear need incorporate certain nonlinear phenomena model default risks transaction costs volatility uncertainty trading constraints model. high-dimensional fully nonlinear pdes exceedingly diﬃcult solve computational eﬀort standard approximation methods grows exponentially dimension. work propose method solving high-dimensional fully nonlinear second-order pdes. method particular used sample high-dimensional nonlinear expectations. method based connection fully nonlinear second-order pdes second-order backward stochastic diﬀerential equations merged formulation bsde problem temporal forward discretization bsde spatial approximation deep neural nets stochastic gradient descent-type optimization procedure. numerical results obtained using tensorflow python illustrate eﬃciency accuracy method cases -dimensional black-scholes-barenblatt equation fully nonlinear second-order pdes connection fully nonlinear second-order pdes bsdes merged formulation bsde forward-discretization merged pde-bsde system deep learning approximations stochastic gradient descent-type optimization framework algorithm speciﬁc case fully nonlinear second-order pdes connection fully nonlinear second-order pdes bsdes merged formulation bsde forward-discretization merged pde-bsde system deep learning approximations stochastic gradient descent-type optimization framework algorithm general case allen-cahn equation plain gradient descent batch normalization setting deep bsde method batch normalization adam -dimensional black-scholes-barenblatt equation -dimensional hamilton-jacobi-bellman equation -dimensional allen-cahn equation g-brownian motions space-dimensions python code deep bsde method used subsection matlab code branching diﬀusion method used subsection python code deep bsde method used subsection matlab code classical monte carlo method used subsection matlab code ﬁnite diﬀerences method used subsection partial diﬀerential equations play important role abundance models ﬁnance physics. objects wave function associated quantum physical system value function describing fair price ﬁnancial derivative pricing model value function describing expected maximal utility portfolio optimization problem often given solutions nonlinear pdes. roughly speaking nonlinearities mentioned pdes ﬁnancial engineering applications appear certain nonlinear eﬀects trading portfolio e.g. derivative pricing models diﬀerent interest rates borrowing lending e.g. derivative pricing models incorporating default risk issuer ﬁnancial derivative e.g. models pricing ﬁnancial derivatives untradable underlyings ﬁnancial derivatives temperature mortality-dependent ﬁnancial derivatives e.g. models incorporating trading strategy inﬂuences price processes though demand supply e.g. models taking transaction costs trading portfolio account e.g. models incorporating uncertainties model parameters underlyings pdes emerging models often high-dimensional associated trading portfolios frequently contain whole basket ﬁnancial assets high-dimensional nonlinear pdes typically exceedingly diﬃcult solve approximatively. nonetheless strong demand ﬁnancial engineering industry approximatively compute solutions high-dimensional nonlinear parabolic pdes mentioned practical relevance pdes. number numerical methods solving nonlinear parabolic pdes approximatively literature. methods deterministic approximation methods others random approximation methods rely suitable probabilistic representations corresponding solutions probabilistic representations based backward stochastic diﬀerential equations probabilistic representations based second-order backward stochastic diﬀerential equations probabilistic representations based branching diﬀusions probabilistic representations based extensions classical feynman-kac formula refer e.g. deterministic approximation methods pdes probabilistic approximation methods pdes based temporal discretizations bsdes probabilistic approximation methods pdes based suitable deep learning approximations bsdes probabilistic approximation methods bsdes based sparse grid approximations probabilistic approximation methods bsdes based wiener chaos expansions probabilistic approximation methods pdes based temporal discretization bsdes probabilistic approximation methods pdes based branching diﬀusion representations probabilistic approximation methods based extensions classical feynman-kac formula. named approximation methods however applicable case pde/bsde dimension rather small work exclusively case serious restrictions parameters type considered numerical solution high-dimensional nonlinear thus remains exceedingly diﬃcult task limited number situations practical algorithms high-dimensional pdes developed particular best knowledge moment exists practical algorithm high-dimensional fully nonlinear parabolic pdes scientiﬁc literature. work intend overcome diﬃculty propose algorithm solving fully-nonlinear pdes nonlinear second-order backward stochastic diﬀerential equations bsdes. method particular used sample shige peng’s nonlinear expectation high space-dimensions proposed algorithm exploits connection pdes bsdes obtain merged formulation bsde whose solution approximated combining time-discretization neural network based deep learning procedure roughly speaking merged formulation allows formulate original problem learning problem. random loss function deep neural network algorithm loosely speaking given error prescribed terminal condition bsde neural network based forward time discretization bsde. related deep learning approximation algorithm pdes semilinear type based forward bsdes recently proposed diﬀerence present work rely connection fully nonlinear pdes bsdes given cheridito rely nowadays almost classical connection pdes bsdes reason remainder article organized follows. section derive formulate special case algorithm proposed work. section proposed algorithm derived formulated general case. core idea apparent simpliﬁed framework subsection general framework subsection turn allows employing sophisticated machine learning techniques section present numerical results proposed algorithm case several high-dimensional pdes. subsection proposed algorithm simpliﬁed framework subsection employed approximatively calculate solution -dimensional allen-cahn equation. subsections proposed algorithm general framework subsection used approximatively calculate solution -dimensional blackscholes-barenblatt equation solution -dimensional hamilton-jacobi-bellman equation solution -dimensional allen-cahn equation nonlinear expectations g-brownian motions space-dimensions. python implementations algorithms provided section subsections explain main idea behind algorithm proposed work refer deep bsde method. done expense rather sketchy derivation description. precise general deﬁnitions deep bsde method found sections below. nutshell main ingredients deep bsde method general algorithm. moreover deep bsde method easily extended case systems fully nonlinear second-order parabolic pdes order keep notational complexity possible restrict ourself scalar case work above). note formulated terminal value problem. chose terminal value problem formulation literature common initial value problem formulation because hand terminal value problem formulation seems natural connection second-order bsdes because hand terminal value problem formulation shows naturally ﬁnancial engineering applications like black-scholes-barenblatt equation derivative pricing clearly terminal value problems transformed initial value problems vice versa; e.g. remark below. probability space standard brownian motion continuous sample paths normal ﬁltration generated rd×d f-adapted stochastic processes continuous sample paths satisfy holds p-a.s. functions provide artiﬁcal neural networks layers rectiﬁer functions activation functions functions also provide artiﬁcial neural networks layers rectiﬁer functions activation functions subsection describe deep bsde method speciﬁc case consideration standard euler-maruyama scheme employed approximation scheme discretizing plain stochastic gradient descent constant learning rate deep bsde method allows incorporate sophisticated machine learning approximation techniques batch normalization adam optimizer found subsection below. framework ×rd×r×rd×rd×d functions probability space independent standard brownian motions real numbers every rd×d functions every stochastic processes satisfy satisfy tnrd framework random variable appropriate approximation local minimum point expected loss function think case suﬃciently large suﬃciently small framework random variable appropriate approximation value polynomially growing continuous function satisﬁes u|×rd subsection implementation framework employed calculate numerical approximations allen-cahn equation space-dimensions subsection numerical approximations allen-cahn equation space-dimensions calculated means algorithm general setting framework below. section extend generalize approximation scheme derived presented section core idea approximation scheme section remains section contrast section section background dynamics approximation scheme general itˆo process brownian motion contrast section section approximation scheme employ sophisticated machine learning techniques probability space standard brownian motion normal ﬁltration generated f/b-measurable function f-adapted stochastic process continuous sample paths satisﬁes holds p-a.s. tions subsection rd×d continuous functions probability space standard brownian motion normal ﬁltration generated f/b-measurable function f-adapted stochastic process continuous sample paths satisﬁes holds p-a.s. subsection provide general framework covers deep bsde method derived subsections .–.. variant deep bsde method described subsection still remains core idea framework however framework allows general itˆo processes background dynamics below) brownian motion framework allows incorporate minimization algorithms e.g. jentzen adam optimizer below) plain vanilla stochastic gradient descent method framework subsection above) framework allows deploy sophisticated machine learning techniques like batch normalization below). section illustrate general description framework several examples. framework rd×d functions ﬁltered probability space independent standard t∈-brownian motions i.i.d. f/b-measurable functions real numbers rd×d functions every functions every stochastic process satisﬁes section employ deep bsde method approximate solutions several example pdes allen-cahn equations hamilton-jacobi-bellman equation black-scholes-barenblatt equation nonlinear expectations g-brownian motions. speciﬁcally subsection employ implementation deep bsde method framework approximate -dimensional allen-cahn equation subsection employ implementation deep bsde method framework approximate -dimensional black-scholes-barenblatt equation subsection employ implementation deep bsde method framework approximate -dimensional hamilton-jacobibellman equation subsection employ implementation deep bsde method framework approximate -dimensional allen-cahn equation subsection employ implementations deep bsde method framework approximate nonlinear expectations g-brownian motions space-dimensions. python code used implementation deep bsde method subsection found subsection below. python code used implementation deep bsde method subsection found subsection below. numerical experiments presented performed python using tensorflow tensorflow respectively lenovo carbon gigahertz intel microprocessor megabytes ram. table python code subsection approximatively calculate mean relative l-approximation error associated uncorrected sample standard deviation relative approximation error associated mean loss function associated standard deviation loss function associated average runtime seconds needed based calculating realization independent realizations table numerical simulations deepbsde method framework case -dimensional allen-cahn equation approximative calculations relative l-approximation errors value replaced value calculated branching diﬀusion method error approximations mean loss function associated based independent realizations approximation errors table figure value solution replaced value which turn calculated branching diﬀusion method remark equations describe adam optimizer; kingma lines python code subsection below. default choice tensorflow real number according comments adam.py tensorflow situations choices appropriate. subsection took whereas used default value subsections table numerical simulations deepbsde method framework case -dimensional black-scholes-barenblatt equation approximative calculations relative l-approximation errors value replaced value calculated means lemma table python code subsection approximatively calculate mean standard deviation relative l-approximation error associated uncorrected sample standard deviation relative approximation error associated mean empirical loss function associated standard deviation empirical loss function associated associated based independent realizations approximative calculations relative l-approximation errors table figure value solution replaced value which turn calculated means lemma below. subsection deep bsde method framework approximatively calculate solution -dimensional hamilton-jacobi-bellman equation nonlinearity quadratic gradient below). table adapted version python code subsection approximatively calculate mean standard deviation relative l-approximation error associated uncorrected sample standard deviation relative approximation error associated mean empirical loss function associated standard deviation empirical loss function associated average runtime seconds needed calculating realization based independent realizations calculation relative l-approximation errors table figure value solution replaced value which turn calculated means lemma approximative calculations relative l-approximation errors value replaced value calculated means classical monte carlo method table numerical simulations deepbsde method framework case -dimensional allen-cahn equation approximative calculations relative l-approximation errors value replaced value calculated branching diﬀusion method table adapted version python code subsection approximatively calculate mean standard deviation relative l-approximation error associated uncorrected sample standard deviation relative approximation error associated mean empirical loss function associated standard deviation empirical loss function associated average runtime seconds needed calculating realization based independent realizations addition figure depicts approximations relative lapproximation error approximations mean empirical loss function asindependent runs). approximate calculations relative l-approximation errors table figure value solution replaced value which turn calculated branching diﬀusion method subsection deep bsde method framework approximatively calculate nonlinear expectations test function -dimensional g-brownian motion test function -dimensional g-brownian motion. case dimensional g-brownian motion consider speciﬁc test function nonlinear expectation function -dimensional g-brownian motion admits explicit analytic solution case -dimension g-brownian motion compare numerical results deep bsde method numerical results obtained ﬁnite diﬀerence approximation method. table numerical simulations deepbsde method framework case -dimensional g-brownian motion approximative calculations relative l-approximation errors value replaced value calculated means lemma table adapted version python code approximatively calculate mean standard deviation relative l-approximation error associated uncorrected sample standard deviation relative approximation error associated mean empirical loss function associated standard deviation empirical loss function associated average runtime seconds needed calculating realization based realizations case holds addition figure depicts approximations relative l-approximation error associated approximations mean empirical loss function associated based independent realizations case approximative calculations relative l-approximation errors table figure value solution replaced value which turn calculated means lemma table adapted version python code subsection approximatively calculate mean standard deviation relative l-approximation error associated uncorrected sample standard deviation relative approximation error associated mean empirical loss function associated standard deviation empirical loss function associated average runtime seconds needed calculating realization based realizations case holds", "year": 2017}