{"title": "A new approach to content-based file type detection", "tag": ["cs.LG", "cs.AI", "94Axx", "H.3.2; I.5.1; I.2.6; E.5; I.7; C.2; F.1; D.4.3"], "abstract": "File type identification and file type clustering may be difficult tasks that have an increasingly importance in the field of computer and network security. Classical methods of file type detection including considering file extensions and magic bytes can be easily spoofed. Content-based file type detection is a newer way that is taken into account recently. In this paper, a new content-based method for the purpose of file type detection and file type clustering is proposed that is based on the PCA and neural networks. The proposed method has a good accuracy and is fast enough.", "text": "file type identification file type clustering difficult tasks increasingly importance field computer network security. classical methods file type detection including considering file extensions magic bytes easily spoofed. content-based file type detection newer taken account recently. paper content-based method purpose file type detection file type clustering proposed based neural networks. proposed method good accuracy fast enough. introduced three introductory algorithms frequency content-based analysis byte frequency cross-correlation file header/trailer analysis. deployed algorithms whole content sample files produce fingerprint file type. performed mcdaniel heydari's method improve accuracy. improvements using multi-centroids file types truncating sample files beginning instead using file contents using kmeans algorithm manhattan distance produce fileprints deploying mahalanobis distance comparison samples fileprints. dunham deployed neural networks classify file types stream ciphers depth i.e. files encrypted key. used byte frequency byte frequency autocorrelation bytes header selected features test samples. karresand shahmehri used mean standard deviation byte frequency distribution model file types. method based data fragments files need metadata. zhang used conjunction simple manhattan distance comparison detect whether examined file executable not. paper content-based file type detection principal method component analysis unsupervised neural networks automatic feature extraction. paper organized follows. section introduces file type detection methods. section briefly describes concept unsupervised neural networks. proposed method presented section simulation results given section section provides conclusions. everyday increasing importance privacy security wise computational resources corresponding technologies increasingly faced type detection. true identification computer file types difficult task especially dealing suspicious goals. computers dealing huge number file formats transmitting insider outsider networks. without true file type detection security achievable. file type detection usage importance proper functionality operating systems firewalls intrusion detection systems anti-viruses filters steganalysis computer forensics applications dealing file type classification although many applications dealing file type detection limited methods determining true type files. newest method file type detection based file contents. mcdaniel heydari published first paper content-based file type detection copyright ieee. reprinted proceedings ieee symposium computers communications july material posted permission ieee. internal personal material permitted. however permission reprint/republish material advertising promotional purposes creating collective works resale redistribution must obtained ieee writing pubspermissionsieee.org. corresponding author researcherid techniques. research area determine spoofed file types. reveal malicious file types contents match claimed types. based byte values inside different computer files. computer byte consists eight bits accept different values varying file simply found reading contents file counting number times byte value occurs. believed different files type characteristics extracted used file type detection. approach several sample files type given fileprint something similar fingerprint produced sample files. whenever unknown file examined fileprint produced process compared collection previously produced fileprints. produce fileprint features file type selected extracted. methods used feature extraction. original principle file contents manipulate statistical features. statistical measurements together form model chosen file type sometimes called centroid. also possible produce several centroids file type centroids compared unknown sample file data fragment distance sample centroids calculated. distance lower predefined threshold examined file categorized file type centroid represents. problem optimally selecting statistical features known feature selection feature extraction. feature extraction creates smaller features linear nonlinear combinations original features feature selection chooses subset original features. feature selection transforms data space feature space theoretically dimension original data space. transformation practically designed reduced number effective features represent data retaining intrinsic information content data. reduction dimension input space generally accompanied information. goal dimensionality reduction preserve relevant information much possible. section concepts unsupervised neural networks feature extraction briefly described. identification file format tedious task. catalogues containing several thousand known file types without global standard file types. file type detection methods categorized three kinds extension-based magic bytes-based content-based methods strengths weaknesses none comprehensive foolproof enough satisfy requirements. fastest easiest method file type detection extension-based method. microsoft’s operating systems approach almost exclusively. file types least windows-based systems generally accompanied extension. approach applied binary text files. need open files fastest classify files. however great vulnerability easily spoofed simple file renaming. second method file type detection devoted binary files based magic bytes. magic bytes predefined signatures header trailer binary files. file header first portion computer file contains metadata. metadata background information describes content quality condition appropriate characteristics data. file header contains necessary information corresponding application recognize understand file. magic bytes include extra information regarding tool tool’s version used produce file. checking magic bytes file little slower checking extension since file opened magic bytes read. magic bytes method taken many unix-based operating systems. however drawbacks magic bytes used file types. work binary files enforced regulated aspect file types. vary length different file types always give specific answer. several thousands file types magic bytes defined multiple lists magic bytes completely consistent. since standard file contain creators file type usually include something uniquely identify file types. programs program developers never magic bytes beginning file types. approach also spoofed. altering magic bytes file disturb functionality defeat true file type detection. third method file type detection consider file contents using statistical modeling network unique minimum hidden layer maps input d-dimensional space onto output k-dimensional subspace. procedure equivalent linear much better compression obtained exploiting cybenko theorem states three-layer neural network input neurons nonlinear transfer functions second layer linear transfer functions third layer neurons approximate continuous function arbitrary accuracy. true provided number neurons second layer sufficiently large. construct structure order compress information three-layer needed. since target network specific another required cascade network expand compressed data make approximation input. case five-layer formed desired outputs inputs. figure illustrates architecture feed-forward auto-associative neural network five layers. outputs third layer compressed data called nonlinear principal components viewed nonlinear generalization principal components. first step using neural network training phase back-propagation algorithm used. implementation algorithm distinct passes computation distinguished. former referred forward pass latter backward pass. forward pass synaptic weights remain unaltered throughout network function signals network computed neuron-by-neuron basis. backward pass hand starts output layer passing error signals leftward network layer-by-layer manner. weights biases updated iteratively minimized output approximates input closely possible. well-known feature extraction technique multivariate analysis. orthogonal transformation coordinate data described. small number principle components usually sufficient account structure represents ddata. dimensional dataset. tries find lower dimensional subspace describe original dataset preserving information much possible k-dimensional dataset produced smaller orthogonal basis feature space defined eigenvectors total class scattering matrix first vectors subtracting computing mean mean value. total class scattering matrix covariance matrix calculated founded. eigenvectors eigenvalues eigenvectors largest eigenvalues retained input vectors projected onto eigenvectors give components k-dimensional transformed vectors space. projection results vector containing coefficients vectors represented linear combination eigenvectors dimensionality reduction error evaluated experiments concentrated file types .doc .pdf .exe .jpg .htm .gif common file types internet. test files used experiments collected internet using general search google website. example .doc files collected google search engine using search term .doc. test files considered randomly chosen samples since captured wild. case .doc .pdf .htm files sample files language-dependent tried collect files different languages give randomization make results languageindependent. sizes sample files completely random. make results worse show results obtained worst situations. done every thing bother situations obtained results results worst situation actual results better results presented here. collected files type used files training remained files testing results. initial features normalized bfd. reduces number figure shows introduced features error variety number selected computer files used contentbased file type detection. however multiplicity features causes fall dawn speed accuracy recognition. hence feature extraction method needed make dataset smaller dimensions. fast procedure poor compared nonlinear mapping methods. hand using auto-associative neural network nonlinear functions good performance. however computational load risk trapped local minima reduce efficiency. solve problems hierarchical feature extraction method serves auto-associative neural network order simultaneously improve speed accuracy. training phase normalizing dataset obtained projection matrix calculated. covariance matrix training dataset firstly calculated explained section corresponding eigenvectors largest eigenvalues selected construct specified according projection matrix. value allowable error determined output features autoassociative neural network architecture previously described. number neurons first number neurons fifth layers equal third layer referred bottleneck layer equal features used file type detection classification step. neural network trained using back-propagation algorithm desired outputs inputs. detection phase trained hierarchical feature extraction system consists autoassociative neural network provides extracted features normalized examined files. effective feature extraction classifier used file type detection used another three layer detecting file type. figure shows flowchart detection phase. although feature extraction classification processes performed using above-mentioned strategy enhances learning rate networks makes turnover surveying easy. number neurons input layers equals number classes output layers. training phase neural networks problem trapping local minima avoided introducing small disturbances weights epoch evaluating checking results whereby step size learning rate controlled. noteworthy file headers file extensions method completely dependent whole contents files proposed method work case data fragments. results compared results file type identification data fragments basic correct detection rate improved using conventional method features. indicates case introduced error deduced procedure different values optimum choice establish good trade-off accuracy computational costs. -layer auto-associative neural network neurons bottleneck layer trained extract effective features selected features selected pca. reached try-and-error experiment actually used features produce fileprint file type. illustrate effectiveness feature extraction figures illustrates three-dimensional scatter plots auto-associated neural network three neurons bottleneck layer respectively. words figures obtained using three selected features respectively. used another supervised -layer type detection using extracted features bfd. neural network neurons hidden layer trained back-propagation algorithm. since features original features used fileprint file type detection speed fast. remained files class used system test. hierarchical feature extraction system classified -layer neural network. table shows resulted confusion matrix. indicates files types .doc .htm .jpg .pdf correctly detected. files .exe class file .gif class incorrectly detected .pdf. total correct classification rate excellent result compared results results simple average accuracy rate obtained considering five file types results obtained considering file types. detect file type even file header changed corrupted. total correct classification rate obtained considering whole contents files without file size specific. proposed method optimized taking several approaches. accuracy improved taking multicentroid models dealing huge number file types. truncation also improve accuracy speed make method header-dependent. file size categorization also improve accuracy. consider viewpoints future papers. mcdaniel m.h. heydari content based file type detection algorithms proceedings ieee annual hawaii international conference system science jan. wang s.j. stolfo herzog fileprints identifying file types n-gram analysis proceedings ieee systems cybernetics information assurance workshop pp.- june j.g. dunham m.t. j.c.r. tseng classifying file type stream ciphers depth using neural networks acs/ieee international conference computer systems applications jan. zhang g.b. white approach detect executable content anomaly based network intrusion detection ieee parallel distributed processing symposium pp.- march proposed method based whole contents files influence file headers positions data fragments files. cannot spoofed changing file header. works even file header corrupted. invulnerable file scrambling i.e. cannot spoofed mixing changing positions data fragments. care file extensions extension spoofing cannot take place. although concentrated file types proposed method also used types. case confusion among examined files great interclass clustering confused files performed. words files assumed kinds classifier detects them corresponded file type declared. multi-centroid approach. correct classification rate obtained worst situation. considered whole contents files truncation could make results header-dependent. categorize downloaded sample files according sizes. file sizes varying bytes care problem sample bias literatures tried prevent file size categorizing examined files. actual results better results presented here. table shows variation range file sizes among downloaded sample files type. content-based file type detection method introduced paper uses unsupervised neural networks automatic feature extraction. fileprint file type obtained according extracted features. unknown file examined fileprint produced compared prior produced fileprints. proposed method good accuracy fast enough deployed realtime applications. completely header-independent uses whole contents files. depend positions data fragments files", "year": 2010}