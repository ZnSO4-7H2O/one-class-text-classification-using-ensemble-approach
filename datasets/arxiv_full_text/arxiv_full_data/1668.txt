{"title": "Rasa: Open Source Language Understanding and Dialogue Management", "tag": ["cs.CL", "cs.AI", "cs.LG"], "abstract": "We introduce a pair of tools, Rasa NLU and Rasa Core, which are open source python libraries for building conversational software. Their purpose is to make machine-learning based dialogue management and language understanding accessible to non-specialist software developers. In terms of design philosophy, we aim for ease of use, and bootstrapping from minimal (or no) initial training data. Both packages are extensively documented and ship with a comprehensive suite of tests. The code is available at https://github.com/RasaHQ/", "text": "introduce pair tools rasa rasa core open source python libraries building conversational software. purpose make machine-learning based dialogue management language understanding accessible non-specialist software developers. terms design philosophy ease bootstrapping minimal initial training data. packages extensively documented ship comprehensive suite tests. code available https//github.com/rasahq/ conversational systems becoming pervasive basis human computer interaction seek natural ways integrate automation everyday life. well-known examples conversational include apple’s siri amazon’s alexa microsoft’s cortana conversational systems becoming widespread platforms like facebook messenger opening chatbot developers. common tasks conversational systems include scheduling meetings booking ﬂights customer support tasks. modern open source libraries held high standard professionalism extends implementations machine learning algorithms. large amount non-research work involved maintaining widely used project code produced research groups often falls short expectations. rasa core bridge research application bringing recent advances machine learning non-experts want implement conversational systems. introduce rasa core easy tools building conversational systems since widely-used statistical dialogue system intended non-specialists. rasa already used thousands developers worldwide. many conversational systems tools split natural language understanding dialogue management section describes code architecture outline developer experience demonstrate example application. e.g. meekan https//meekan.com e.g. klms bluebot https//bb.klm.com/en http//rasa.ai/enterprise/case-studies/ https//www.reddit.com/r/machinelearning/comments/lesd/d_why_cant_you_guys_ rasa takes inspiration number sources. rasa’s uses ideas scikit-learn keras indeed libraries components rasa application. text classiﬁcation loosely based fasttext approach sentences represented pooling word vectors constituent token. using pre-trained word embeddings glove trained intent classiﬁers remarkably robust variations phrasing trained examples intent. braun show rasa nlu’s performance compares favourably various closed-source solutions. custom entities recognised using conditional random ﬁeld rasa core’s approach dialogue management similar takes different direction many recent research systems. currently support end-to-end learning natural language understanding state tracking dialogue management response generation jointly learned dialogue transcripts. rasa’s language understanding dialogue management fully decoupled. allows rasa core used independently another allows trained dialogue models reused across languages. language generation encourage developers generate variety responses authoring multiple templates response. currently easier reliable using neural network generate grammatically coherent semantically correct responses rasa core also account uncertainty voice transcription would typically achieved partially observable markov decision processes support training reinforcement learning emphasise users. rather implementing reward function simulated user immediately placing humans loop encourage developers train dialogue policy interactively recent work williams follows similar machine teaching approach difference work dialogue policy directly exposed surface form user utterances whereas rasa core dialogue policy receives recognised intent entities. mentioned introduction large body high-quality research statistical dialogue systems last decades translated widely used software libraries. notable contribution pydial recently released toolkit dialogue research. compared pydial rasa core emphasises needs non-specialist software developers researchers ﬁeld. open toolkits include opendial ravenclaw number general-purpose natural language processing libraries widespread necessary mention here. also number online services natural language understanding term understood dialogue research community converting short user messages dialogue acts comprising intent entities. like online services rasa hides implementation details users advantage slightly experienced users fully customise system. language understanding performed number components implementing common therefore easily conﬁgurable suit needs particular project. rasa’s architecture modular design. allows easy integration systems. example rasa core used dialogue manager conjunction services rasa nlu. code implemented python services expose http apis used easily projects using programming languages. events state occurred within conversation. state conversation reconstructed replaying events. user message received rasa takes steps described ﬁgure step performed rasa subsequent steps handled rasa core. figure message received passed interpreter extract intent entities structured information. tracker maintains conversation state. receives notiﬁcation message received. policy receives current state tracker. policy chooses action take next. chosen action logged tracker. action executed predicted action ‘listen’ back step frame problem dialogue management classiﬁcation problem. iteration rasa core predicts action take predeﬁned list. action simple utterance i.e. sending message user arbitrary function execute. action executed passed tracker instance make relevant information collected history dialogue slots previous utterances results previous actions. actions cannot directly mutate tracker executed return list events. tracker consumes events update state. number different event types slotset allslotsreset restarted etc. full list documentation https //core.rasa.ai. rasa natural language understanding module. comprises loosely coupled modules combining number natural language processing machine learning libraries consistent api. balance customisability ease use. pre-deﬁned pipelines sensible defaults work well cases. example recommended pipeline spacy_sklearn processes text following components. first text tokenised parts speech annotated using spacy library. spacy featuriser looks glove vector token pools create representation whole sentence. scikit-learn classiﬁer trains estimator dataset default mutliclass support vector classiﬁer trained ﬁve-fold cross-validation. ner_crf component trains conditional random ﬁeld recognise entities training data using tokens tags base features. since components implements easy swap glove vectors custom domain-speciﬁc word embeddings different machine learning library train classiﬁer. components handling out-of-vocabulary words policy select next action execute given tracker object. policy instantiated along featurizer creates vector representation current dialogue state given tracker. standard featurizer concatentates features describing featurization slot vary. simplest case slot represented single binary vector element indicating whether ﬁlled. slots categorical variables encoded one-of-k binary vector take continuous values specify thresholds affect featurisation simply passed featurizer ﬂoat. hyperparameter max_history speciﬁes number previous states include featurisation. default states stacked form two-dimensional array processed recurrent neural network similar sequence model. practice problems max_history value works well. rasa core work human-readable training data formats. rasa requires list utterances annotated intents entities. speciﬁed either json structure markdown format. markdown syntax especially compact easy read rendered many text editors applications like github. addition supervised learning rasa core supports machine teaching approach developers correct actions made system. practical approach generating training data exploring space plausible conversations efﬁciently. utter_ask_cuisine utter_ask_helpmore utter_ask_howcanhelp utter_ask_location utter_ask_moreupdates utter_ask_numpeople action_search_restaurants choosing correct action creates training data point. rasa core partially trains dialogue policy moves conversation forward next step. completed trained model persisted newly generated training data saved ﬁle. rasa core also capability visualise graph training dialogues. story graph directed graph actions nodes. edges labeled user utterances occur execution actions. user interaction consecutive actions edge label omitted. graph initial node called start terminal node called end. note graph capture full dialogue state possible walks along edges necessarily occur training set. simplify visualization heuristic used merge similar nodes. generated graph running simpliﬁcation shown figure simpliﬁcation nodes merged replacing single node inherits figure minimal example illustrating story graphs simpliﬁed. training data contains stories ﬁrst interaction. nodes therefore considered equivalent merged. repositories rasa core contain dockerﬁles producing static virtual machine images. aids reproducibility ease deployment variety server environments. servers running http support thread-based process-based parallelism allowing handle large request volumes production environment. demonstrate usage rasa core babl dialogue dataset simple slot-ﬁlling exercise system asked search restaurant several slots able perform successful search. system user preference slot. available slots location number people cuisine price range. interesting dataset inherent non-linearity problem multiple ways information isn’t single ‘correct’ action every case. accuracy precision therefore appropriate metrics evaluating dialogue policy. instead consider system chooses actions depending information already available. attempt slots empty. figure probabilities rasa core attaches action given slots already knows. core follows rough pattern asking cuisine followed location followed number people training data. however recognises could also unﬁlled slots attributing non-zero probability one. ﬁlled slots given vanishingly small probability. illustrates rasa core contextual clues learn non-linear conversations. rasa core active development. serve platform making applied research conversational usable non-specialist developers never ‘ﬁnished’. number topics active development including improved support reinforcement learning making robust typos slang supporting languages. also plan figure plot probabilities choosing actions babl example sequentially inform system correct cuisine location number people price system chooses next action based information already system favours asking slots informed slots ﬁlled searches restaurant. release real-world datasets comparing performance different models. authors welcome external contributions project speciﬁcs found repositories github. authors indebted users libraries providing invaluable feedback creating supportive community around tools. special acknowledgement owed external contributors libraries. up-to-date lists contributors viewed https// github.com/rasahq/rasa_nlu/graphs/contributors https//github.com/rasahq/ rasa_core/graphs/contributors. braun hernandez-mendez matthes langen. evaluating natural language understanding services conversational question answering systems. proceedings annual sigdial meeting discourse dialogue pages pedregosa varoquaux gramfort michel thirion grisel blondel prettenhofer weiss dubourg scikit-learn machine learning python. journal machine learning research pennington socher manning. glove global vectors word representation. proceedings conference empirical methods natural language processing pages ultes barahona p.-h. vandyke casanueva budzianowski mrkši´c t.-h. gasic pydial multi-domain statistical dialogue system toolkit. proceedings system demonstrations pages t.-h. gasic mrksic p.-h. vandyke young. semantically conditioned lstm-based natural language generation spoken dialogue systems. arxiv preprint arxiv. t.-h. vandyke mrksic gasic rojas-barahona p.-h. ultes young. network-based end-to-end trainable task-oriented dialogue system. arxiv preprint arxiv. williams asadi zweig. hybrid code networks practical efﬁcient end-to-end dialog control supervised reinforcement learning. arxiv preprint arxiv. williams liden. demonstration interactive teaching end-to-end dialog control hybrid code networks. proceedings annual sigdial meeting discourse dialogue pages", "year": 2017}