{"title": "Facial Key Points Detection using Deep Convolutional Neural Network -  NaimishNet", "tag": ["cs.CV", "cs.LG", "stat.ML"], "abstract": "Facial Key Points (FKPs) Detection is an important and challenging problem in the fields of computer vision and machine learning. It involves predicting the co-ordinates of the FKPs, e.g. nose tip, center of eyes, etc, for a given face. In this paper, we propose a LeNet adapted Deep CNN model - NaimishNet, to operate on facial key points data and compare our model's performance against existing state of the art approaches.", "text": "neural networks like lenet vggnet ﬁnally used weighted ensemble models. nouri used specialist dcnns trained pre-trained weights. oneto applied variety data pre-processing techniques like histogram stretching gaussian blurring followed image ﬂipping point grouping ﬁnally applied lenet. taigman provided deep network architecture deepface state-ofthe-art face recognition. provided dcnn architecture state-of-the face alignment. abstract—facial points detection important challenging problem ﬁelds computer vision machine learning. involves predicting co-ordinates fkps e.g. nose center eyes given face. paper propose lenet adapted deep model naimishnet operate facial points data compare model’s performance existing state approaches. facial points detection important challenging problem ﬁeld computer vision involves detecting fkps like centers corners eyes nose etc. problem predict realvalued co-ordinates space image pixels fkps given face image. ﬁnds application tracking faces images videos analysis facial expressions detection dysmorphic facial signs medical diagnosis face recognition etc. facial features vary greatly individual another even single individual large amount variation pose size position etc. problem becomes even challenging face images taken different illumination conditions viewing angles etc. past years advancements fkps detection made application deep convolutional neural network special type feed-forward neural network shared weights local connectivity. dcnns helped build state-of-the-art models image recognition recommender systems natural language processing etc. krizhevsky applied dcnn imagenet image classiﬁcation challenge outperformed previous state-of-the-art model image classiﬁcation. wang addressed fkps detection ﬁrst applying histogram stretching image contrast enhancement followed principal component analysis noise reduction mean patch search algorithm correlation scoring mutual information scoring predicting left right centers. estimated fkps using three level convolutional neural network level outputs multiple networks fused robust accurate estimation. longpre predicted fkps ﬁrst applying data augmentation expand number training examples followed testing different architectures convolutional convolutiond zero padding weights initialized random numbers drawn uniform distribution speciﬁcs number ﬁlters ﬁlter shape shown table dense dense regular fully connected layers weights initialized using glorot uniform initialization adam optimizer learning rate used minimizing mean squared error tried various different deep network architectures ﬁnally settling naimishnet architecture. design decisions governed primarily hardware restrictions time taken epoch different runs network. although wanted architecture well different fkps target mainly taken decisions based performance model left center target. different architectures epochs forecasted performance generalizability based experience gathered training multiple deep network architectures. experimented convolutiond maxpoolingd layers dense layers rectiﬁed linear units activation functions ﬁtted. experimented convolutiond maxpoolingd layers dense layers rectiﬁed linear units activation functions turn required pre-training weights achieve good performance. wanted avoid pre-training reduce training time. experiment zero padding strides. sandwiched batch normalization layers every maxpoolingd layer increased epoch training time ﬁvefold. used dropout layers dropout probability every dropout layer showed poor removed dropout layers resulted overﬁtting. tried different initialization schemes like normal initialization show nice performance ﬁrst epochs fact uniform initialization performed better experimented different patience levels early stopping callback function concluded total number epochs case would well cases. aforementioned cases used rmsprop optimizer main reduce training time along achieving maximum performance generalizability. achieve experimented exponential linear units activation function adam optimizer linearly increasing dropout probabilities along depth network. speciﬁcs ﬁlter chosen based past experience exponentially increasing number ﬁlters linearly decreasing ﬁlter size. batch size kept vector operations optimized sizes powers also given million model parameters limited memory batch size ideal size number main layers i.e. convolutional layers dense layers ideal since exponential cases number layers greater parameters adam optimizer used recommended authors experiment them. naimishnet inspired lenet since lenet’s architecture follows pattern input convd maxpoold convd maxpoold convd maxpoold dense output. works longpre oneto etc. shown lenet styled architectures successfully applied facial points detection problem. used dataset kaggle competition facial points detection dataset chosen benchmark solution existing approaches address fkps detection problem. fkps face image like left center right center left inner corner left outer corner right inner corner right outer corner left eyebrow inner left eyebrow outer right eyebrow inner right eyebrow outer nose mouth left corner mouth right corner mouth center mouth center bottom lip. here left right point view subject. greyscale input images pixel values range size pixels. train dataset consists images targets i.e. fkps. missing target values many fkps many face images. test dataset consists images target information. kaggle submission consists fkps co-ordinates predicted. data augmentation data augmentation helps boost performance deep learning model training data limited generating training data. horizontally ﬂipped images target information fkps available also swapped target values according table iii. then vertically stacked horizontally ﬂipped data original train data create augmented train dataset. ﬁltered train data train dataset validation dataset compute feature-wise mean zerocenter subtracting also store reshape features start training. finally validate store model’s loss history. evaluation naimishnet models reload zero center test features subtracting reshape samples reload best checkpointed model weights predict test features store predictions. ﬁgure high rmseleft presence less number images training dataset side face pose. images training dataset frontal face nearly closed lips. naimishnet delivers lower rmsecenter rmseright. ﬁgure ﬁgure show train validation rmse decrease time small wiggles along curve showcasing batch size rightly chosen close enough thus showing naimishnet models generalized well. best check-pointed models achieved epochs thus certifying decision ﬁxing epochs upper limit. ﬁgure ﬁgure show train validation rmse decrease time small wiggles close enough. best check-pointed models achieved epochs. also ﬁgure since train rmse become less validation rmse implies patience level could increased thus training could continued epochs. ﬁgure ﬁgure show train validation rmse decrease time small wiggles close enough. best checkpointed models achieved close epochs. ﬁgure could increased train rmse becomes less validation rmse. ﬁgure ﬁgure show train validation rmse decreases time small wiggles close enough. best check-pointed models achieved epochs. improvement could seen increasing esc. ﬁgure ﬁgure show train validation rmse decrease time close enough ﬁnal check-pointed model. ﬁgure could increased necessarily would visible improvement. ﬁgure train validation rmse decreases time wiggly nature validation curve increases towards end. could tried increase batch size could handled hardware. curves close together show convergence epochs. architectures proven successful facial points detection. works longpre oneto etc. shown lenet styled architectures successfully applied facial points detection problem. given enough compute resources time naimishnet modiﬁed experimenting different initialization schemes different activation functions different number ﬁlters kernel size different number layers switching lenet vggnet introducing inception modules googlenet introducing residual networks etc. different image pre-processing approaches like histogram stretching zero centering etc. tried check approaches improve model’s accuracy. approaches facial points detection based application deep learning three stage process face detection face alignment facial points detection state-of-the-art algorithms stage. liao ling liao \"gpu boosted deep learning real-time face alignment\" technology conference d.-a. clevert unterthiner hochreiter \"fast accurate deep network learning exponential linear units international conference learning representations", "year": 2017}