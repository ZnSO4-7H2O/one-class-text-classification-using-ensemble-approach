{"title": "Software Engineers vs. Machine Learning Algorithms: An Empirical Study  Assessing Performance and Reuse Tasks", "tag": ["cs.SE", "cs.AI", "cs.HC", "cs.LG", "cs.NE"], "abstract": "Several papers have recently contained reports on applying machine learning (ML) to the automation of software engineering (SE) tasks, such as project management, modeling and development. However, there appear to be no approaches comparing how software engineers fare against machine-learning algorithms as applied to specific software development tasks. Such a comparison is essential to gain insight into which tasks are better performed by humans and which by machine learning and how cooperative work or human-in-the-loop processes can be implemented more effectively. In this paper, we present an empirical study that compares how software engineers and machine-learning algorithms perform and reuse tasks. The empirical study involves the synthesis of the control structure of an autonomous streetlight application. Our approach consists of four steps. First, we solved the problem using machine learning to determine specific performance and reuse tasks. Second, we asked software engineers with different domain knowledge levels to provide a solution to the same tasks. Third, we compared how software engineers fare against machine-learning algorithms when accomplishing the performance and reuse tasks based on criteria such as energy consumption and safety. Finally, we analyzed the results to understand which tasks are better performed by either humans or algorithms so that they can work together more effectively. Such an understanding and the resulting human-in-the-loop approaches, which take into account the strengths and weaknesses of humans and machine-learning algorithms, are fundamental not only to provide a basis for cooperative work in support of software engineering, but also, in other areas.", "text": "abstract—several papers recently contained reports applying machine learning automation software engineering tasks project management modeling development. however appear approaches comparing software engineers fare machine-learning algorithms applied speciﬁc software development tasks. comparison essential gain insight tasks better performed humans machine learning cooperative work human-in-the-loop processes implemented effectively. paper present empirical study compares software engineers machine-learning algorithms perform reuse tasks. empirical study involves synthesis control structure autonomous streetlight application. approach consists four steps. first solved problem using machine learning determine speciﬁc performance reuse tasks. second asked software engineers different domain knowledge levels provide solution tasks. third compared software engineers fare machine-learning algorithms accomplishing performance reuse tasks based criteria energy consumption safety. finally analyzed results understand tasks better performed either humans algorithms work together effectively. understanding resulting human-in-the-loop approaches take account strengths weaknesses humans machine-learning algorithms fundamental provide basis cooperative work support software engineering also areas. complex costly time-consuming typically consist collection related tasks designing implementing maintaining testing reusing software applications addition software become embedded systems kinds millions computer programs corrected adapted laboratory software engineering department informatics pontiﬁcal catholic university janeiro brazil. capes scholarship/program /process e-mail nnascimentolucenainf.puc-rio.br http//www.inf.puc-rio.br/∼nnascimento/ enhanced result ﬁeld software engineering requires millions skilled information technology professionals create millions lines code must installed conﬁgured tuned maintained. according kephart near future extremely challenging manage environments even skilled professionals. several researchers proposed artiﬁcial intelligence especially machine-learning techniques automate different software engineering tasks example zhang extensively studied theme recently stated that however lack approaches compare software engineers fare machine-learning algorithms speciﬁc software development tasks. comparison critical order evaluate s.e. tasks better performed automation require human involvement human-in-the-loop approaches practice explicit comparisons tasks performed engineers automated procedures including machine learning often clear automation speciﬁc setting. example brazilian company acquired software system select petroleum exploration models automatically engineers decided could provide better solution manually. however comparison manual solution provided automatically system became clear automated solution better. illustrates lack comparisons makes choosing manual automated solution combined human-in-the-loop approach difﬁcult. paper contains empirical study compare software engineers machinelearning algorithms achieve performance reuse tasks. empirical study uses case study involving creation control structure autonomous streetlight application. approach consists four steps. first problem solved using machine learning achieve speciﬁc performance reuse tasks. second asked software engineers different domain-knowledge levels provide solution achieve tasks. third compared software engineers compare machinelearning algorithms accomplishing performance reuse tasks based criteria energy consumption safety. finally results analyzed understand tasks better performed either humans algorithms work together effectively. realizing novel human-in-the-loop approaches machine-learning procedures assist software developers achieving tasks. humanin-the-loop approaches take account strengths weaknesses humans machine-learning algorithms fundamental provide basis cooperative work paper organized follows section presents empirical study describing research questions hypotheses objective study. section presents method selected collect empirical data. sections present experimental results. section presents threats validity experiment. section presents related work. paper ends concluding remarks suggestions future work. motivation theme paper namely whether artiﬁcial intelligence machine learning beneﬁt software engineering investigated since hebert simon published paper entitled whether software engineering needs artiﬁcially intelligent paper simon discussed roles humans play versus roles could taken artiﬁcial intelligence developing computer systems. notwithstanding sommerville raised following question what future artiﬁcial intelligence make contribution system engineering? paper sommervile performed literature review applications artiﬁcial intelligence software engineering concluded that contribution supporting...activities characterized solutions problems neither right wrong less appropriate particular situation...for example requirements speciﬁcation analysis involves extensive consultation domain experts project management. several papers since investigated machine learning solving different software engineering tasks investigations include approaches project management dealing problems related cost time quality prediction resource management; defect prediction iii) requirements management focusing problems classifying representing requirements generating requirements software development code generation synthesis code evaluation papers present successful applications machine learning software engineering showing techniques provide correct automatic solutions problems. however papers discuss whether domain expert could propose manual solution appropriate particular situation. more appropriate means solution provides better performance increases anquality important particular application scenario user preference example medical aviation engineering ﬁelds trust solution provided end-user important factor consider solution appropriate. however although many authors promoting neural networks medicine abbas castelvecchi among authors questioned what trustworthiness prediction made artiﬁcial neural network? application scenarios many related internet things numerous authors consider reuse solution important quality. agree achieve goal billions things connected internet next years necessary ways reduce time market. example desirable solution parts solution design autonomous streetlights speciﬁc scenario could reused design streetlights another scenario. particular internet things considerably increased number approaches propose machine learning automate software development none research contains comparison results experiments designed experts. example nascimento lucena developed hybrid framework uses learning-based manual program synthesis internet things generated four instances framework used learning techniques synthesize control structure automatically. authors stated machine learning made feasible development applications. however present experiment without using learning techniques. contrast solutions released internet things apple’s homekit’s approach samsung smart things consider software developer synthesizing context decided following question software engineers compare machine-learning algorithms? explore question selected internet things application domain then compared solution provided skilled professional solution provided learning algorithm respect performance reuse tasks. short figure depicts theory investigate paper. according theory variables intend isolate measure performance reusability achieved three kinds solutions solutions provided learning techniques; solutions provided software engineers skills; iii) solutions provided software engineers without skills. evaluate relationship among variables performed empirical study using fiot shown figure raised four research questions investigate theory’s propositions present questions hypotheses section collect analyze empirical data performed controlled experiment. perform experiment reproduced problem synthesizing control structure autonomous streetlights using neuroevolution presented then invited software engineers provide solution problem using architecture environment. lastly compared solution provided learning algorithm solutions provided software engineers. application autonomous streetlights considering more appropriate solution presents better performance main scenario satisfactorily reused scenario based criteria minimal energy consumption safety experimental goal based goalquestion-metric method framework internet things purpose comparing automated approach manual approach synthesizing control autonomous things respect performance reuse. object study framework internet things framework internet things hybrid software framework allows developer generate controller structures autonomous things learning procedural algorithms. researcher develops application using fiot application contain java software component already equipped modules detecting autonomous things environment assigning controller speciﬁc thing creating software agents collecting data devices supporting communication structure among agents devices. features variable selected/developed according application type follows control module if-else neural network ﬁnite state machine; adaptive technique synthesize controller design-time reinforcement learning genetic algorithm; evaluation process evaluate behavior autonomous things making decisions based controller. example table summarizes streetlight control application adhere proposed framework using machine learning-based approach extending fiot ﬂexible points. table summarizes streetlight control application adhere proposed framework using solution provided software engineer extending fiot ﬂexible points. light control application three layer neural network collective fitness evaluation solution evaluated based energy consumption number people ﬁnished routes simulation ends total time spent people move trip evolutionary algorithm generate pool candidates represent neural network parameters light control application if-else module provided software engineer collective fitness evaluation solution evaluated based energy consumption number people ﬁnished routes simulation ends total time spent people move trip controlled experiment ﬁrst step experiment reproduce experiment presented using supervised learning approach. then invited software engineers provide solution problem. finally compared solution provided learning algorithm solutions provided participants. participant analysis described previously knowledge application domain important variable empirical study. therefore performing controlled experiment asked participants describe experience development applications based internet things developing distributed systems embedded characteristics providing element system sensors actuators. shown figure streetlight execute three tasks every second data collection decision-making action enforcement. ﬁrst task consists receiving data related people ambient brightness data neighboring streetlights current light status second task consists analyzing collected data making decisions actions enforced. last task action enforcement consists setting value three output variables listeningdecision enables streetlight receive signals neighboring streetlights next cycle; wirelesstransmitter signal value transmitted neighboring streetlights; lightdecision activates light’s off/dim/on functions. challenge explained participants tasks collecting data enforcing actions already implemented. challenge provide solution task making decisions depicted figure short experiment involves developing autonomous streetlights. overall goal application reduce energy consumption maintaining appropriate visibility illuminated areas purpose provided streetlight ambient brightness motion sensors actuator control light intensity. addition also provided streetlights wireless communicators shown figure therefore streetlights able cooperate establish likely routes passers-by thus achieve goal minimizing energy consumption. provided pseudocode considered possible combinations input variables. then participants decided output variables according collected data. part pseudocode depicted figure using one. addition also considered zeroed solution always sets values zero. zeroed solution supposed worst solution since streetlights always switch lights off. solution generated machinelearning algorithm compared results approaches result produced using machine learning approach. nascimento lucena explain learning approach uses three-layer feedforward neural network combined evolutionary algorithm generate decision rules automatically. figure depicts rules generated evolved neural network. interested reader consult extensive papers read nascimento’s dissertation people walk along different paths starting random departure points. role complete routes reaching destination point. number people ﬁnished routes simulation ends total time spent people therefore solution evaluated simulation ends based energy consumption number people ﬁnished routes simulation ends total time spent people moving trip. equations show values calculated evaluation eople percentage number people completed routes simulation total number people simulation; penergy percentage energy consumed streetlights maximum energy value could consumed simulation. also considered wireless transmitter calculate energy consumption; percentage total duration time peoples trips maximum time value trip could spend; itness ﬁtness candidate encodes proposed solution. nascimento lucena modeled scenario graph node represents streetlight position edge represents smallest distance streetlights. graph representing streetlight network consists nodes edges. node represents streetlight. graph yellow gray black triangles represent streetlight status edge two-way links nodes. addition edge light intensity parameter environmental light brightness streetlights nodes. goal simulate different lighting different neighborhood areas. depicted figure person started scenario showed participants. instance person starting point point target. participants provide solution streetlights assure second step experiment consists executing solutions participants learning approach scenario constraints. scenario depicted figure used learning algorithm presented participants. provide controlled experiment able compare different solutions started person scenario manually parameters supposed randomly selected departure target points broken lamps. experiment execution consists executing simulated scenario three times night late afternoon morning main idea determine solution behaves different parts day. figure depicts percentage energy spent according environmental light different solutions. described previously also considered wireless transmitter calculate energy consumption. expected streetlights using zeroed decision never switch lights never emit signal energy consumed using solution always zero. possible observe solutions provided learning algorithm participants expend energy environmental light maximum. fact according proposed scenario reason turn streetlights period maximum illumination. executed experiment times changing decision solution autonomous streetlights. ﬁrst instance outputs zero during whole simulation supposed worst solution. example streetlights never switch lights second instance executed experiment using best solution found learning algorithm according experiment presented then executed simulation ﬁles generated development work executable ﬁles participants’ solutions results available http//www.inf.puc-rio.br/˜.nnascimento/projects.html discussion participants knowledge versus results executing solution proposed participant connect solution’s results participant’s knowledge domain shown table besides presenting results different solutions different parts best solution must presents best result whole day. thus calculated average parameters achieved solutions different parts day. figure depicts common average. also calculated weighted average taking account duration parts results similar. observe signiﬁcant difference results software engineers experience development results software engineers without experience development. participant individual without knowledge provided solution works participant individual knowledge provide working solution. hypothesis testing section investigate hypotheses related solutions’ performance evaluation presented subsection thus performed statistical analyses described peck devore measures presented table shown table separated results experiments groups software engineers knowledge software engineers without knowledge. then calculated mean standard deviation shown figure based ﬁtness average three participants namely provided solution slightly better solution provided learning algorithm. five participants provided solution works remaining provided solution work. explained earlier considering incorrect solution person ﬁnish route simulation ends. even increasing ﬁrst null hypothesis claims difference mean performance expert software engineers’ solutions ml-based approach solution. alternative hypothesis claims ml-based approach solution improves performance application comparison expert software engineers’ solutions. thus claim true expert software engineers’ solutions mean performance achieved mlbased approach instance restricted population sample number software engineers conﬁrmed experience developing applications internet things. shown table performance mean expert software engineers’ solutions standard deviation verify data sufﬁcient accept alternative hypothesis need verify probability rejecting null hypothesis assuming true using statistical signiﬁcance level computed test statistic follows according t-statistic theory safely reject null hypothesis statistic value negative criticalvalue negative criticalvalue bounds area rejection t-distribution shown figure experiment speciﬁed statistical signiﬁcance level probability getting t-value less equal negative criticalvalue calculated tcriticalvalue t-distribution according t-table presented peck devore accordingly distribution degrees freedom conﬁdence level negative tcriticalvalue depicted figure test statistic sample higher tcriticalvalue. test statistic fall critical region cannot safely reject null hypothesis. based t-value degree freedom could reject null hypothesis reduced precision experiment thus would fail reject null hypothesis would accept alternative hypothesis. therefore cannot state ml-based approach improves performance autonomous things compared solutions provided expert software engineers. instance restricted population sample number software engineers conﬁrmed experience developing applications internet things. shown table performance mean solutions software engineers without experience development standard deviation thus shown table t-distribution degrees freedom. thus conﬁdence level negative tcriticalvalue depicted figure test statistic sample tcriticalvalue statistic value negative tcriticalvalue safely reject null hypothesis assuring error chancing making error lower therefore accepted alternative hypothesis ml-based approach improves performance autonomous things compared solutions provided software engineers experience development. experiment part results explained previously second part experiment consists translating solution provided machine learning participants unknown environment. second part experiment also executed simulation times participants’ solutions machine-learning solution zeroed solution. table shows results achieved different solutions night simulation seconds. shown solutions work. person simulations ﬁnish route even increased simulation time. solution provided machine-learning algorithm participant worked. remember scenario used machine-learning algorithm during training process. solution provided machine learning ﬁrst scenario reused scenario. words restart machinelearning process. shown table considering whole machine-learning approach presented best result. average time trip little higher using machine-learning approach difference energy consumption solutions considerably higher. hypothesis testing section investigate hypotheses related solutions’ reuse evaluation h-rq presented subsection alternative hypotheses state mlbased approach improves performance autonomous things compared solutions provided software engineers software engineers experience development software engineers without experience development respectively. planned perform statistical development evaluate hypotheses. however depicted figure scenario participants provided result better result provided machinelearning solution. addition group section analyze empirical experimental results understand tasks better performed humans algorithms. important selecting whether software engineers machine learning accomplish speciﬁc task better. based results found evidence machine-learning techniques perform tasks better software engineers considering solutions improve performance increase reuse. illustrated experimental results software engineers provided solution could reused scenario. none software engineers provided solution works better ml’s solution scenario. ﬂexibility application important factor based results safely recommend machine learning. however considered performance important factor evaluate quality solutions found evidence software engineers perform tasks better machine learning considering better solution improves performance. described experiments cannot state improves performance application comparison solutions provided domain expert software engineers. also interesting result many researchers especially domain strictly focused automating software development. brief experiment indicates cases software engineers outperform machinelearning algorithms whereas cases not. evidence shows important know performs better different situations order determine ways software engineers work cooperatively effectively automated machine-learning procedures. report diversity participants another possible threat. therefore study needed aware least threats validity namely selected sample participants enough achieve conclusive results; sample consisted graduate students brazilian universities. group representative software engineers substantially professional experience background. mitigate problems number participants diversity selected participants carefully. least years experience software development. addition allowed participants solve problem manipulating pseudocode version thereby avoiding gaps participants’ knowledge experience particular programming language architecture. note survey used select participants indicated level experience pseudocode. pseudocode provided participant carefully translated java language supported framework internet things. oizumi reported third threat validity namely possible misunderstandings study. mitigate problem misunderstandings asked participants write understanding problem applying solution. participants indicated understood task completely. also asked conﬁdence proposed solution. evaluated solution highest grade allowing increase conﬁdence experimental results. addition assisted participants entire study making sure understood experimental task threats validity although designed conducted experiments carefully always factors challenge experiments validity. threats validity described could indeed limit legitimacy results. section present actions taken mitigate impact factors research results. related work comparing intelligent machines ability person solve particular problem approach. kind discussion promoted since beginning artiﬁcial intelligence. example important moment history technology happened garry kasparov’s chess match supercomputer deep blue whiteson indirectly performed comparison evaluating three different approaches neuroevolution learning algorithm solve tasks coevolution mostly unassisted human knowledge; layered learning highly assisted; concurrent layered learning mixed approach. authors state results demonstrate appropriate level human assistance depends critically difﬁculty problem. furthermore also approach machine learning called automatic machine learning uses learning parameters learning algorithm automatically. traditional approach software engineer machine learning skills responsible ﬁnding good conﬁguration algorithm parameters. zoth present auto-ml-based approach design neural network classify images speciﬁc dataset. addition compared results previous state-of-the-art model designed expert engineer. according zoth automl-based approach design novel network architecture rivals best human-invented architecture terms test accuracy. zoth also showed machine-learning technique capable beating software engineer skills speciﬁc software engineering task authors discuss subject paper. paper appears ﬁrst provide empirical study investigate machine-learning techniques solve problem ﬁeld software engineering comparing solution provided mlbased approach solutions provided software engineers. several researchers proposed machine-learning techniques automate software engineering tasks. however approaches direct efforts toward asking whether ml-based procedures higher success rates current standard manual practices. relevant question potential line investigation could software engineer solve speciﬁc development task better algorithm?. indeed fundamental evaluate tasks better performed engineers procedures work together effectively also provide insight novel human-in-the-loop machinelearning approaches support tasks. paper appears ﬁrst provide empirical study comparing software engineers machine-learning algorithms achieve performance reuse tasks. brief result experiment found evidence cases software engineers outperform machine-learning algorithms cases not. further typical experimental studies although designed conducted experiment carefully always factors threaten experiment’s validity. example threats include number diversity software engineers involved experiment. understanding software engineers fare algorithms essential support methodologies developing human-inthe-loop approaches machine learning automated procedures assist software developers achieving tasks. example methodologies deﬁne agent execute speciﬁc task software development set. based understanding methodologies provide basis software engineers machine learning algorithms cooperate software engineering development effectively. future work extend proposed experiment includes conducting empirical studies assess tasks design maintenance testing; experimenting machine-learning algorithms reinforcement learning backpropagation; using different criteria evaluate task execution. possible tasks could investigated include programming tasks case tasks performed software development teams algorithms compared. example could invite software developers team highest score last international collegiate programming contest important programming championships world involved comparison. competition evaluates capability software engineers solve complex another line investigation could address different qualitative quantitative methodologies. example task execution comparison could rely reference performances performance highly successful performers research work also extended proposing based comparison performance engineers algorithms methodology effective task allocation. methodology could principle lead effective ways allocate tasks software development cooperative work involving humans automated procedures. human-in-the-loop approaches take account strengths weaknesses humans machine learning algorithms fundamental provide basis cooperative work software engineering possibly areas. work supported laboratory software engineering puc-rio. thanks capes cnpq faperj pucrio support scholarships fellowships. would also like thank software engineers participated experiment. zhang software developments engineering automation reliable software kephart research challenges autonomic computing software engineering icse proceedings. international conference ieee mostow foreword software engineering? ieee transactions software engineering vol. intelligence software engineering survey possibilities information software technology vol. cheung holden survey artiﬁcial intelligence impacts information systems engineering information software technology vol. boetticher using machine learning predict project effort empirical case studies data-starved domains model based requirements workshop. citeseer holzinger plass holzinger cris¸an c.-m. pintea palade towards interactive machine learning applying colony algorithms solve traveling salesman problem human-in-the-loop approach international conference availability reliability security. springer easterbrook singer m.-a. storey damian selecting empirical methods software engineering research guide advanced empirical software engineering simon whether software engineering needs artiﬁcially intelligent ieee transactions software engineering sommerville artiﬁcial intelligence systems engineering prospects artiﬁcial intelligence proceedings aisb’ march- april birmingham vol. marchetto trentini evaluating applications testability combining metrics analogies information communications technology enabling technologies knowledge society international conference ieee zhang yang wang handling missing data software effort prediction naive bayes algorithm proceedings international conference predictive models software engineering. sack bouneffa maweed basson building integrated generic platform software quality evaluation information communication technologies ictta’. vol. ieee reformat zhang introduction special issue onsoftware quality improvements estimations intelligence-based methods software quality journal vol. challagulla bastani i.-l. high-conﬁdence compositional reliability assessment soa-based systems using machine learning techniques machine learning cyber trust. springer veras meira oliveira melo comparative study clustering techniques organization software repositories hybrid intelligent systems international conference birzniece kirikova interactive inductive learning service indirect analysis study subject compatibility proceedings benelearn hanchate analysis mathematical modeling algorithm software project scheduling using bcga intelligent computing intelligent systems ieee international conference vol. plication human resource data mining problem advances knowledge discovery data mining huang systematic literature review machine learning based software development effort estimation models information software technology vol. al-jamimi ahmed machine learning-based software quality prediction models state information science applications international conference ieee radli ´nski enhancing bayesian network model integrated software quality prediction proc. fourth international conference information process knowledge management valencia. citeseer pinel bouvry dorronsoro khan savant automatic parallelization scheduling heuristic machine learning nature biologically inspired computing world congress ieee rongfa defect classiﬁcation method software management quality control based decision tree learning advanced technology teaching-proceedings international conference teaching computational science springer rana staron machine learning approach quality assessment prediction large software organizations software engineering service science ieee international conference meddeb time series search based software engineering refactoring recommendation proceedings international conference management computational collective intelligence digital ecosystems. i.-l. paul empirical assessment machine learning based software defect prediction techniques object-oriented real-time dependable systems words ieee international workshop ieee kaminsky boetticher building genetically engineerable evolvable program using breadth-based explicit knowledge predicting software defects fuzzy information processing nafips’. ieee annual meeting vol. predict less defect prediction using machine learners implicitly data starved domain world multiconference systemics cybernetics informatics orlando citeseer kaminsky boetticher better software defect prediction using equalized learning machine learners knowledge sharing collaborative engineering kutlubay bener machine learning based model software defect prediction working paer boazi¸ci university computer engineering department ceylan kutlubay bener software defect identiﬁcation using machine learning techniques software engineering advanced applications seaa’. euromicro conference ieee gorschek genetic programming cross-release fault count predictions large complex software projects evolutionary computation optimization algorithms software engineering fang framework discover potential deviation program requirement mining object graph computer application system modeling international conference vol. ieee taghi cukic seliya empirical assessment program moduleorder models quality technology quantitative management vol. wang bouguila bdiri empirical evaluation selected algorithms complexity-based classiﬁcation software modules model intelligent systems theory practice. springer wang n.-w. chen z.-j. wang artiﬁcial neural network automatic test oracles generation computer science software engineering international conference vol. ieee ferzund ahsan wotawa automated classiﬁcation faults maqbool babri bayesian learning software architecture recovery electrical engineering icee’. international conference ieee okutan software defect prediction using bayesian networks kernel methods ph.d. dissertation isik university abaei selamat important issues software fault prediction road handbook research emerging advancements technologies software engineering. global okutan yildiz novel kernel predict software defectiveness journal systems software vol. x.-d. r.-h. chang zhang software defect prediction based competitive organization coevolutionary algorithm journal convergence information technology volume number cahill hogan thomas predicting fault-prone software modules rank classiﬁcation software engineering conference australian. rana staron berger hansson nilsson meding adoption machine learning techniques software defect prediction initial industrial validation joint conference knowledge-based software engineering. springer rashid model case-based reasoning application software fault prediction international journal software science computational intelligence vol. improvisation case-based reasoning application software fault prediction international journal services technology management vol. chhabra parashar prediction changeability object oriented classes packages mining change history electrical computer engineering ieee canadian conference shin goel modeling software component criticality using machine learning approach artiﬁcial intelligence simulation shirabad predictive techniques software engineering encyclopedia machine learning. springer ´ujo paixao yeltsin dantas souza architecture based interactive optimization machine learning applied next release problem automated software engineering tourw´e brichau kellens gybels induced intentional software views computer languages systems structures vol. stefano menzies machine learning software engineering case studies software reuse tools artiﬁcial intelligence proceedings. ieee international conference bastani i.-l. automated planning code pattern based code synthesis tools artiﬁcial intelligence ictai’. ieee international conference ieee jiang minson business process self-adaptive framework smart ofﬁce based multi-agent e-business engineering ieee international conference ieee bajo rodr´ıguez villarrubia corchado intelligent system lighting control smart cities information sciences vol. birzniece inductive learning information systems proceedings international conference information software technologies alrajeh russo uchitel inferring operational requirements scenarios goal models using inductive learning proceedings international workshop scenarios state machines models algorithms tools. shariﬂoo metzger quinton baresi pohl learning evolution dynamic software product lines proceedings international symposium software engineering adaptive self-managing systems. nascimento lucena fiot agent-based framework self-adaptive self-organizing applications based internet things information sciences vol. jacob tairas code template amal kessentini bechikh said machine learning search-based software engineering ill-deﬁned ﬁtness function case study software refactoring international symposium search based software engineering. springer mazurowski habas zurada baker tourassi training neural network classiﬁers medical decision making effects imbalanced datasets classiﬁcation performance neural networks vol. morej´on viana lucena generating software agents data mining example health data area international conference software engineering knowledge engineering-seke j.-p. briot nascimento lucena multi-agent architecture quantiﬁed fruits design experience international conference software engineering knowledge engineering seke/knowledge systems institute nascimento fiot agentbased framework self-adaptive self-organizing internet things applications master’s thesis puc-rio janeiro brazil august nascimento lucena fuks modeling quantiﬁed things using multi-agent system ieee international conference intelligence intelligent agent technology vol. oizumi sousa garcia oliveira oliveira agbachi lucena revealing design problems stinky code mixed-method study proceedings brazilian symposium software components architectures reuse. fernandes ferreira netto figueiredo information systems development pair programming academic quasi-experiment proceedings brazilian symposium information systems brazilian symposium information systems information systems cloud computing era-volume brazilian computer society", "year": 2018}