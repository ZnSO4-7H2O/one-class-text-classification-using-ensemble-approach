{"title": "Parameterized Complexity Results for Exact Bayesian Network Structure  Learning", "tag": ["cs.AI", "cs.LG"], "abstract": "Bayesian network structure learning is the notoriously difficult problem of discovering a Bayesian network that optimally represents a given set of training data. In this paper we study the computational worst-case complexity of exact Bayesian network structure learning under graph theoretic restrictions on the (directed) super-structure. The super-structure is an undirected graph that contains as subgraphs the skeletons of solution networks. We introduce the directed super-structure as a natural generalization of its undirected counterpart. Our results apply to several variants of score-based Bayesian network structure learning where the score of a network decomposes into local scores of its nodes. Results: We show that exact Bayesian network structure learning can be carried out in non-uniform polynomial time if the super-structure has bounded treewidth, and in linear time if in addition the super-structure has bounded maximum degree. Furthermore, we show that if the directed super-structure is acyclic, then exact Bayesian network structure learning can be carried out in quadratic time. We complement these positive results with a number of hardness results. We show that both restrictions (treewidth and degree) are essential and cannot be dropped without loosing uniform polynomial time tractability (subject to a complexity-theoretic assumption). Similarly, exact Bayesian network structure learning remains NP-hard for \"almost acyclic\" directed super-structures. Furthermore, we show that the restrictions remain essential if we do not search for a globally optimal network but aim to improve a given network by means of at most k arc additions, arc deletions, or arc reversals (k-neighborhood local search).", "text": "bayesian network structure learning notoriously diﬃcult problem discovering bayesian network optimally represents given training data. paper study computational worst-case complexity exact bayesian network structure learning graph theoretic restrictions super-structure. super-structure undirected graph contains subgraphs skeletons solution networks. introduce directed super-structure natural generalization undirected counterpart. results apply several variants score-based bayesian network structure learning score network decomposes local scores nodes. results show exact bayesian network structure learning carried non-uniform polynomial time super-structure bounded treewidth linear time addition super-structure bounded maximum degree. furthermore show directed super-structure acyclic exact bayesian network structure learning carried quadratic time. complement positive results number hardness results. show restrictions essential cannot dropped without loosing uniform polynomial time tractability similarly exact bayesian network structure learning remains np-hard almost acyclic directed super-structures. furthermore show restrictions remain essential search globally optimal network improve given network means additions deletions reversals bayesian network structure learning important task discovering bayesian network represents given training data. unfortunately solving problem optimally np-complete common widely used approach overcome complexity barrier exploit structure problem. also popular direction bnsl main kinds structural restrictions studied i.e. restrictions probability distribution generating input restrictions resulting bayesian network. help restrictions several tractable classes bnsl identiﬁed. bnsl solvable non-uniform polynomial time distribution generating input bounded treewidth bounded degree solvable polynomial time resulting branching close branching positive results contrasted series negative results mentioned restrictions e.g. bnsl known np-hard resulting polytree directed path recently novel approach restrict structure bnsl introduced so-called super-structure undirected graph nodes resulting used restrict search space bnsl advance. super-structure obtained usually using it-based approach looks solution networks whose skeletons contained super-structure. hence becomes important super-structure sound i.e. contains least optimal solution. main questions concerning super-structure first suitable sound super-structure obtained eﬃciently? secondly superstructure obtained used guide search optimal solution? goal paper provide theoretical analysis latter question considering super-structures arise given local score function adapting model parviainen koivisto consider various combinations restrictions systematic allows draw broader picture complexity landscape bnsl. hope analysis help understand boundaries tractable intractable cases important problem. furthermore think results provide insights help search eﬃcient accurate heuristics. analysis theoretical framework parameterized complexity seems well suited investigating complexity bnsl allows take structural properties account. best knowledge parameterized complexity theory employed context before. ﬁrst part paper study worst-case complexity exact bnsl graph-theoretic restrictions super-structure. prominent restrictions super-structure consider treewidth. treewidth important widely used parameter measures similarity graph tree similarly trees many otherwise intractable problems become tractable graphs bounded treewidth. importantly treewidth already successfully applied context bayesian reasoning hence seems natural apply treewidth bnsl. results follows non-uniform mean order polynomial depends treewidth. obtain results means dynamic programming algorithm along decomposition tree super-structure. show that—in certain sense—both results optimal since learning optimal bayesian network computationally hard heuristic methods used practice. popular heuristic bnsl so-called hill climbing procedure local search. particular highly competitive algorithm learning large bayesian networks uses local search optimal solution inside previously constructed super-structure study worst case complexity wellknown generalization local search k-neighborhood local search variant local search allowed modify arcs every step search. hence adjusting able balance speed accuracy. however k-local search space order applying k-local search especially desirable problems running time increase modestly respect similarly result able show following clearly result minor interest already solve exact bnsl problem restrictions super-structure however contrast exact bnsl problem might able drop restrictions without losing uniform polynomial-time tractability. show unlikely. considered super-structure undirected graph. introduce directed super-structure expressive restrict search space solutions i.e. directed super-structure ﬁxed restrict search solutions whose figure overview complexity results. complexity classes contain problems solvable uniform polynomial-time non-uniform polynomial-time respectively. networks contained directed super-structure. again study complexity exact bnsl respect certain restrictions directed super-structure obtain following result. exact bnsl np-hard directed super-structures made acyclic deleting node. hardness even holds maximum in-degree maximum out-degree directed super-structure bounded section present relevant related work bnsl. related work found respective sections i.e. present related work parameterized complexity section related work treewidth tree decompositions sections section present related work k-neighborhood local search. date handful exact algorithms bnsl proposed. split three groups exact algorithms employ restrictions exact algorithms using restrictions generating target distribution exact algorithms restrictions undirected super-structure algorithms falling group suited small medium sized bayesian networks restrict search space way. hand restrictions used algorithms group general restrictions coming undirected super-structure non-uniform polynomial-time algorithms could obtained using restrictions. best knowledge paper ﬁrst employ in-depth theoretical analysis parameterized complexity bnsl using restrictions undirected super-structure. obtain ﬁrst algorithm exact bnsl uniform polynomial running-time respect structural restriction undirected superstructure. similar approach taken kojima authors propose algorithm exact bnsl uses cluster-decomposition undirected super-structure. even though practical results quite promising authors provide theoretical analysis worst-case complexity algorithm beyond trivial bound also applies exact algorithms group apart exact algorithms also exists variety approximation algorithms using tree decomposition degree-based techniques also number hardness results bnsl restrictions resulting bayesian network. particular bnsl remains np-hard in-degree resulting bayesian network bounded resulting bayesian network poly tree directed path however best knowledge negative results bnsl restrictions super-structure obtained. paper organized follows section introduce basic concepts notions throughout paper. introduce main object study section section shows dynamic programming algorithm tree decomposition order show results provide reﬁned complexity analysis algorithm section section show complexity boundaries exact bnsl using super-structure i.e. obtain results introduce k-local search bnsl section establish results introduce directed super-structure section show results conclude section appendix contains proofs technical claims. preliminary shortened version paper appeared proceedings apart providing higher level detail readability giving examples detailed proofs paper extends previous version four ways adding section related work providing reﬁned complexity analysis main algorithmic result providing novel proof theorem allows decrease upper bound maximum degree super-structure introducing directed super-structure assume reader familiar basic graph theory consider undirected graphs directed graphs directed acyclic graph. write sets nodes edges graph respectively. denote undirected edge nodes directed edge directed write neighbors node i.e. directed undirected. subset write denote induced subgraph undirected directed. digraph deﬁne parents furthermore directed graphs deﬁne union i.e. graph directed undirected edge denote graph {e}). furthermore subset denote graph induced nodes contains node also write instead {v}. call undirected graph skeleton directed graph parameterized complexity provides theoretical framework distinguish uniform non-uniform polynomial-time tractability respect parameter. introduced pioneered downey fellows receiving growing interest reﬂected recent publication monographs hundreds research papers computer journal devoted special issues parameterized complexity order make methods ideas known wide range computer scientists instance parameterized problem pair main part parameter latter usually non-negative integer. parameterized problem ﬁxed-parameter tractable exist computable function constant instances size solved time onc). class ﬁxed-parameter tractable decision problems. fixed-parameter tractable problems also called uniform polynomial-time tractable considered constant instances parameter solved polynomial time order polynomial independent parameterized complexity oﬀers completeness theory similar theory npcompleteness. uses fpt-reductions many-one reductions parameter problem maps parameter other. speciﬁcally problem reduces problem mapping instances instances yes-instance yes-instance computable function computed time onc) computable function constant denotes size parameterized complexity class considered parameterized analog particular implies existence algorithm n-variable example parameterized problem w-complete fpt-reductions parameterized treewidth important graph parameter indicates certain sense treelikeness undirected graph graphs treewidth bounded constant many otherwise intractable problems become tractable. bucket width tree decomposition size largest minus among nodes tree decomposition smallest width optimal. treewidth graph denoted width optimal tree decomposition known tree decomposition graph every clique contained proposition undirected graph graph contains edge i.e. nodes isolated |x|. proof. contain nodes tree node edge together function {vi} every tree decomposition width |x|. main property tree decompositions allows eﬃcient bottom-up dynamic programming algorithms wide spectrum otherwise intractable problems wellknown separation property made precise following proposition. given graph nodes constant possible decide whether treewidth compute optimal tree decomposition time furthermore exist powerful heuristics compute tree decompositions small width practically feasible recently randomized heuristics studied context bayesian reasoning section deﬁne theoretical framework bnsl shall considerations. closely follow abstract framework used parviainen koivisto encloses wide range score-based approaches structure learning. assume input data speciﬁes nodes diﬀerent call non-zero representation. representation also used ﬁelds instance constraint satisfaction allowed tuples constraints listed input alternative representation score call arity-c representation. representation requires polynomial space every node parents small constant reasonable assumption. given arity-c representation score function clearly compute linear time corresponding non-zero representation. hence non-zero representation general therefore base complexity results encoding. tractability results also carry arity-c representation. local score function deﬁned nodes. directed super-structure directed graph contains potential parent i.e. super-structure denoted skeleton directed super-structure. presenting algorithms graphs bounded treewidth convenient consider tree decompositions following normal form triple nice tree decomposition graph tree decomposition tree rooted node node following four types stated section main properties tree decompositions allows eﬃcient algorithms well-known separator property made precise proposition following propositions provide diﬀerent versions separator property tree decompositions node types nice tree decomposition. propositions well-known immediate consequences separator property tree decompositions state without proofs. propositions summarize algorithmic properties nice tree decompositions design algorithm section proposition join node children edge node node proposition introduce node child χ)∪{v}. edge node furthermore proposition forget node child {v}. edge node section present dynamic programming algorithm establish tractability results. remainder section denotes arbitrary ﬁxed constant. recall previous section maximum number potential parent sets node. corollary exact bayesian network structure learning decided polynomial time instances super-structure bounded treewidth. problem decided linear time additionally super-structure bounded maximum degree. proof. ﬁrst statement follows immediately theorem since bounded total input size instance constant. recall section local score function given list tuples non-zero hence bounded total input size instance. second statement follows since bounded whenever maximum degree super-structure bounded clearly following assume given nodes local score function together nice tree decomposition width going establish theorem means dynamic programming algorithm along nice tree decomposition computing local information nodes tree decomposition together form optimal dag. algorithm closely follows general approach used algorithms graphs bounded treewidth main idea underlying algorithm reduce space required store partial solution help so-called record. becomes possible properties tree decomposition manifested propositions record tree node valid represents maximum score dags represented tree node associate valid records representing partial solutions certain sense succinct representation optimal elements dynamic programming algorithm computes valid records bottom manner i.e. starting leave nodes nice tree decomposition algorithm proceeds root node. next three lemmas show compute valid records introduce forget join nodes nice tree decomposition transitive closure irreﬂexive i.e. follows computed considering pairs records checking conditions since every pair records time required check considerations follows largest score strictly admissible dags noted section also largest score whose nodes belong easy compute score top-down traversal starting using information previously stored node also accomplished time close section remark concerning relationship treewidth bayesian network treewidth super-structure. bayesian reasoning usually associates bayesian network moral graph skeleton plus edges joining nodes common child treewidth bayesian network treewidth moral graph observe every bayesian network bounded treewidth super-structure bounded treewidth contains bayesian network. hence bayesian network learned considering super-structures bounded treewidth. hand bayesian network contained super-structure bounded treewidth bayesian network bounded treewidth reasonable assumption nodes bounded number parents. consequently bayesian network learned super-structure bounded treewidth reasonable assume bayesian network bounded treewidth well. keeping records node tree decomposition ﬁxed order improve time needed join node tree decomposition without additional cost sorting. achieve generating records ordered manner keeping track order records stored. disregarded simple preprocessing rule usually allows consider fewer potentially potential parent sets. sequel denote preprocessed score function clearly |pf| every every node network might diﬀerent number potential parent sets. consequently instead using upper bound number potential parent sets realistic consider actual number |pf| potential parent sets node proof. since well-known reduction chickering sketch argument. reduction feedback problem asks whether digraph made acyclic deleting arcs problem np-hard digraphs skeletons maximum degree given instance skeleton maximum degree construct nodes local score function setting {u}) pd}) |pd| cases. clearly super-structure isomorphic undirected graph obtained skeleton subdividing every edge once hence maximum degree maximum degree easy feedback size exists whose skeleton spanning subgraph instance problem partition |vk| informally encode given instance partitioned clique parameter instance exact bayesian structure learning k-clique bayesian network achieve introduce node every node node every contains nodes node achieves maximum score parent encoded local score function nodes choosing proper scores nodes right threshold assure bayesian network whose score higher every node attain maximum score nodes correspond nodes achieve maximum score. follows parent sets chosen nodes correspond edges k-clique directed graph node eij) eij) figure shows representable main idea show claim form representable edge corresponds k-clique formally expressed note contrast theorem essential theorem super-structure unbounded degree degree treewidth bounded problem ﬁxed-parameter tractable corollary unlikely w-hard. important widely used algorithms bnsl based local search methods usually local search algorithm tries improve score given transforming adding deleting reversing time main obstacle local search methods danger getting stuck poor local optimum. possibility decreasing danger perform elementary changes step known kneighborhood local search k-local search short. bnsl improve score nodes k-local search space order therefore carried brute-force k-local search costly even small values therefore surprising practical local search algorithms bnsl consider -neighborhoods only. study parameterized complexity k-local search initiated fellows date collection positive negative results parameterized complexity k-local search various combinatorial optimization problems known. instance k-local search already investigated combinatorial problems graphs problem ﬁnding minimum weight assignment boolean constraint satisfaction instance stable marriage problem ties satisﬁability problem section show k-local search bnsl solved linear time super-structure bounded treewidth bounded maximum degree. result good agreement theorem however contrast exact bnsl might still possible drop restrictions without losing uniform polynomial-time tractability show case. also investigate k-local search bnsl diﬀerent combinations allowed operations reversal addition deletion arc. results mostly negative. fact somewhat surprisingly k-local search bnsl remains hard even edge reversal allowed operation. proposition k-local search bayesian network structure learning decided linear time instances super-structure bounded treewidth bounded maximum degree. following assume given instance k-olocal search bayesian network structure learning together nice tree decomposition width maximum degree assume constants. denote subsets main diﬀerence proof theorem interested solutions k-o-neighbors take account need slightly extend concept record tree node include integer reﬂect cost partial solution smallest number operations needed obtain technical reasons also include mapping assigns forgotten children every node contained allows compute value forget node. straightforward adapt dynamic programming algorithm section setting. observe possible values furthermore every considered partial solution admissible number possible values every bounded follows space requirement store record times space requirement needed store record theorem {add} {del} k-o-local search bayesian network structure learning solvable polynomial time. proof. consider {add} proof {del} analogous. given instance k-{add}-local search bayesian network structure learning. since allowed arcs every step must leave acyclic. follows k-{add}-neighbor node addition incoming arcs increases score resulting digraph remains acyclic. every easily check whether whether obtained addition incoming arcs whether resulting digraph acyclic. proof. slightly modify reduction given proof theorem given instance partioned clique deﬁned correspondence proof theorem distinguish cases depending whether edge since representable easy obtained reversal arcs hence k-o-neighbor reverse k-o-neighbor hence since integer follows again using claim k-clique remaining case i.e. case {add del} claim instance k-o-local search bayesian network structure learning contains k-clique k-oneighbor proof uses arguments case need twice many operations. replace preliminary version paper showed following theorem parametrized reduction red/blue non-blocker claimed w-complete graphs bounded degree however recently found problem fact ﬁxed-parameter tractable proof published work downey fellows contained mistake therefore reduction independent require original instance bounded degree. even allows strengthen result decreasing upper bound maximum degree super-structure theorem {add rev} non-trivial. k-o-local search bayesian network structure learning w-hard parameter hardness even holds super-structure maximum degree evidently acyclic constructed polynomial time. observe super-structure exactly skeleton hence construction nodes degree nodes degree showing maximum degree consequently establish theorem help following claim whose proof found appendix. degree nodes whose degree exceed nodes using binary trees. construction deﬁne local score function follows. obtained applying following actions every delete nodes arcs incident nodes. every nodes arcs every binary tree exactly |ng| leaves. root arcs directed away furthermore deﬁne bijective mapping {lt} leaves tva. theorem provides surprising contrast similar study k-local search max-sat problem ﬁxed-parameter tractable instances bounded degree possible explanation surprising hardness k-o-local search bayesian structure learning could that contrast max-sat global property entire instance must checked. previous sections considered problem exact bnsl k-local search bnsl certain restrictions undirected super-structure. however every strictly admissible solution exact bnsl actually contained restrictive directed super-structure. natural question whether additional information entailed directed super-structure used structural restrictions exact bnsl becomes tractable. well-known exact bnsl becomes signiﬁcantly easier ordering variables given advance. instance given ordering variables exact bnsl becomes solvable polynomial time input given arity-c representation fixing ordering variables corresponds restricting search space acyclic directed super-structures. ﬁrst observation section exact bnsl solvable polynomial time directed super-structure input problem given general non-zero representation. important note corresponding restriction undirected super-structure restricting directed super-structure acyclic impose restrictions undirected super-structure. considering promising result becomes natural whether possible gradually generalize class acyclic directed super-structures. natural approach would consider directed super-structures made acyclic deleting small number nodes. approach looks promising known every ﬁxed directed superstructures made acyclic deleting nodes recognized eﬃciently however show approach unlikely work exact bnsl. furthermore correspondence results previous sections np-hardness even holds additionally bound maximum in-degree proof. follows immediately theorem bounded total input size problem. recall section local score function given list tuples non-zero hence bounded total input size instance. theorem exact bayesian network structure learning np-hard instances made acyclic deleting node. hardness even holds additionally bound maximum in-degree maximum out-degree proof. devise polynomial reduction restricted version -sat every literal contained clauses. version -sat still np-complete -cnf formula variables clauses studied computational complexity bayesian structure learning under various restrictions super-structure considering exact bnsl k-local search bnsl. obtained positive negative results theoretical worst-case complexities problems. main positive result states exact bnsl linear-time tractable super-structure bounded treewidth bounded maximum degree. contrasted positive results negative results using techniques concepts parameterized complexity. theoretical framework particularly well-suited investigation allows ﬁned-grained investigation takes structural aspects problem instances account. results point combinations structural restrictions make problems tractable restrictions cannot dropped without loosing tractability. considering various combinations restrictions systematic allows draw broader picture complexity landscape hope results provide better understanding principles since valid follows represents partial solution maximal respect partial solution follows proposition furthermore hence represented record satisfy conditions claim. furthermore since valid maximality respect follows maximality respect hence valid record converse valid record given. triple deﬁned conditions since valid record represents partial solution maximal respect easy digraph node acyclic satisﬁes condition furthermore maximality respect follows maximality respect hence valid record satisﬁes conditions since valid record represents solution maximal respect every union tuples directed path respectively note proposition assume hence also represented follows maximality respect maximal element converse maximal element since follows record hence partial solution represented maximal respect partial solutions represented clearly also represented maximality respect follows fact maximal element follows proposition hence partial solutions respectively. directed path fti. follows directly deﬁnition represent respectively since maximality respect implies maximality respect respectively. hence valid records respectively easy satisfy conditions claim. respectively. furthermore using proposition follows hence follows condition partial solution represented maximality respect follows maximality respect respectively. follows valid record suppose nodes every follows deﬁnition every unique edge node node edges correspond node follows representable claim every node least local score construction claim trivially satisﬁed every node similarly every holds hence furthermore every holds hence follows ﬁrst assume independent size least obtain reversing arcs decreases score increases score nodes score nodes remains unchanged. hence |s|ε remains show acyclic. assume contains cycle acyclic must contain least newly created arcs i.e. must contain either sink i.e. outgoing arcs cycle cannot contain similarly contain directed path cycle cannot contain hence cycle must contain suppose contains contains directed paths node node follows cannot leave node using consequently cycle must leave node towards neighbor independent follows hence node sink contradicting existence cycle reverse direction assume obtained reversing arcs. note nodes nodes whose scores maximum. hence order higher score score least nodes increased. score node increased reversing arcs easy reversing introduces cycle uses nodes {v}. however every cycle contains destroy cycles additionally reversing reversing decrease score also cheapest destroy cycles. follows order increase score scores least nodes increased nodes score nodes increased manner. mentioned remains show independent suppose independent arcs together directed path directed path form cycle contradicting acyclicity follows independent condition every digraph contains w.l.o.g. assume using condition follows contains condition digraph contain hence true. hence remains show claim ﬁrst show every satisﬁes conditions observe every node show condition observe every node must contains cannot contain cannot contain follows every score follows every exactly arcs condition suppose digraph contains arcs follows would contain cycle contradiction. case analog hence satisﬁes condition hence cannot contain node since nodes arcs tn+m} nodes follows node condition node exactly incoming neighbor ljl. using condition node exactly incoming neighbor respectively. w.l.o.g. assume follows condition incoming neighbor hence contains directed path", "year": 2014}