{"title": "Genetic Algorithms for Evolving Computer Chess Programs", "tag": ["cs.NE", "cs.LG", "stat.ML"], "abstract": "This paper demonstrates the use of genetic algorithms for evolving: 1) a grandmaster-level evaluation function, and 2) a search mechanism for a chess program, the parameter values of which are initialized randomly. The evaluation function of the program is evolved by learning from databases of (human) grandmaster games. At first, the organisms are evolved to mimic the behavior of human grandmasters, and then these organisms are further improved upon by means of coevolution. The search mechanism is evolved by learning from tactical test suites. Our results show that the evolved program outperforms a two-time world computer chess champion and is at par with the other leading computer chess programs.", "text": "abstract—this paper demonstrates genetic algorithms evolving grandmaster-level evaluation function search mechanism chess program parameter values initialized randomly. evaluation function program evolved learning databases grandmaster games. ﬁrst organisms evolved mimic behavior human grandmasters organisms improved upon means coevolution. search mechanism evolved learning tactical test suites. results show evolved program outperforms two-time world computer chess champion leading computer chess programs. despite many advances machine learning artiﬁcial intelligence still areas learning machines yielded performance comparable performance exhibited humans. computer chess difﬁcult areas aim. well known computer games served testbed spawning various innovative important techniques domains applications search automated theorem proving planning learning. addition annual world computer chess championship arguably longest ongoing performance evaluation programs computer science inspired well known competitions robotics planning natural language understanding. computer chess researched ﬁelds within lent successful application conventional learning methods enormous complexity. hence chess programs still resort manual tuning parameters evaluation function search functions typically years trial error. evaluation function assigns score given chess position selective search function decides moves search deeply moves prune earlier stage search tree. chess programs human chess players also provided method tuning search parameters chess program developed method evolving parameters chess program’s evaluation function given tuned search mechanism method evolving parameters search mechanism given highly tuned evaluation function. paper extend previous work providing methodology evolving parameters evaluation function selective search mechanism chess program using genetic algorithms assume access either tuned function tuned search mechanism rather initialize parameters components randomly additionally provide extensive experimental results demonstrating combined approach capable evolving highly tuned chess programs tournament-playing chess programs. observe although experimental results resulting approach presented paper terms evolved parameter values number positions solved using test suite results matches programs differ previous work overall performances comparable. suggests algorithm advantageous sense initially relies databases grandmaster games. ﬁrst stage evolve parameters evaluation function relying straightforward mechanism conducting -ply searches only. since sophisticated selective search mechanism plain mechanism making legal -ply moves. evolving parameters evaluation function incorporating evolved values evolve second stage parameters selective search mechanism. section review past attempts applying evolutionary techniques computer chess. also compare alternative learning methods evolutionary methods argue latter appropriate evolving evaluation function. section presents approach including detailed description framework applied evolving parameters chess program’s evaluation function. section provides ga-based method tuning parameter values selective search mechanism program. section provides extended experimental results section contains concluding remarks. ﬁrst chess programs could pose challenge even novice player current advanced chess programs outperforming strongest human players recent machine matches clearly indicate improvement largely result deep searches possible nowadays thanks hardware speed improved search techniques. search depth early chess programs limited plies nowadays tournament-playing programs easily search dozen plies middlegame tens plies late endgame. despite groundbreaking achievements glaring deﬁciency today’s chess programs severe lack learning capability words despite seemingly intelligent behavior chess programs mere brute-force searchers lack true underlying intelligence. ﬁfty years research area computer games many learning methods employed less complex games. chellapilla fogel created expert-level checkers program using coevolution evolve neural network board evaluators. temporal difference learning successfully applied backgammon checkers although temporal difference learning also applied chess results showed three days learning playing strength program merely quite rating chess program. experimental results conﬁrmed wiering’s formal arguments presented years earlier failure methods rather complex games chess. runarsson lucas compared least squares temporal difference learning preference learning game othello using samples games human competitions held french othello federation. results showed preference learning produces policies better capture behavior expert players also lead higher levels play compared lstd. would interesting apply approach chess complex othello. example average branching factor chess othello smaller checkers issue learning computer chess basically optimization problem. program plays conducting search root search tree current position leaf nodes evaluated static evaluation function. words sophisticated search algorithms knowledge program lies evaluation function. even though automatic tuning methods based mostly reinforcement learning successfully applied less complex games checkers almost impact state-of-the-art chess engines. currently tournament-playing chess programs hand-tuned evaluation functions since conventional learning methods cannot cope enormous complexity problem. underscored following four points. search space smooth unimodal. evaluation function’s parameters chess program highly co-dependent. example ﬁrst author’s computer chess career illustrate this. many cases increasing values three parameters results worse performance fourth parameter also increased improved overall performance would obtained. since search space unimodal consist single smooth hill gradientascent algorithm hill climbing perform poorly. contrast genetic algorithms known perform well large search spaces unimodal. problem tuning learning well understood. discussed detail next section even though programs hand-tuned programmers ﬁnding best value parameter based mostly educated guessing intuition. problem well understood domain-speciﬁc heuristic would outperformed generalpurpose method require global optimum found. goal tuning evaluation function adjust parameters overall performance program enhanced. fact unique global optimum probably exist tuning problem. view four points seems appropriate employ automatic tuning parameters evaluation function. indeed ﬁrst glance appears like optimization task well suited many parameters evaluation function encoded bit-string. randomly initialize many chromosomes representing evaluation function. thereafter needs evolve population highly tuned evaluation functions emerge. however major obstacle hinders application namely ﬁtness function. given parameters evaluation ﬁtness value calculated? straightforward approach would chromosomes generation play series games subsequently record score individual ﬁtness value. main drawback approach large amount time needed evolve generation. result limitations imposed length games played generation also size population involved. population size seconds limit game assuming individual plays individual every generation would take minutes generation evolve. speciﬁcally reaching generation would take days. ﬁgures suggest would rather difﬁcult evolve parameter values chess program relying coevolution alone. example good results attainable reasonable time.) section present approach using evolving state-of-the-art chess evaluation functions. that brieﬂy review previous work applying evolutionary methods computer chess. successful applications evolutionary techniques computer chess subject restrictions. genetic programming successfully employed hauptman sipper evolving programs solve mate-in-n problems play chess endgames. kendall whitwell used evolutionary algorithms tuning parameters evaluation function. approach limited success large number games required small number parameters used evaluation function. evolved program managed compete strong programs search depth severely limited. similarly aksenov employed genetic algorithms evolving parameters evaluation function using games organisms determining ﬁtness. again since method required large amount games evolved parameters evaluation function limited success. tunstall-pedoe also suggested similar approach without providing implementation. gross combined genetic programming evolution strategies improve efﬁciency given search algorithm using distributed computing environment internet. fogel used coevolution successfully improve parameters existing chess program. algorithm learns evaluate chessboard conﬁgurations using positions pieces material positional values neural networks assess speciﬁc sections chessboard. method succeeded modifying parameter values existing chess program gain respectable performance level know successful attempt described using coevolution evolve parameters chess program fully randomized initial values without relying priori knowledge. fogel showed coevolution could employed successfully chess initial material positional parameters already initialized within sensible ranges. furthermore chellapilla fogel successfully employed coevolution evolve parameters checkers program. however applicability samothrakis used covariance matrix adaptation evolution strategy coevolution weighted piece counters othello. wpcs used operate value functions -ply minimax player. othello players strong absolute terms rather othello interesting domain study measure performance intransitivities coevolution. using cma-es within coevolutionary setting authors succeeded evolving strongest wpcs othello published yet. coevolutionary approach yields interesting results othello would challenging apply chess complex othello main components chess program evaluation function search mechanism. previous work provided mentor-assisted approach reverse engineering evaluation function target chess program thereby evolving comparable evaluation function. approach relied fact mentor provides evaluation score given position using large positions evaluation score target program obtained position. subsequently parameters evaluation function evolved mimic scores provided mentor. mentor-assisted approach produces evaluation function mimics given chess program dependent access evaluation score target program. order extend concept mentor-assisted evolution learning humans well combined evolution coevolution evolving parameter values evaluation function simulate moves human grandmaster without relying availability evaluation scores computer chess programs versions assumed program already contained highly tuned search mechanism. past attempts automatic learning chess focused evaluation function efforts made evolve automatically parameters controlling search mechanism program. moriarty miikkulainen used neural networks tuning search othello program mentioned paper method easily applicable complex games chess. cazenave presented method learning search-control rules method cannot applied chess bj¨ornsson marsland presented method automatically tuning search extensions chess. given test positions parameters optimize tune values parameters using gradient descent. program processes positions position records number nodes solution found. optimization goal minimize total node count positions. iteration method modiﬁes extension parameters small value processes positions recording total node count. thus given parameters optimized iteration method processes positions times. parameter values updated iteration total node count decreases. bj¨ornsson marsland applied method tuning values four search extension parameters check passed pawn recapture one-reply extensions. results show method optimizes values parameters decreased. despite success gradient-descent method tuning values four search extension parameters cannot used efﬁciently optimize large parameters consisting critical selective search parameters search extensions comprise parameters. fact gradient-descent approach requires processing whole test parameters iteration. might practical four parameters becomes difﬁcult number parameters involved considerably larger. additionally unlike optimization search extensions parameter values mostly independent search methods would exhibit high interdependency parameter values consequently would difﬁcult apply gradientdescent optimization. previous work demonstrated given chess program highly tuned evaluation function evolve search parameters evolving parameters overall performance test suites improved. mentioned previously also demonstrated evolve evaluation function using given highly tuned search mechanism. parameters evaluation function easily represented chromosome. however applying ﬁtness function complicated. previously noted establishing ﬁtness evaluation means playing numerous games organisms generation quite difﬁcult previous work mentor-assisted evolution described ﬁtness value issued running grandmaster-level chess program positions recording position difference evaluation score computed organism score computed target program. deﬁne difference evaluation error magnitude inversely proportional paper extends signiﬁcantly previous framework. speciﬁcally present learning approach relies widely available databases grandmaster-level games. task signiﬁcantly difﬁcult using existing chess programs mentors since position taken game available information move actually played approach based steps shown figure although performing search position seems costly process fact consumes little time. conducting -ply search amounts less millisecond typical chess program average machine thousand positions processed second. allows large positions training set. running abovementioned process number times obtain several evolved organisms. random initialization chromosomes time process applied different best evolved organism obtained. comparing best evolved organisms different runs observe even though similar playing strength evolved parameter values differ playing style. order improve obtained organisms next single-population coevolution phase. phase evolved organisms play other ﬁtness function applied based relative performance. running coevolution predetermined number generations best evolved organism selected best overall organism. results section indicate best best organism improves upon organisms evolved evolutionary phase only. noted before difﬁcult evolve parameter values chess program randomly initialized values relying coevolution alone. difference case population size small initial organisms already well tuned rather randomly initialized. evaluation function program consists parameters even though small number parameters comparison programs parameters used cover important aspects position e.g. material piece mobility centricity pawn structure king safety. parameters evaluation function represented binary bit-string initialized randomly. although necessarily superior alternative encoding method problem.) value pawn ﬁxed value serves reference parameter values. except four parameters representing material values pieces parameters assigned ﬁxed length bits parameter. obviously many parameters bits sufﬁce. however allocating ﬁxed length bits parameters ensures priori knowledge bias algorithm way. note point program’s evaluation function merely random initialization apart rules game program essentially game skills all. experiments used database games grandmasters rated randomly picked position game. picked winning positions only i.e. positions side move ultimately game positions selected positions training testing. generation organism algorithm translates chromosome bit-string corresponding evaluation function. test positions performs -ply search using decoded evaluation function best move returned search compared grandmaster actual game. move deemed correct move played grandmaster incorrect otherwise. ﬁtness organism calculated square total number correct moves. note unlike mentor-assisted approach mimicking existing chess programs provide numeric values position -bit information processed position underscores learning merely player’s moves much challenging using computer programs mentors. special ﬁtness function described above used standard implementation gray coded chromosomes uniform crossover elitism note game different sequence opening moves selected opening book ﬁle. ensures game unique generation rank-based selection applied selecting organisms breeding. elitism used well ensures best organism survives next generation. especially critical light small population size. parameters remain unchanged uniform crossover crossover rate mutation rate note phase still tuned search mechanism. coevolution phase described above basic alpha-beta search mechanism without advanced selective search mechanisms result playing strength program stage substantially limited. however pose problem since limitation equally applies programs play other. evolving parameter values evaluation function incorporating values best evolved organism program focus evolving parameter values search mechanism. several popular selective search methods employed tournament-playing programs. methods allow program search selectively i.e. prune uninteresting moves earlier thus spending additional time promising moves. instead searching moves certain ﬁxed depth moves searched deeply others. popular selective search methods null-move pruning futility pruning multi-cut pruning selective extensions description methods found selective search methods requires several critical parameters tuned. normally parameters manually tuned usually years experiments manual optimizations. order apply tuning parameters selective search methods automatically represent parameters binary chromosome parameter’s number allocated bits based reasonable ranges values parameter. table presents chromosome range values parameter. note search extensions notion fractional applied units organism total node count positions. imposed upper search limit nodes position. correct move found searching nodes search stopped upper limit returned number nodes position. naturally positions solved larger search limit chosen also time spent subsequently whole evolution take much longer. lower total node count positions higher ﬁtness organism using ﬁtness measure instead taking straightforward manner number solved positions beneﬁt deriving ﬁtness information position. rather obtaining -bit information position numeric value obtained also measures quickly position solved. thus organism encouraged solve positions also ﬁnding quicker solutions already solved test positions. similarly used standard implementation gray coded chromosomes ﬁtness-proportional selection uniform crossover elitism. organisms initialized random values. following parameters used null-move null-move reduction null-move adaptivity null-move adaptivity depth futility depth futility threshold depth- futility threshold depth- futility threshold depth- multi-cut multi-cut reduction multi-cut depth multi-cut move multi-cut check extension one-reply extension recapture extension passed pawn extension mate threat extension present results running evolutionary process described previous sections. also provide results several experiments measure strength evolved program comparison crafty former two-time world computer chess champion commonly used baseline testing chess programs. employ optimization goal bj¨ornsson marsland ﬁtness function. tactical test positions encyclopedia chess middlegames used training. position test suite predetermined best move. chromosome processes positions position attempts predetermined best move fast possible. instead counting number correctly solved positions used number nodes organism process order best move. position recorded number nodes organism searched ﬁnding correct move. total node count figure shows number positions solved best organism population average generations speciﬁcally results indicate average number solved positions ﬁrst generation. note even without chess knowledge organism would occasionally select correct move random guessing. additionally since randomly initialized parameters contain positive values organism basic captures opponent’s pieces without possessing real chess knowledge. positions corresponds positions. elitism number solved positions best organism monotonously increasing since best organism preserved. entire -generation evolution took approximately hours. ﬁrst glance solution rate might seem high. however light fact organisms base move -ply search ﬁgure quite satisfactory. words conducting merely -ply search evolved organism selects successfully grandmaster’s carefully analyzed move three cases. completion learning phase used additional positions aside testing. best evolved organism perform -ply search positions. number correctly solved positions indicates ﬁrst positions used training cover types positions arise success rate testing close success rate training set. repeating evolutionary process obtained time best evolved organism different evolved parameter values. produced different grandmaster-level program. even though performance independently evolved best organisms fairly similar goal improve upon organisms create enhanced best best organism. applied single-population coevolution enhance performance program. running evolution times different best organisms obtained. using organisms starting population applied generations organism played organism four times every round. game limited seconds practice coevolution phase approximately hours. figure provides average evolved values best individual obtained running method times conventionally knight bishop valued pawns rook queen valued pawns respectively values used chess programs. however well known grandmasters frequently sacriﬁce pawns positional advantages practice pawn assigned lower value. interestingly best organism assigns pawn half value usually assigned relative pieces highly unconventional chess programs. implies evolved organism learns parameter values human grandmasters ends adopting also less materialistic style play. also reﬂected playing style ultimate evolved program frequently sacriﬁces pawns gaining positional advantages. incorporating best evolved parameters evaluation function program evolved search parameters. figure shows total node count positions best organism population average generation. table provides evolved values best individual. null-move null-move reduction null-move adaptivity null-move adaptivity depth futility depth futility threshold depth- futility threshold depth- futility threshold depth- multi-cut multi-cut reduction multi-cut depth multi-cut move multi-cut check extension one-reply extension recapture extension passed pawn extension mate threat extension incorporate values obtained together values obtained evolution parameter values evaluation function program call program evol*. program contains obtained parameter values evaluation function search mechanism. measure performance evol* conducted series matches chess program crafty crafty successfully participated numerous world computer chess championships direct descendent cray blitz wccc winner frequently used literature standard reference. order obtain measure performance gain coevolution phase also compared performance evol* version evol* uses parameters evaluation function evolved evolutionary phase call program evol. search mechanism used parameter setting evol* evol. proper comparison evol* evol crafty process test suite seconds position. table provides results. seen evol* evol solve signiﬁcantly positions crafty. superior performance evol* test surprising evolved training set. therefore order obtain unbiased performance comparison conducted series matches crafty using time control minutes game side. table provides results. results show evol* outperforms crafty terms solving tactical test positions importantly test matches. results establish although search parameters evolved randomly initialized chromosomes resulting organism outperforms grandmaster-level chess program minute games. extended experiments compare performance evol* several world’s commercial chess programs. programs included junior fritz hiarcs. junior world microcomputer chess championship world computer chess championship junior played -game match legendary former world champion garry kasparov resulted tie. junior ultimate computer chess challenge organized world chess federation defeating fritz fritz world computer chess championship drew brains bahrain match former world champion vladimir kramnik drew four-game match garry kasparov. fritz defeated incumbent world champion vladimir kramnik hiarcs world microcomputer chess championship. drew four-game match grandmaster evgeny bareev ranked player world. hiarcs international paderborn computer chess championship. mentioned earlier evol* experimental descendant program falcon successfully participated three world computer chess championships. world computer chess championship falcon used earlier version evolutionary approach described paper. competing average laptop nine strong chess programs ga-based version falcon reached second place world computer speed chess championship sixth place world computer chess championship. highly surprising results especially light huge hardware handicap falcon relatively competitors demonstrate capabilities ga-based approach. examine performance evol* long time control conditions conducted series matches evol* abovementioned tournamentplaying programs time control hour game side. match consisted games. table provides results. results show performance genetically evolved program commercial chess programs. superior performance junior well noted serve source inspiration. addition table compares tactical performance evolved organism three commercial programs. results show number positions solved program. similar trend emerges i.e. evolved organism commercial programs. results abovementioned tests establish even though parameters program evolved chromosomes initialized randomly resulting organism commercial chess programs. contrast previous successful attempts focused mimicking evaluation function chess program acting mentor approach presented paper focuses evolving parameters evaluation function search mechanism. done observing solely grandmaster-level games available information guide evolution moves played games. learning actual moves grandmaster-level games ﬁrst phase evolution obtained several evaluation functions. speciﬁcally running procedure times obtained evolved evaluation functions served initial population second coevolution phase. using coevolution case proved successful initial population random relatively well tuned ﬁrst phase evolution. used genetic algorithms evolve parameters search mechanism. starting randomly initialized values method evolves parameters. combining parameter sets resulted performance tournament-playing programs. overall paper provides best knowledge ﬁrst methodology automatic learning parameters evaluation function search mechanism randomly initialized values computer chess. note although experimental results module presented differ previous work highly tuned search mechanism overall performance observed comparable. thus approach paper superior previous efforts achieves grandmaster-level performance without relying assumptions. results presented paper point vast potential applying evolutionary methods learning human experts. believe approach could applied wide array problems essentially reverse engineering knowledge human expert. successfully used genetic algorithms evolve parameter values chess program would interest apply natural hansen ostermeier. completely derandomized self-adaptation evolution strategies. evolutionary computation hauptman sipper. using genetic programming evolve chess endgame players. proceedings european conference genetic programming pages springer lausanne switzerland hauptman sipper. evolution efﬁcient search algorithm mate-in-n problem chess. proceedings european conference genetic programming pages springer valencia spain bj¨ornsson t.a. marsland. multi-cut pruning alpha-beta search. proceedings first international conference computers games pages tsukuba japan o.e. david n.s. netanyahu. extended null-move reductions. proceedings international conference computers games eds. h.j. herik m.h.m. winands pages springer beijing china o.e. david h.j. herik koppel n.s. netanyahu. simulating human grandmasters evolution coevolution evaluation functions. proceedings genetic evolutionary computation conference pages montr´eal canada d.b. fogel t.j. hays s.l. hahn quon. evolution self-learning chess program. proceedings ieee symposium computational intelligence games ieee press piscataway d.b. fogel t.j. hays s.l. hahn quon. blondie chess program competes fritz human chess master. proceedings ieee symposium computational intelligence games pages ieee press reno kendall whitwell. evolutionary approach tuning chess evaluation function using population dynamics. proceedings congress evolutionary computation pages ieee press world trade center seoul korea kennedy eberhart. evolutionary approach tuning chess evaluation particle swarm optimization. proceedings ieee international conference neural networks pages piscataway d.e. moriarty miikkulainen. evolving neural networks focus minimax search. proceedings national conference artiﬁcial intelligence pages seattle t.p. runarsson s.m. lucas. imitating play game trajectories temporal difference learning versus preference learning. ieee conference computational intelligence games pages granada spain samothrakis s.m. lucas t.p. runarsson robles. coevolving game-playing agents measuring performance intransitivities. ieee transactions evolutionary computation schaeffer hlynka jussila. temporal difference learning applied high-performance game-playing program. proceedings international joint conference artiﬁcial intelligence pages seattle a.m. turing strachey m.a. bates b.v. bowden. digital computers applied games. faster thought symposium digital computing machines b.v. bowden pages pitman london rating system developed arpad ofﬁcial system calculating relative skill levels players chess. grandmaster generally associated rating values novice player rating values elo.", "year": 2017}