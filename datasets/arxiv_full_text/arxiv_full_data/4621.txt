{"title": "An Enhanced Features Extractor for a Portfolio of Constraint Solvers", "tag": ["cs.AI", "cs.LG"], "abstract": "Recent research has shown that a single arbitrarily efficient solver can be significantly outperformed by a portfolio of possibly slower on-average solvers. The solver selection is usually done by means of (un)supervised learning techniques which exploit features extracted from the problem specification. In this paper we present an useful and flexible framework that is able to extract an extensive set of features from a Constraint (Satisfaction/Optimization) Problem defined in possibly different modeling languages: MiniZinc, FlatZinc or XCSP. We also report some empirical results showing that the performances that can be obtained using these features are effective and competitive with state of the art CSP portfolio techniques.", "text": "language availability huge dataset instances fostered study diﬀerent solvers exploited order improve performances thus bringing deﬁnition several portfolio solvers sat. unfortunately growth exists ﬁeld solver uses portfolio approach case-based reasoning system cphydra several reasons sat. first solving ﬁeld complex constraints arbitrary complex supported solvers. moreover standard input language exists immediately available dataset constraint solving problems. limitations aﬀect also cphydra indeed treat problems expressed xcsp format uses rather small portfolio extract limited number features model nevertheless cphydra able international solver competition witnesses portfolios powerful also domain. decided minizinc source format tool nowadays used supported general language specify constraint problems. minizinc supports also optimization problems source format used minizinc challenge surviving international competition evaluate performances constraint solvers. technical point view minizinc compiled level language flatzinc using global constraint redeﬁnitions format used extract features. however framework ofwe decided start minizinc speciﬁcation order capture extensive global constraints lost compilation flatzinc depending solver speciﬁc redeﬁnitions. recent research shown single arbitrarily eﬃcient solver signiﬁcantly outperformed portfolio possibly slower on-average solvers. solver selection usually done means supervised learning techniques exploit features extracted problem speciﬁcation. paper present useful ﬂexible framework able extract extensive features constraint problem deﬁned possibly diﬀerent modeling languages minizinc flatzinc xcsp. also report empirical results showing performances obtained using features eﬀective competitive state portfolio techniques. past decade witnessed signiﬁcant increase number constraint solving systems deployed solving constraint satisfaction problems well recognized within ﬁeld constraint programming diﬀerent solvers better solving diﬀerent problem instances even within problem class also shown areas satisﬁability testing integer linear programming best on-average solver performed portfolio possibly slower on-average solvers. nutshell portfolio approach constraint solving seen methodology exploits signiﬁcant variety performances observed diﬀerent algorithms combines order create globally better solver. crucial step performance portfolio solver selection solvers composing portfolio solving speciﬁc problem instance. selection process usually performed using machine learning techniques based features extracted instances need solved. portfolio approaches extensively studied used solving ﬁeld. large number diﬀerent solvers available presence standard input fers full compatibility xcsp flatzinc. indeed hand developed compiler xcspmzn converting problem instances xcsp minizinc preserving important global constraints. hand feature extractor tool called mznfeat supports natively flatzinc format extract features every flatzinc model preliminary validation framework following approach presented built diﬀerent portfolio solvers consisting solvers taken used minizinc challenge used oﬀ-the-shelf machine learning algorithms well state portfolio techniques order exploit extracted features. obtain extensive evaluation possible tests conducted using dataset obtained combining instances minizinc benchmark dataset last international constraint solver competitions results indicate performances obtained using features competitive state portfolios techniques. paper structure. section recall preliminary notions discuss related literature. section describe technical details framework section discuss empirical validation. finally section report concluding remarks. allowed assignments values variables given goal normally solution assignment variables satisﬁes constraints problem suitable constraint solver. machine learning broad ﬁeld uses concepts computer science mathematics statistics information theory complexity theory biology cognitive science construct computer programs automatically improve experience. particular classiﬁcation well-known problem that given ﬁnite number classes consists identifying class belongs observation. problem solved using appropriate classiﬁer essentially function mapping instance characterized discrete continuous features class classiﬁer deﬁned basis dataset instances whose class already known trying exploit knowledge properly classify instance. previously mentioned portfolio approach general methodology that case allows exploits synergies diﬀerent solving algorithms order obtain globally better solver. consider portfolio solvers particular solver consisting number diﬀerent solvers problem given portfolio tries predict best constituent solver solving speciﬁc problem uses solving solver selection process clearly fundamental part success approach usually performed using techniques. particular classiﬁcation techniques often used make predictions basis features extracted relevant problem instances. also hybrid approaches integrate techniques order improve accuracy predictions maximize number solved problems. best knowledge cphydra currently solver uses portfolio approach. feature extraction uses code mistral constituent solvers able extract features. feature extraction code improved allowing extraction additional features. main weakness cphydra concerns fact scalable w.r.t. number constituent solvers since solve np-hard problem decide schedule solvers solve instance. moreover assumes problem instances formulated xcsp format less expressive minizinc. hand several portfolio solvers sat. solver conjugates ﬁxed-time static solver schedule dynamic selection longrunning component solver. solves scalability issues cphydra scheduling computed oﬄine covers time limit. given instance solved short runs designated solver chosen runtime executed. satzilla solver relies runtime prediction models select solver fastest running time given problem instance. last version consistently outperforms previous ones uses weighted random forest approach provided explicit cost-sensitive loss function punishing misclassiﬁcations direct proportion impact portfolio performance. instance-speciﬁc algorithm conﬁguration tool isac used solver selector. isac optimally tune solver parameters basis given instance features behind primary assumption solver consistent performance instances clustered together. empirical evaluation comparison portfolio approaches presented. diﬀerent portfolio sizes evaluation metrics used dataset xcsp instances taken last icscs. recent works show interest algorithm runtime prediction quite general growing. detailed overview state context provided also describes features predicting algorithm runtime problems. feature ﬁltering techniques isac tool described instead using traditional approaches authors introduce evaluation functions quickly evaluate subsets features. numerical results domains show number features signiﬁcantly reduced often providing considerable performances gains. moreover authors introduce snnap alternative view isac uses existing features predict best three solvers particular instance. brand classiﬁer selects solvers based cost-sensitive hierarchical clustering model presented cshc solver gold medals competition finally number tools developed order improve portfolio solvers usability. snappy simple training-less algorithm portfolio relies nearest neighbors prediction mechanism. llama instead framework facilitates exploration diﬀerent portfolio techniques problem domain supporting common solver selectors possibly combining them. minizinc nowadays used language encode csps xcsp mainly used past international constraint solver competition ended nevertheless icsc dataset biggest dataset instances existing today. hence order exploit dataset building better portfolios developed compiler xcsp minizinc. xcspmzn developed adapting converter xcsp gecode used particular support xcsp abridged notation. since focused mainly consider xcsp extensions like weighted constraints quantiﬁers constraints. code written using well known libxml libraries. exploiting fact minizinc expressive xcsp translation straightforward. notable diﬀerence compilation extensional constraints native feature xcsp only. overcome limitation used table global constraint encoding allowed tuples conjunction disjunctions inequalities mapping forbidden tuples. global constraints concerned xcsp supports majority global constraints deﬁned global constraint catalog since catalog hundreds global constraints full xcsp support means provide encoding huge number them. however scope chosen support mznfeat tool allows extract minizinc model features static features obtained parsing problem instance dynamic obtained running gecode solver short since complexity minizinc language makes extraction syntactical features quite diﬃcult decided process directly minizinc instances. instead compile flatzinc lower level language syntax mostly subset minizinc obtained minizinc using mznfzn tool provided minizinc suite. develop mznfeat ﬁrst generated flatzinc parser minizinc suite using standard flex bison parser tools. then generated parser extended integrating suitable code extracting static features compilation flatzinc raised design choices since global constraints deﬁned minizinc translated diﬀerent ways. example alldifferent global constraint decomposed default conjunction inequalities. however instance target solver compilation gecode speciﬁc deﬁnitions used avoid decomposition. feature minizinc starting general model solver produce specialized flatzinc redeﬁning global speciﬁcations. since proper treatment global constraints dramatically improve solver performances thought keeping track global constraints used rather important. reason decided consider input format flatzinc obtained using gecode redefinitions. choice justiﬁed fact gecode gold medal categories minizinc challenge handles natively diﬀerent global constraints. speciﬁc flatzinc model obtained also exploited collect dynamic features. done launching gecode interpreter short runs summarizing given generic minizinc model input remark step applicable every flatzinc model moreover steps totally independent therefore could parallelized even reversed. instance could useless compute static features given instance solved gecode trying compute dynamic features. inspiration adapting presented although features quite generic others speciﬁc flatzinc gecode details technical details defer interested reader variables speciﬁed term variable refer unbounded variables. variable bounded either bounded constant value bounded another variable aliases variable compute corresponding features assuming replace aliased variable moreover denote domain size variable number constraints occurs) deﬁne similarly denote constraints constrain least variable. global constraints consider total number global constraints ratio gc|c| number global constraints equivalence classes grouped global constraints gecode supports. noticed huge instances generation graphs time space consuming. limit time memory needed extract features imposed timeout seconds compute features. case timeouts features default value example class bool includes constraints bool bool bool bool bool bool constraint graph variable graph also known dual primal graph respectively. objective named variable optimized µdom σdom average standard deviation {dom resp. µdeg σdeg average standard deviation {deg resp. compute following since aware tools could extract features form minizinc models making direct comparison mznfeat similar tools possible. therefore although main purpose work identify signiﬁcant features particular portfolio approach decided compare mznfeat features extractor developed mistral extended using icsc dataset. precisely measured compared solving time number problem instances solved diﬀerent portfolios techniques using hand features extracted mznfeat hand extracted mistral. taking reference methodology results considered promising portfolio techniques evaluated performances using time limit seconds threshold used icsc. building portfolios reproduced best performing approaches namely satzilla best oﬀ-the-shelf approaches viz. random forest using corresponding weka classiﬁers default parameters. portfolios built using following diﬀerent solvers minizinc challenge bprolog fznsmt g/fd g/lazyfd g/mip gecode izplus minisatid mistral or-tools. every approach tested using -repeated -fold cross-validation dataset randomly partitioned disjoint sets called folds. folds treated turn test considering union remaining folds training data. order avoid possible overﬁtting problem random generation folds repeated times. every instance every test computed solving strategy proposed portfolio approach simulated checking solving strategy able solve instance within time cap. evaluated performances every approach terms average solving time percentage solved instances order compare mznfeat w.r.t. features extracted mistral considered instances icsc successfully compiled minizinc using gecode speciﬁcations within seconds. compilation time exceeds limit reasonable assume directly gecode solve problem instance since recompiling minizinc model using speciﬁcation diﬀerent solver would wasting entire time allowed solve instance. also discarded dataset instances solved mistral gecode less seconds. instances discarded prediction needed problems already solved features extraction. benchmark consisting instances following called benchmark note version mistral used minizinc challenge completely version solver used extracting features xcsp. here version mistral used icsc competition. instances icsc successfully converted minizinc. above discarded second dataset instances whose compilation required seconds well instances solved gecode less seconds. case ended larger dataset consisting instances icsc minizinc benchmark. following refer dataset benchmark order evaluate portfolio performances simulated execution solvers keeping track solving time solver every time needed features extraction. average time needed compute features instances benchmark seconds maximum value seconds. however median seconds hence half instances total time required computing features less seconds. worth noting half instances time needed extract features strongly inﬂuenced compilation flatzinc fact many instances huge therefore compilation expensive. nevertheless features extraction performed less minute instances. approaches tested portfolios diﬀerent sizes considering maximum solvers. denoting solvers size portfolio composition computed considering subset following elected minisatid backup solver since solved greatest number instances within time limit seconds. backup solver used case portfolio selects solver fails prematurely. feaused make predictions. useless features i.e. tures constants instances dataset removed. plot presents obtained using diﬀerent portfolio techniques ﬁrst oﬀ-the-shelf approaches simulated using weka tool default parameters others comes ﬁeld. baseline used virtual best solver i.e. oracle able choose best solver every instance. results clearly indicate performances achieved using mznfeat’s features competitive w.r.t. obtained using mistral’s features. usually diﬀerence rather small even though instance classiﬁer allows solve even instances using tool. considering tested techniques portfolio sizes worst case able solve less instances while average instances could solved using features extracted mznfeat. also worth noticing peak performances reached using approach features extracted tool. figure shows performances achieved using different portfolios techniques features extracted mznfeat extended benchmark results similar presented indeed also case best portfolios approaches satzilla approaches lower performances. worth noticing also tried diﬀerent variants default weka classiﬁers obtained tuning parameters using meta-classiﬁers performing features selection; despite changes observed signiﬁcant diﬀerences. moreover even experiments strong anti-correlation psi. diﬀerently peak performances reached relatively small portfolios addition solver almost always increases percentage solved instances. finally remark also case empirical results clearly indicate portfolio approach could better single-solver approach considering instance peak performances benchmark able solve instances single best solver minisatid maximum w.r.t. virtual best solver particular able close vbs. conclude section considerations features preprocessing. work tried collect features large general possible obtaining number features triple mistral. obviously features equally signiﬁcant. example although principle minizinc allows ﬂoat variables constraints none considered instances contain constructs. moreover considered csps features related optimization assumed default value. following usually done work presented framework able extract extensive features satisfaction optimization problems deﬁned possibly diﬀerent modeling languages minizinc flatzinc xcsp. main components framework xcspmzn compiler converting instances xcsp minizinc specially mznfeat ﬂexible extendible tool extracting features minizinc model. deem work could serve prototype creation modern constraint solver adopting portfolio approach. thanks features extracted mznfeat pretty straightforward build solver capable exploiting portfolio diﬀerent solvers requirement solvers must support minizinc format. future work planning assemble solver possibly enrolling minizinc challenge. features proposed tested using best performing portfolio techniques evaluated comparison existing techniques scope paper; nevertheless still interested testing portfolio approaches another future direction concerns improvement quality features. hand framework ﬂexible enough allow without great eﬀort addition sophisticated features hand predictions accuracy could signiﬁcantly improved appropriate feature ﬁltering techniques. noticed feature signiﬁcance depend portfolio approach adopted hence provide subset signiﬁcant features works well portfolio approaches. thanks mznfeat however possible focus particular approach devise diﬀerent ﬁltering techniques improving performance. promising extension work take account also constraint optimization problems fact minizinc syntax cops similar csps signiﬁcant diﬀerence concerns solve goal that case optimization deﬁnes integer expression need minimized maximized. since mznfeat currently already able process minizinc cops future planning investigate portfolio approach eﬀective solving commajority current approaches decided remove constant features features set. addition scaled values range ended reduced features conducted experiments. authors show using suitable evaluation functions possible perform feature ﬁltering that hand drastically reduces feature number hand also provides performances gains. therefore tried apply diﬀerent features selection techniques benchmark oﬀ-the-shelf approaches exploiting tuning number weka algorithms namely bestfirst geneticsearch greedystepwise infogainattributeeval ranker unfortunately seen signiﬁcant improvements performance gains always however worth noting merely removing constant features scaling given range could lead major enhancements small computational eﬀort. consider instance figure shows comparison performances obtained benchmark using normalized normalized features. seen diﬀerence considerable performance obtained normalizing features ranges minimum maximum binatorial optimization problems. opinion best portfolio technique practices developed satisfaction problems could equally good optimization ﬁeld. instance assuming cops average require time csps reach optimal solution approach like effective since cops could solved allowed time. finally order evaluate solver metrics considered. fact often real world better good solution short time rather consume much time optimal value. starting assumption reasonable give solver reward proportional distance solution found optimal one.", "year": 2013}