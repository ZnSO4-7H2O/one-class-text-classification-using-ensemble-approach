{"title": "Deep learning-based numerical methods for high-dimensional parabolic  partial differential equations and backward stochastic differential equations", "tag": ["math.NA", "cs.LG", "cs.NE", "math.PR", "stat.ML", "65M75, 60H35, 65C30"], "abstract": "We propose a new algorithm for solving parabolic partial differential equations (PDEs) and backward stochastic differential equations (BSDEs) in high dimension, by making an analogy between the BSDE and reinforcement learning with the gradient of the solution playing the role of the policy function, and the loss function given by the error between the prescribed terminal condition and the solution of the BSDE. The policy function is then approximated by a neural network, as is done in deep reinforcement learning. Numerical results using TensorFlow illustrate the efficiency and accuracy of the proposed algorithms for several 100-dimensional nonlinear PDEs from physics and finance such as the Allen-Cahn equation, the Hamilton-Jacobi-Bellman equation, and a nonlinear pricing model for financial derivatives.", "text": "propose algorithm solving parabolic partial diﬀerential equations backward stochastic diﬀerential equations high dimension making analogy bsde reinforcement learning gradient solution playing role policy function loss function given error prescribed terminal condition solution bsde. policy function approximated neural network done deep reinforcement learning. numerical results using tensorflow illustrate eﬃciency accuracy proposed algorithms several -dimensional nonlinear pdes physics ﬁnance allen-cahn equation hamilton-jacobibellman equation nonlinear pricing model ﬁnancial derivatives. example semilinear heat partial diﬀerential equation formulation suitable stochastic control problem nonlinear feynman-kac formula forward discretization backward stochastic diﬀerential equation backward stochastic diﬀerential equations setting allen-cahn equation hamilton-jacobi-bellman equation pricing european ﬁnancial derivatives diﬀerent interest rates borrowing lending multidimensional burgers-type pdes explicit solutions example quadratically growing derivatives explicit solution time-dependent reaction-diﬀusion-type example pdes oscillating explicit solutions developing eﬃcient numerical algorithms high dimensional partial diﬀerential equations challenging tasks applied mathematics. well-known diﬃculty lies curse dimensionality namely dimensionality grows complexity algorithms grows exponentially. reason limited number cases practical high dimensional algorithms developed. linear parabolic pdes feynman-kac formula monte carlo methods develop eﬃcient algorithms evaluate solutions given space-time locations. class inviscid hamiltonjacobi equations darbon osher recently developed algorithm performs numerically well case high dimensional inviscid hamilton-jacobi equations; darbon osher’s algorithm based results compressed sensing hopf formulas hamilton-jacobi equations. general algorithm parabolic pdes based feynman-kac bismut-elworthy-li formula multilevel decomposition picard iteration developed shown quite eﬃcient number examples ﬁnance physics. complexity algorithm shown semilinear heat equations dimensionality problem required accuracy. recent years class techniques called deep learning emerged machine learning proven eﬀective dealing large class high dimensional problems computer vision natural language processing time series analysis etc. success fuels speculations deep learning might hold solve curse dimensionality problem. emphasized present time theoretical results support claims although practical success deep learning astonishing. however prevent trying apply deep learning problems curse dimensionality issue. paper explore deep learning solving general high dimensional pdes. necessary formulate pdes learning problem. motivated ideas deep learning-based algorithms developed high dimensional stochastic control problems explore connection parabolic pdes backward stochastic diﬀerential equations since bsdes share common features stochastic control problems. view bsde stochastic control problem gradient solution policy function. stochastic control problems viewed model-based reinforcement learning problems. instead formulating initial value problems commonly done literature consider terminal conditions since facilitates making connections bsdes. terminal value problems obviously transformed initial value problems vice versa. remainder section present rough sketch derivation proposed algorithm refer deep bsde solver. derivation restrict ourself speciﬁc class nonlinear pdes restrict ourself semilinear heat equations below) refer subsections general introduction deep bsde solver. speciﬁcally probability space d-dimensional standard brownian motion normal ﬁltration generated f-adapted rd-valued stochastic processes continuous sample paths every every f-adapted stochastic process continuous sample paths satisﬁes holds p-a.s. associated stochastic control problem computed approximatively employing policy details). connection stochastic control problem based nonlinear feynman-kac formula links pdes bsdes below). approximations turn computed recursively using together deep learning approximations speciﬁcally real numbers continuous functions stochastic processes satisfy approximate vector stochastic gradient descent-type approximation methods thereby obtain random approximations rρϑ. suﬃciently large employ random variable subsection describe algorithm proposed article speciﬁc situation consideration batch normalization employed plain-vanilla stochastic gradient formulation proposed algorithm general case framework rd×rk×rk×d ×rd×rd functions probability space independent d-dimensional standard brownian motions real numbers )n∈{...n} allows incorporate diﬀerent algorithms discretization considered forward stochastic diﬀerential equation deep bsde solver subsection dynamics associated stochastic processes rough sketch architecture deep bsde solver). neural networks consists layers hidden layers output layer number hidden units hidden layer equal also adopt batch normalization right matrix multiplication activation. employ rectiﬁer function weights network initialized using normal uniform distribution without pre-training. numerical experiments presented performed python using tensorflow macbook gigahertz intel core micro processor gigabytes megahertz double data rate type three synchronous dynamic random-access memory also refer python code subsection implementation deep bsde solver case -dimensional allen-cahn table approximatively calculate mean standard deviation relative l-approximatin error associated standard deviation relative l-approximatin error associated runtime seconds needed calculate realization based independent realizations table also depicts mean loss function associated standard deviation loss function associated based monte carlo l-approximation error associated pictured mean loss function associated pictured approximation errors table figure value exact solution replaced value which turn calculated means branching diﬀusion method analytical numerical results branching diﬀusion method literature). subsection apply deep bsde solver subsection hamiltonjacobi-bellman equation admits explicit solution obtained cole-hopf transformation debnath table approximatively calculate mean standard deviation relative l-approximatin error associated standard deviation relative l-approximatin error associated runtime seconds needed dent realizations table also depicts mean loss function associated standard deviation loss function associated based monte carlo samples independent realizations addition relative l-approximation error associated pictured left hand side figure based ciated pictured right hand side figure based monte carlo samples independent realizations approximative computations relative l-approximation errors table figure value exact solution replaced value which turn calculated means lemma figure relative l-approximation error mean loss function deep bsde approximation achieves relative l-approximation error size runtime seconds. subsection apply deep bsde solver pricing problem european ﬁnancial derivative ﬁnancial market risk free bank account used hedging ﬁnancial derivative diﬀerent interest rates borrowing lending e.g. example used test example numerical methods bsdes). table approximatively calculate mean standard deviation relative l-approximatin error associated standard deviation relative l-approximatin error associated runtime seconds needed calculate realization based independent realizations table also depicts mean loss function associated standard deviation loss function associated based monte carlo samples independent realizations addition relative l-approximation error associated pictured left hand side figure based ciated pictured right hand side figure based monte carlo samples independent realizations approximative computations relative l-approximation errors table figure value exact solution replaced value which turn calculated means multilevel-picard approximation method subsection consider high-dimensional version example analyzed numerically gobet turkedjiev speciﬁcally gobet turkedjiev employ numerical test example time left hand side figure present approximatively relative l-approximatin error associated based independent realizations mean loss function associated based subsection consider high-dimensional version example analyzed numerically gobet turkedjiev speciﬁcally gobet turkedjiev employ numerical test example relative l-approximatin error associated based present approximatively mean loss function associated based monte carlo samples independent realizations self self self self self self yini basic self self n_time self sqrth math sqrt self t_stamp arange self self christian beck sebastian becker gratefully acknowledged useful suggestions regarding implementation deep bsde solver. project partially supported major program nnsfc grant research grant n--- research grant de-sc.", "year": 2017}