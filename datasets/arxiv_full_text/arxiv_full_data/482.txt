{"title": "Just ASK: Building an Architecture for Extensible Self-Service Spoken  Language Understanding", "tag": ["cs.CL", "cs.AI", "cs.NE", "cs.SE", "68T50"], "abstract": "This paper presents the design of the machine learning architecture that underlies the Alexa Skills Kit (ASK) a large scale Spoken Language Understanding (SLU) Software Development Kit (SDK) that enables developers to extend the capabilities of Amazon's virtual assistant, Alexa. At Amazon, the infrastructure powers over 25,000 skills deployed through the ASK, as well as AWS's Amazon Lex SLU Service. The ASK emphasizes flexibility, predictability and a rapid iteration cycle for third party developers. It imposes inductive biases that allow it to learn robust SLU models from extremely small and sparse datasets and, in doing so, removes significant barriers to entry for software developers and dialogue systems researchers.", "text": "paper presents design machine learning architecture underlies alexa skills large scale spoken language understanding software development enables developers extend capabilities amazon’s virtual assistant alexa. amazon infrastructure powers skills deployed well aws’s amazon service. emphasizes ﬂexibility predictability rapid iteration cycle third party developers. imposes inductive biases allow learn robust models extremely small sparse datasets removes signiﬁcant barriers entry software developers dialogue systems researchers. amazon’s alexa popular digital assistant designed around smart phone rather service ambient computing home. intuitiveness voice user interface demand software engineering teams voice controlled features outstripped pace language experts designing alexa’s system could accommodate them. removing dependency posed several challenges ﬁrst need build self service architecture could transform natural language queries calls ensuring architecture played well alexa’s existing user experience. paper describes design creation service. alexa skills initially designed empower internal amazon developers prototype features independently alexa’s core automatic speech recognition natural language understanding systems extended give third-party developers capabilities. order make alexa popular service ambient computing important enable external developers build sophisticated experiences alexa similar common operating systems smartphone android ios. alexa skill subsystem customized components corresponding stack nlu. user speaks particular skill alexa service handles conversion speech text performs intent classiﬁcation slot-ﬁlling according schema deﬁned skill developer. besides writing skill deﬁnition developer also responsible creating service interacts json requests sent alexa. given structured request alexa developer’s service return text synthesized alexa’s textto-speech engine audio stream played back optional graphical representation displayed case alexa endpoint supports visual modality. figure illustrates interaction skill. common practice alexa skill developers serverless endpoint aws’s lambda product november alexa skills built deployed customers ask. architecture described paper also foundation amazon service applications amazon connect hybrid human/ai customer service product uses amazon power virtual agents. year following launch competing sdks following similar design principles also launched google microsoft namely actions google cortana skills kit. prior toolkits allowed users build models individually. example kaldi popular toolkits speech recognition. stanford’s core offers suite libraries. toolkits allow ﬂexibility developer. example corenlp gives complete independence selecting libraries language understanding task. similarly kaldi offers pre-built recipes used modiﬁed according need developer. however ﬂexibility also poses challenges developer well versed speech literature methodology. toolkits provide speech language understanding capabilities open self-service manner. spectrum standards voicexml existed since early support clearly deﬁned interfaces software developers supported rigid command structures users. need develop portable tools address domain speciﬁcity small datasets long considered bottleneck large scale deployment spoken language technology applications isolation. work attempt close offering models work together limited training samples require expertise either ﬁeld well capability rapidly deploy systems directly large growing audience extending widely available virtual assistant. voice assistant speech recognition language understanding technologies value addition alexa offer compared existing frameworks. since framework never built large user base before look beyond software design tenets used build largely monolithic high performance systems past. successful modern software development frameworks amazon services python programming language linux large developer communities could provide relevant design tenets. describe tenets below. system needs offer modular ﬂexible building blocks. enable maximum ﬂexibility chose allow developers specify commands would want support rather limiting commands intents designed amazon. chose implement decoupled modular subsystems could updated independently. believe decoupled systems commonly studied software engineering remain underexplored area existing machine learning research. recent advances deep learning research trend towards training complex end-to-end models directly data models offer improved performance sometimes easier maintain reducing number components compared decomposed cascaded architectures. however joint modeling end-to-end modeling also introduce dependencies constituent systems make harder deploy improvements independently third party must allowed degrade ﬁrst party user experience. danger customer experience degradation mitigated sandboxing skills allowing used enabled either explicitly implicitly. design choice resulted rapid adoption developers since longer direct competition ﬁrst party system made skill access difﬁcult customer impairing naturalness interaction. discoverable surface area voice limited framework must prevent cybersquatting. prevent early developers taking valuable voice real-estate decision made allow overlapping skill names allowing developers choose name choosing long reﬂect brand protected trademark copyright owned them. namespace disambiguation would performed user enablement time. frameworks chose elect winners rigorous vetting process awarding valuable real estate chosen vendors results consistent user experience early limit innovation long run. framework allow fast iteration support rapid development cycle. since skill developer usage data developing skill enabling rapid iteration cycle important enable quickly address issues. requirement meant models needed trained minutes hours created tradeoff demand highly accurate models. framework must remain relevant face rapid advances machine learning. since system used machine learning extensively state models implementing underlying technologies changing rapidly. contract thus independent initial model choice. chose lightweight shallow semantic parsing formalism comprised intents slots. formalism analogous call intent representing function slots representing parameters function. choice simple interface communicating language understanding system software developers meant underlying systems could updated arbitrarily complex models representations could compiled back call representation. since model architectures become outdated quickly necessary build repertoire techniques treat model choices black boxes order enable rapid deployment model architectures without cascading effects functionality. since developer could provide limited number samples model trained utterances unlikely high quality. thus became important build components leverage transfer learning resource learning techniques remaining primarily model agnostic. done several ways. firstly data-based transfer curation data resources used generically. secondly representation-based transfer creation label space encapsulates prior knowledge different entities relate other. thirdly feature-based transfer aided unsupervised representation learning techniques investments transfer learning strategies likely remain relevant even state model architecture changes. gains generic techniques start stagnate imperative invest model-based transfer learning strategies exploit speciﬁc characteristics machine-learning models used order develop deploy strategies fast changing research landscape critical develop infrastructure designed rapid deployment research discuss tradeoffs subsequent sections. customers primarily interact skills primarily different ways. modal interactions explicit invocations customer ﬁrst invokes skill service e.g. open twitter issues command search trending tweets. one-shot invocation targets skill service issues command simulatenously example what trending twitter. modal one-shot invocation modalities supported combination deterministic systems statistical shallow parsing models. one-shot modality available skills customer enabled previously order prevent unintended collisions. explicit launch functionality example open twitter skill attempts disambiguate skills implicit enablement ambiguity. recently launched third modality skill suggestion. allows customers suggested skill routed issue command cannot serviced alexa’s ﬁrst party systems likely handled skill. done performing statistical matching user utterances relevant skills using techniques derived information retrieval using semantic matching performed deep neural networks skill invoked skill context established effectively sandboxing interaction preventing customer accessing alexa’s native capabilities skill exits either gracefully task completion customer ceases interact device. modeling infrastructure developed using blueflow python framework intended accelerate pace projects could brought research production using shared codebase. developed internal design paradigm called cli-to-server. paradigm ensures every call deﬁned blueflow also executable locally programmatically generated command line interface order ensure possible reproduce production stack experimentation. using autogenerated clis apis adds extra layer abstraction codebase helps mitigate common machine learning anti-pattern production services research tooling implemented separately sync period time. blueflow designed enforce clean separation operational concerns system logic using constructs artifacts components activities recipes. manner similar open source deep learning libraries blueflow uses python code constructs declarative language deﬁne symbolic computational graph data management. computational graph directed acyclic graph serialized optimized executed compatible executor locally distributed manner. refer appendix details blueflow architecture syntax. blueflow runs model building production also ad-hoc research cluster conducting experiments. research production services system allows quickly deploy modeling techniques production without spending signiﬁcant time productizing throwaway research code. python allows rapid experimentation concise codebase option optimize bottlenecks using bindings. however python’s type system increases reliance unit test coverage. along blueflow task execution framework extensively leverage technologies developed aws. static artifacts needed model build stored amazon’s simple storage service artifacts loaded runtime stored amazon’s highly performant value store dynamodb create skill alexa developer begins deﬁning interaction model includes deﬁning intent schema slot types providing sample utterances corresponding simple grammar invocation phrase. wide variety utilities exist help developers deﬁne interaction model alexa skill including limited skill builder rich interface hints completions testing console; aws’s ‘export-as-skill’ option; programmatic skill management command-line using alexa skill management also enables third party developers start building skill development tooling. gives developers full freedom deﬁning voice experience; however skill developer cannot realistically expected provide large representative data samples reﬂect real world usage. addressed part using transfer learning techniques also directly expose concepts alexa’s internal domains form builtin intents builtin slot types developer pick choose from. section brieﬂy describe alexa meaning representation language necessary understand builtin intents. alexamrl decomposable semantic parsing formalism deﬁning spoken language commands allows concepts efﬁciently reused across different domains. alexamrl composed actions entities properties. actions higher order abstraction intents typically used natural language tasks viewed templating system intents. entity alexa ontology analogous slot developer’s perspective. properties completely transparent skill developer hood actions entities together making certain entity types compatible certain actions. entities possess properties similar object attributes object oriented programming. example localbusiness entity type. properties business hours address phone number etc. actions require properties i.e. require entities possess certain properties order compatible callaction cannot completed unless operating entity callable property. intent represents action user wants take. could searching information playing media object. example findplaceintent intent would internally route call location search engine. reason action abstract intent intent needs aware surface forms entities operates action not. instead action operates abstract interfaces fulﬁll certain criteria. example addaction requires object entity added target entity added speciﬁed using required properties action. addaction required property targetcollection identiﬁes type list object property marks type object added. thus developers option compile builtin intents ﬁlling action template compatible entity types allows reuse data alexa’s ontology alexamrl. skills compiled intents shared deterministic models efﬁciently reuse internal data resources stochastic models. discuss statistical modeling greater detail section developers choose design intents alexa’s builtin slot types instead action templates beneﬁt alexamrl’s ability automatically derive semantic roles cannot fully reuse shared deterministic models. case shared data entity type reused semantic roles entities utterance must derived developer provided samples. order alexa turn user requests structured representations need build models based developer’s deﬁnition systems. ﬁrst step process efﬁciently represent grammars provided developer. weighted finite-state transducers provide easy represent data weighted grammar. path encodes input string output string. generate fsts nlu. uses skill speciﬁc decode utterances sentences deﬁned developer whereas uses recognize intent slot values. generated developer-provided sample utterances intents slots. fst-generation code shared nlu. fig. shows recognizes gethoroscope intent along date slot utterance. representation powerful impose arbitrary distributional priors grammar. infer distribution intents slots sample utterances. data sample utterances often imbalanced follow principle maximum entropy impose uniform priors intents slots grammar. conﬁgurable switch turned wfst generated usage pattern skill. weighted representation used directly common sequence models designed work text crfs lstms sampling utterances according distributional priors feeding respective models training data data recombination technique similar also train directly lattice system uses weighted ﬁnite-state transducers represent hidden markov model transducer phone context-dependency transducer pronunciation lexicon word-level grammar fsts composed form end-to-end recognition transducer. refer reader mohri details transducers role asr. goal recipe generate word-level grammar guides system recognize utterances directed skill decoder hybrid decoder uses skill-speciﬁc grammar well main n-gram based statistical language model shares data skills. continuous improvements machine learning product. addition regularly ingesting human-transcribed skill-directed utterances training corpus main also ingest recognition results directly form semi-supervised training order reduce risk reinforcing recognition error employ weighted language model training semi-supervised sentence weighted according conﬁdence value given system. semi-supervised learning techniques ameliorate errors distributional misallocations initial build phase. section describe language understanding component alexa skills kit. given utterance system aims recognize intent relevant parameters slots task known shallow semantic parsing. system divided deterministic stochastic subsystems. deterministic subsystem uses data representation compile sample utterances provided developer recognizer model. recognizer guarantees coverage utterances speciﬁed skill developer designing grammar allowing predictable experience developer customer. stochastic system uses blueflow lend ﬂexibility choice model. built individual algorithmic components implement linear chain maximum entropy classiﬁer updated pipeline using lstms task joint neural models entity intent prediction allowed experiment different conﬁgurations long conforms receiving sentence returning semantic frame. show traditional system performs entity recognition followed intent classiﬁcation ﬁnally slot resolution. performance statistical models greatly improved using features derived knowledge-base lookups infeasible perform expensive queries runtime. using efﬁcient data structures encode sketches relevant portions knowledge base make available statistical models feature extractors. done encoding ontologically derived word-clusters bloom ﬁlters training time including custom types deﬁned developers. features extremely useful training models data regime since encourage feature generalization classes categories small probability false positives. massively increase effective vocabulary small model without blowing feature-space added beneﬁt enabling class coverage improvements deploy asynchronously without needing retrain statistical models. training features lead language feature under-training models learn rely heavily features distinguish entities. addressed introducing knowledge dropout regularization parameter prevent model overﬁtting skill models stored dynamodb loaded runtime network calls account bulk added latency. standard techniques like feature hashing weight quantization sparsity constraints modiﬁed elastic regularization ensure models small enough stored cheaply transferred network calls quickly statistically signiﬁcant loss accuracy. supports speciﬁcation dialogue subroutines common tasks uniﬁed dialogue model automates simple procedural dialogue capabilities slot elicitation conﬁrmation questions easily speciﬁed mechanisms. procedural subroutines either invoked developers issue dialogue directive course interaction deﬁned part interaction model. although system fulﬁlls many usecases recognize limitations simple dialogue system. described service allows third party developers expand capability alexa voice service. system abstracts away intricacies provides developers interface based structured request data. service hosts consumer facing subsystems improve time hundreds skills added every week. implies made signiﬁcant progress towards goal building fully extensible architecture. however challenges still remain building seamless user experience enable creation useful engaging agents. order seed research area amazon introduced alexa prize million dollar university competition advance conversational voice. alexa prize bots launched customers skill using early results shown promise", "year": 2017}