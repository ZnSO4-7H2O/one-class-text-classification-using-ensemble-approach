{"title": "File mapping Rule-based DBMS and Natural Language Processing", "tag": ["cs.CL", "cs.AI", "cs.DB", "cs.IR", "cs.LG", "cs.PL", "D.3.2; H.2.4"], "abstract": "This paper describes the system of storage, extract and processing of information structured similarly to the natural language. For recursive inference the system uses the rules having the same representation, as the data. The environment of storage of information is provided with the File Mapping (SHM) mechanism of operating system. In the paper the main principles of construction of dynamic data structure and language for record of the inference rules are stated; the features of available implementation are considered and the description of the application realizing semantic information retrieval on the natural language is given.", "text": "paper describes system storage extract processing information structured similarly natural language. recursive inference system uses rules representation data. environment storage information provided file mapping mechanism operating system. paper main principles construction dynamic data structure language record inference rules stated; features available implementation considered description application realizing semantic information retrieval natural language given. introduction algorithms information extract processing directly depend structure information represented. structural solutions considerably simplify algorithmic ones enabling look problem another point view. modern systems natural language processing created rule basis text data represented records relational databases. algorithms processing realized frequently prolog-similar means. complexities interaction programming languages based recursive inference rules relational databases earlier considered despite external analogy logical interpretation besides tabular form representation always adequate internal structure information processed. last statement correct particular relation traditional popular storage information form natural language texts. paper concept storage extract processing information structured similarly constructions natural language usage mechanism shared segments memory operating system unix file mapping mechanism operating system windows stated. concept realized shm_db dbms. description language used record inference rules given automatic generation rules learning process considered. structure rules natural language let's look problem structuring textual information point view training turing offered training child initially preliminary information structure constructions rules natural language. let's accept also training starts written language first excepting colloquial one. selection characters words sentences text information raise doubt. obtaining skills differentiation remains behind frames given research. consider words sentences structural units high levels comparison characters structural units level participate derivation definite sequences combination characters combination words etc. unit high level concerned sequence structural units corresponding lower level. besides natural language structure possible distinguish constructions well. example let's represent sentence question answer parentheses shall designate selected sequences structural units. let's suppose construction containing sign defines rule inference rule. inference rules form higher structural level relation sentences. shall assume learning process purpose semantic structuring source texts rules showed samples let's compare appropriate sentences rules. case rules differ sentences containing identical amount terms differences concern terms case rules replaced composed schemes sentences. look expression square brackets plays role disjunction. let's consider complex case. assume rule already exists learning process next rule also showed sign followed logical expression specifying conditions expression angular brackets plays role conjunction. rule includes three initial constructions presented course training also generally speaking constructions represented rule absent natural language despite syntactical regularity. analysis mentioned claim linguistic entirety; characterizes initial premise structural data representation system described. history question survey paper lashmanov a.v. \"deductive databases language aspect\" published journal databases hypertext systems number considered starting point research described. paper written basis publications issues lecture notes computer science journal logic programming computer journal sigmod record technology science informatics information systems data knowledge engineering knowledge bases systems others. analysis state perspectives logical programming languages development relation database management systems given paper. marked development logical languages databases goes directions. first direction modification and/or creation prolog-similar languages including mechanism inquiries database. second direction relational languages deductive databases creation specialized logical programming languages described extension. emphasized despite rather long history development accompanied high research activity succeeded commercial implementation based general prolog modifications. tendency marked likely saved now. despite logical relationship deductive programming languages relational databases interfaces access relational bases languages logic programming applied widely well. speaking natural language processing necessary remark certain internal generality problems implementation nlp-systems problems interaction logical programming languages dbms observed. analysis publications accessible internet least shows though definite success information extract systems inquiries natural language solution equally suitable different natural languages available till now. scheme systems functioning remains rule inquiry natural language parser translation analysis extracted information. quite often parser built basis prolog-similar resources. scheme parser fulfillment inquiries database logically structurally divided. time attempts implementation usage relational adabas-similar dbms data constructions described previous section combination effective extraction information recursive disclosure rules reached success. file mapping mechanism compared approaches described a.v. lashmanov's paper offered dbms founded data model essentially differed traditional one. principal components permitted realize main ideas model gave first conditional title dbms shm_db mechanism shared segments memory operating system unix. shared segments appeared operating system unix tool interprocessing connection supplemented later mechanism saving. windows windows similar operation fulfilled api's file mapping functions. mechanism described realizes idea non-volatile virtual storage characteristics access best rule comparison access file system allows refuse completely input-output system calls programming dbms kernel functions. besides process connecting shared segment allocates limits range addresses unix range windows programming addresses stipulated fixed beforehand. shm_db memory address simultaneously fulfills function relation code type array. example implementation unix relations database allocated always negative semiaxis addresses references positive herewith relations high levels smaller addresses. similar system solutions allowed firstly obtain high-speed load modules realizing basic functions expense primary usage computer instructions direct addressing instead indirect; secondly data model seem prodigal point view size example non-byte representation characters relations level database. main concepts definitions spite fact description algorithms dbms operations concepts \"relation\" \"the scheme storage relation\" etc. widely used essentially differ concepts generally accepted relational data model. relation aggregate relations elementary relation level. relation pointer sequence direct references. nonelementary relation characterized inverse references code. relations depending level distinguished according type. level relation. four levels relations identified. level characters elementary numbers combinations characters relations combinations elementary numbers. elementary relation level defines character code elementary number. elementary numbers hexadecimal numbers xff. database numbers described short integer float double used. numbers except elementary represented sequences elementary numbers. order creation number sequences reverse first rightmost digits left. non-significant zero sequences elementary numbers trailing blanks sequences characters rule mapped database. level words elementary relations level combinations words elementary relations level relations. word relation inverse reference relation level. elementary relation level relation defining arbitrary sequence characters relation defining address subroutine/function empty relation level. level sentences aggregates sentences. sentence relation inverse reference relation the-st level. level rules sequences rules. rule relation inverse reference relation level. references. direct inverse references distinguished. direct references define relations given relation constituent. inverse references define relations given relation consists. code relation. except elementary relations codes following ones conjunction order relations important conjunction order relations indifferent; disjunction order relations indifferent; disjunction sequences relations recording language sentences relations code taken parentheses relations code angular brackets relations code square brackets relations code braces respectively. paradigm relation code containing special relation unambiguously defining paradigm relations representing saved data spite fact paradigm point view search operations logic perceived disjunction order creation inverse references differ usual chronological order increase addresses. word defining paradigm ended sign inverse references created ascending order paradigm values ended sign references created decreasing order. sign defines inverse chronological sorting. cases components paradigm written direct chronological sequence. type relation. level relations except names variables type special elementary relation defining combination characters name variable type combination characters including special relation type the-st level variables global variables constants distinguished. variable paradigm containing word type starting small character; represented relation type global variable paradigm containing word type starting large character represented relation type constants constant expressions referred type relations including variables type sentences level executable i.e. calling control transfer subroutine/function non-executable level direct inverse rules distinguished. inverse rules referred type direct rules type rules right part absent used definition input data. rules referred type rules left part intended control transfer immediately main program referred type types relations stated system analyzed programmer directly. file rules relation level containing rules mapping input data rules representation program special relation defining time last modification data location. language record inference rules spite fact work primary aimed programming language language record inference rules extension language arisen means compact representation relations -level dynamic structure syntax non-separable main shm_db concepts many respects defined them. following agreements accepted record rules. word sequence characters digits characters limited separators. separators codes beginning extremity line blanks single characters \"/;=<>?\\|{} used sequences characters taken unary quotes also considered words. double quotes sequences words specified taking account separators. words enclosed quotes considered constants. sign special assignment. sign always precedes names subroutines/ functions. translator rules relation defining subroutine/function allocates place linkage address. first character name large subroutine/ function considered standard one. sign first position defines name non-executable relation. word enclosed quotes special interpreted translator rules name variable global word starts large character otherwise current. special sequences identify comments relations causing calls standard subroutines/functions. word quotes double unary attempt made present number failure word considered character one. separators well relations grouped follows separator level i.e. rule terminated semicolon. separators level select sentences groups sentences besides separates left part rule right sign separates conditions. level relations selected brackets depends context. remaining separators considered separators level. brackets always paired. parentheses define relations code angular brackets code square brackets code braces code respectively. executable relations level always look like means transition execution conditions immediately main program. unconditional transition unconditional control transfer main program respectively possible also initial sentence scheme sentence list {a}; scheme defining file list {a}; logical function defining conditions transition. relation represents inverse rule. term expression treated check existence data file variables accept values corresponding relation search completed immediately finding first variant satisfying criteria data search fulfilled cyclically possible values. latter case enclosed curly brackets. transition without check existence absent. constituent relations level sentence either scheme list containing unique scheme. list {bi} case outcome exhaustive search possible values uncertain variables combinations non-executable relations; executable relations means recurrence operation. result executable relation control transmitted sequentially expressions etc. normal return code code execution sequence stopped ended return code treated interruption. executable relations interruptions derivative relations analyses executed unit itself. non-executable lists {bi} completion components code results leaving list return code. relations initiate process search rules equivalent cutting review possible variants prolongation search started case defines non-executable relation accesses subroutine/function completing code sentence scheme logic operations brackets case usage brackets procedure conditions testing determined order record sentences. negation function level not. transmission values variables relations execution transmission values variables following relation moments defining form algorithm record help language described. relation another values variables transmitted tables variables. programs dbms kernel processes generate tables types table global variables tblvar tables current variables tblvar. tblvar always unique allows transmitting values variables relation relation irrespective enclosure degree. tables current variables tblvar generated executable relation separately. modification table global variables creation derived table current variables happens relation execution. global variables changes brought table updated variant used current variables changes concern tables generated depending location executable relation relation specifying rule ways filling tables derived relation constituent sequence derived tables generated basis parent table irrespective outcomes execution relations relation constituent sequence case derived table unique coincides initial table. changes brought table execution relations influence current state. system uses special variable fixed name key. programmer work usual variable without inclusion argument list subroutine/function. value assignment happens always call subroutine defined relation sequence ended return code note. search variables stated according search relation updated values accept file subroutines functions every term sentences written interpreted call subroutine name xxx. name subroutine starts large character considered global searched among functions executing system kernel. going details subroutines/functions description shall mark functions arguments others argument subroutines/functions arguments subroutines/functions delete save arguments play role functions level. operation spreads sentence standing sequences immediately functions. functions represented respectively example application using shm_db dbms shall show characteristic features interface implementation database inquiries usage language inference rules following example. assume required organize record text database using attribute \"number article\" sampling given base value ascending order attributes values given. shall limit external interface following windows major features algorithm representation usage language inference rules necessity external description data structure base. first five sentences given text substitutions introduced purpose greater readability algorithm substitution underlines structure scheme storage identical structure parameters window winb. setting system variable provided programmer implementation event processing functions pressing corresponding keys usage resources shm_db program interface. given text first rule states immediately head program pressing query simultaneous assignment value global variable following sentences become active sequentially reset global variable flag wina control transfer unit realizing program interface window wina; check flag queryb non-executable sentence generating transition derivative rules. rule defines transition unit window interface wina nonexecutable sentence querya. condition transition nonblank value stated fulfillment unit wina. simultaneously value assigned local variable art+ essential understanding logic operation shm_db rules. construction {querya means initiation transition derivative rules sequentially values art+. querya variable art+ according scheme storage necessary remark field text described list values functions saving deleting carried help functions level written accordingly save delete standard function break returns code unit winb case deleting produced. file containing rules text format resources shm_db analyzed mapped relations level's dynamic structure. impossible treat process perhaps interpretation compilation. relations mapping rules file formed first start program adjusted case change file modification date creation date load module. shm_db natural language processing shall dwell upon possibilities shm_db submits tasks natural language processing. recursive analysis rules described second section present paper changes entered kernel dbms. mode distinguished usual little processing finite states usage additional stack preventing loopholes recursive search added. besides files rules introduced fixed names ruletrue rulefalse. initialization system files empty filling carried learning process. addition concerns determining input possible references sentences natural language schemes available database. words possible \"understanding\" process entered text applied shm_db equivalent determining references sentences schemes. let's consider fragments rules file demonstration application*. variable corresponds entered sentence question answer question. value assignment variables made visualization. parentheses select steady collocations training; gives large generalizations modification schemes. subroutine/function add_rule realizes search similar rules creation modification schemes rules addition paradigm values. subroutine creates also direct references created schemes rules file ruletrue. subroutine/function del_rule deletes relations corresponding rule entered impossibility deleting generalized schemes rules sets given rule file rulefalse. except demonstration application circuits condition-consequence double condition-consequence realized also. second fragment demonstrates example \"semantic search\" context search articles file text answer entered question according semantic rules generated system learning process shown trans realizes search sentences satisfying condition search search sentences together question correspond inverse rule. sentences directly responding inquiry taken account also sentences generating. trans selects sentences immediately contained article retrieved also generates sentences derivative sentences article combinations. trans searches rules satisfied pair forms answer. note. reverse order variables argument list subroutines/functions trans trans explained search algorithm features inference rules record inverse rules. application generates direct answers also answers derivative questions answers well assume example database rules experiments program semantic search suggest idea theoretical base modern compilers) \"concept\" \"semantic image\" shm_db treated aggregate connected points space recursive inferences. natural language taken basis representation information require interpretation. problems require solution problem convolution relations. level data input unambiguous convolution character sequences component combinations always carried out. means compact allocation data base achieved. example database already exists combination characters word \"input\" represented relation put). level semantic mode convolution collocations also realized. analysis multivalent convolution level carried out. besides non-realized possibility creation nested paradigms rules modification. problem anaphoric similarity requires additional study. closely connected problems relations' convolution gives additional information paradigms generalization. results long increasing speed training essential effect training achieved generalization paradigms. process cannot completely automatically requires obtaining additional information generalization paradigms dialogue semantic mode shm_db stage debugging. taking account overall performance system whole directly depends speed search derivative relations studies algorithms ordering relations usage probability carried out. shm_db allows collection statistical information additional shared segment subsequent on-pair reordering relations means service defragmentation procedure. loss productivity mode collection statistical information practically observed. conclusion principle construction dbms usage file mapping mechanism operating system shown ability work. help shm_db systems concerning tasks management automation realized. limitations data size concerned gbytes address space processors virtual storage removed later take consideration tendency development computer equipment direction microprocessors digit capacity increase. dbms using non-byte data representation fixing relations space virtual addresses despite seeming wastefulness concerning size data time processing quite comparable commercial implementations dbms including relational ones. information dictionary russian words including possible forms occupies mbytes virtual storage. language record rules considered paper includes peculiarities permitting realize algorithms based recursive inference combination procedural sequences. using structure relations record language constructions data language expresses inquiries database within framework syntax. features structuring information shm_db allow adequately representing semantic structures characteristic natural languages. application described paper demonstrates search contents also opportunity reasoning simulation. shm_db could used base realization research field processing natural language similarly system gate though direction. references androutsopoulos ritchie thanisch time tense aspect natural language database interfaces. natural language engineering sept. cambridge univ. press. available computation language archive cmplg/. cunningham gaizauskas humphreys wilks experience language engineering architecture three years gate. proceedings aisb' workshop reference architectures data standards society study artificial intelligence simulation behaviour edinburgh u.k. tang l.r. mooney r.j. automated construction database interfaces integrating parsing statistical proceedings joint sigdat conference empirical methods natural language processing large corpora hong kong october zelle j.m. mooney r.j. learning parse database queries using inductive logic programming proceedings national conference artificial intelligence portland august aaai press/mit press.", "year": 2001}