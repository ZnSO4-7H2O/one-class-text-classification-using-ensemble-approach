{"title": "Machine Teaching: A New Paradigm for Building Machine Learning Systems", "tag": ["cs.LG", "cs.AI", "cs.HC", "cs.SE", "stat.ML"], "abstract": "The current processes for building machine learning systems require practitioners with deep knowledge of machine learning. This significantly limits the number of machine learning systems that can be created and has led to a mismatch between the demand for machine learning systems and the ability for organizations to build them. We believe that in order to meet this growing demand for machine learning systems we must significantly increase the number of individuals that can teach machines. We postulate that we can achieve this goal by making the process of teaching machines easy, fast and above all, universally accessible.  While machine learning focuses on creating new algorithms and improving the accuracy of \"learners\", the machine teaching discipline focuses on the efficacy of the \"teachers\". Machine teaching as a discipline is a paradigm shift that follows and extends principles of software engineering and programming languages. We put a strong emphasis on the teacher and the teacher's interaction with data, as well as crucial components such as techniques and design principles of interaction and visualization.  In this paper, we present our position regarding the discipline of machine teaching and articulate fundamental machine teaching principles. We also describe how, by decoupling knowledge about machine learning algorithms from the process of teaching, we can accelerate innovation and empower millions of new uses for machine learning models.", "text": "patrice simard saleema amershi david chickering alicia edelman pelton soroush ghorashi christopher meek gonzalo ramos jina johan verwey wang john wernsing patricemicrosoft.com samershimicrosoft.com dmaxmicrosoft.com aliciaepmicrosoft.com sorghmicrosoft.com meekmicrosoft.com goramosmicrosoft.com jinsuhmicrosoft.com joverweymicrosoft.com mowanmicrosoft.com johnwermicrosoft.com current processes building machine learning systems require practitioners deep knowledge machine learning. signiﬁcantly limits number machine learning systems created mismatch demand machine learning systems ability organizations build them. believe order meet growing demand machine learning systems must signiﬁcantly increase number individuals teach machines. postulate achieve goal making process teaching machines easy fast universally accessible. machine learning focuses creating algorithms improving accuracy learners machine teaching discipline focuses eﬃcacy teachers. machine teaching discipline paradigm shift follows extends principles software engineering programming languages. strong emphasis teacher teacher’s interaction data well crucial components techniques design principles interaction visualization. principles. also describe decoupling knowledge machine learning algorithms process teaching accelerate innovation empower millions uses machine learning models. demand machine learning models exceeds supply machine teachers build models. categories common-sense understanding tasks would like automate computers include interpreting commands customer support agents perform tasks behalf. combination categories domains tasks leads millions opportunities building specialized high-accuracy machine learning models. example might interested building model understand voice commands controlling television building agent making restaurant reservations. opening large space solutions increase number machine teachers making process teaching machines easy fast universally accessible. large fraction machine learning community focused creating algorithms improve accuracy learners given labeled data sets. machine teaching discipline focused eﬃcacy teachers given learners. metrics machine teaching measure performance relative human costs many problems aﬀect model building productivity addressed traditional machine learning. problem concept evolution process teacher’s underlying notion target class deﬁned reﬁned time label noise inconsistencies detrimental traditional machine learning assumes target concept ﬁxed deﬁned labels. practice concept deﬁnitions schemas labels change sets rare positives discovered teachers simply change minds. consider binary classiﬁcation task gardening pages machine learner feature ﬁxed. teacher initially label botanical garden pages positive examples gardening concept later decide negative examples. relabeling examples target concept evolves huge burden teacher. teacher’s perspective concepts decomposable sub-concepts manipulation relationship sub-concepts easy interpretable reversible. onset teacher could decompose gardening sub-concepts label page according concept schema. scenario labeling sub-concepts beneﬁts machine learning algorithm beneﬁts teacher enabling concept manipulation. manipulation sub-concepts done constant time teacher’s semantic decisions documented communication collaboration. addressing concept evolution example emphasis teacher’s perspective make large diﬀerence model building productivity. machine teaching paradigm shift away machine learning akin ﬁelds programming language shifted optimizing performance optimizing productivity notions functional programming programming interfaces version control etc. discipline machine teaching follows extends principles software engineering languages fundamental software productivity. machine teaching places strong emphasis teacher teacher’s interaction data techniques design principles interaction visualization crucial components. machine teaching also directly connected machine learning fundamentals deﬁnes abstractions interfaces underlying algorithm teaching language. therefore machine teaching lives interaction human-computer interaction machine learning visualization systems engineering ﬁelds. goal paper explore machine learning model building teacher’s perspective. microsoft’s internal conferences panel titled build maintain machine learning systems? host started discussion asking audience what worst nightmare? context building machine learning models production. woman raised hand gave ﬁrst answer manage versions. manage data versions. able reproduce models. know data disappears person disappears model disappears... cannot reproduce this. seen hundreds times bing. seen every day. like... yeah good model. need tweak need understand then... cannot reproduce biggest nightmare iteration steps typically takes weeks. system stable step months. eventually breaks variety reasons data distribution changed competition improved requirements increased features available features longer available deﬁnition problem changed security update change broken code. various steps problem owner machine learning expert engineer moved another group another company. features labels versioned documented. understands data collected done organic fashion. multiple players diﬀerent expertise involved takes signiﬁcant amount eﬀort coordination understand model perform well expected retrained. worst case model operating tell performing expected wants responsibility turning machine learning litter starts accumulating everywhere. problems machine learning practice example illustrates fact building machine learning model involves collecting data applying learning algorithms management process building machine learning solutions fraught ineﬃciencies. forms ineﬃciencies deeply embedded current machine learning paradigm. instance machine learning projects typically consist single monolithic model trained large labeled data set. model’s summary performance metrics requirements performance remained unchanged adding examples would problem even model errs examples previously predicted correctly. however many problems predictability quality control important negative progress model quality leads laborious testing entire model incurs high maintenance cost. single monolithic model lacks modularity required people isolate address root cause regression problem. diﬃcult argue challenges discussed given high priority world’s best machine learning conferences. problems ineﬃciencies stem machine learning algorithm central topic machine learning ﬁeld; come processes machine learning interaction people machine learning algorithms people’s limitations. conversely version control concept decomposition semantic data exploration expressiveness teaching language interpretability model productivity common programming human-computer interaction machine learning. machine teaching concepts however extraordinarily important practitioners machine learning. hence deﬁne discipline aimed improving concept chosen deﬁnitions minimize intersection ﬁelds thus provide clarity scoping. disciplines complementary evolve independently. course like generalization limitations. curriculum learning instance could seen belonging squarely intersection involves learning algorithm teacher behavior. nevertheless found deﬁnitions useful decide work work machine teaching solutions require machine learning algorithms produce models throughteaching process requirement make things complex teachers. diﬀerent deployment environments support diﬀerent runtime functions depending resources available implemented green-lighted deployment. machine learning algorithms understood compilers convert teaching information instance functions available runtime. example instance might characterized weights neural network means kmeans support vectors svms decisions decision trees. runtime functions diﬀerent machine learning compilers available parameters machine teaching aims shielding teacher variability runtime complexity optimization. performance cost optimizing target runtime expert control optimization parameters always outperform generic parameter-less optimization. akin inlining assembly code. like high-level programming languages goal machine teaching reduce human cost terms maintenance time required expertise. teaching language write once compile anywhere following philosophy. using well-deﬁned interfaces describing inputs outputs machine learning algorithms teaching solution leverage machine learning algorithms support interfaces. impose three additional system requirements featuring language available teacher expressive enough enable examples distinguished meaningful ways enables teacher remove feature blindness without necessarily increasing concept complexity. available algorithms must satisfy classical deﬁnition learning consistency enables teacher decrease estimation error adding labeled examples. section argue teaching machines form programming. ﬁrst describe machine teaching programming common. next highlight several tools developed support software development argue likely provide valuable guidance inspiration machine teaching discipline. conclude section discussion history discipline programming might predictive trajectory discipline machine teaching. assume software engineer needs create stateless target function returns value given input strictly sequential describe programming process steps follows assume teacher wants build target classiﬁcation function returns class given input process machine teaching presented previous section similar programming steps above. strong similarities also signiﬁcant diﬀerences especially debugging step order strengthen analogy teaching programming need machine teaching language lets express steps context machine learning model building task. programming examples languages include python javascript etc. compiled machine language execution. teaching language means expressing teacher knowledge form machine learning algorithm leverage training. teacher knowledge need limited providing labels combination schema constraints labeled examples features. programing languages developed address current limitations expect teaching languages developed allow teacher communicate diﬀerent types knowledge communicate knowledge eﬀectively. illustrated previous sections current machine learning processes require multiple people diﬀerent expertise strong knowledge dependency among them standards tooling versioning data models strong co-dependency problem formulation training underlying machine learning algorithms. fortunately emerging discipline machine teaching leverage lessons learned programming software engineering related disciplines. disciplines developed last half century addressed many analogous problems machine teaching aims solve. surprising given strong commonalities. section highlight several lessons relate machine teaching. programming discipline developed improved tools techniques principles allow software engineers solve complex problems ways allow eﬃcient maintainable understandable solutions. principles include problem decomposition encapsulation abstraction design patterns. rather discussing these contrast diﬀering expectations software engineers solving complex problem machine teachers solving complex problem. powerful concepts allowed software engineers write systems solve complex problems decomposition. next anecdote illustrates importance power. answer ﬁrst question universally yes. answer second question varies think would take days?. ﬁrst question arguably related church-turing thesis states computable functions computable turing machine. human compute function exists program perform computation turing machine. words given algorithm implement tetris game respectable software engineers believe also implement game whatever machine access whatever programming language familiar with. answer second question puzzling. state space tetris game large fact larger examined software engineer. indeed might expect complexity program grow exponentially size representation state state space. software engineers seem conﬁdent implement game month. likely explanation consider complexity implementation debugging polynomial representation state space input. questions asked another handful machine learning experts answers quite varied. person answered questions without hesitation machine learning experts less conﬁdent questions answers including probably think sure probably not. implementing tetris game recognizing simple non-deformable objects seem like fairly basic functions either ﬁelds thus surprising answers sets questions diﬀerent. goal programming teaching create function. respect activities common diﬀerences. cases writing functions reason think church-turing thesis true teaching. despite similarities expectations success creating debugging maintaining function diﬀer widely software engineers teachers. programming languages teaching languages diﬀerent answers questions software engineers regardless programming languages. machine learning experts give upper bounds long would take solve teaching problem even thought problem solvable. software engineers conﬁdence able complete task reasonable time learned decompose problems smaller problems. smaller problem decomposed coding debugging done constant polynomial time. instance code tetris create state module state transformation module input module scoring module shape display module animation module modules decomposed smaller modules. smaller modules composed debugged polynomial time. given module built eﬃciently software engineers conﬁdence code tetris less month’s time. week two. student asked code tetris weeks would know start. months learning program software engineers would able accommodate task programming tetris game month. akin decomposition brings conﬁdence software engineers upper bound solving complex problems machine teachers learn decompose complex machine learning problems right tools experiences machine teaching discipline bring expectations success teaching machine level comparable programming. complexity problems software engineers solve increased signiﬁcantly past half century limits scale problems software engineer solve. address this many tools techniques developed enable multiple engineers contribute solution problem. section focus three concepts programming languages interfaces version control. developments enables scaling number contributors creation standardized programming languages. standardized programming language along design patterns documentation enables collaborators read understand maintain software. analog programming languages machine teaching expressions teacher’s domain knowledge include labels features schemas. currently standardization programming languages machine teaching. another development enables scaling number contributors componentization interfaces closely related idea problem decomposition discussed above. componentization allows separation concerns reduces development complexity clear interfaces allow independent development innovation. instance software engineer need consider details hardware upon solution run. machine teaching development clear interfaces services required teaching training sampling featuring would enable independent teaching. addition clear interfaces ﬁnal development enables scaling number contributors development version control systems. modern version control systems support merging contributions multiple software engineers speculative development isolation ﬁxes independent feature development rolling back previous versions among many beneﬁts. primary role version control system track manage changes source code rather keeping track compiled binaries. similarly machine teaching version control system could support managing changes labels features schemas learners used building model enable reproducibility branching experimentation providing documentation transparency necessary collaboration. past decades explosion tools processes aimed increasing programming productivity. include development high-level programming languages innovations integrated development environments creation development processes. tools processes direct analog machine teaching developed adapted. table presents mapping many tools concepts machine teaching. conclude section brief review history programming might inform trajectory machine teaching discipline. history programming inexorably linked development computers. programming started scientiﬁc engineering tasks programs programming languages like fortran focused compute performance. range problems expanded include management information systems range programming languages expanded target speciﬁc application domains explosion number software engineers realization scaling contributors diﬃcult scope problems programming applied exploded advent personal computer number software engineers solving problems finally another explosive round growth began advent programming programming languages like javascript java. writing paper number software engineers world approaching million machine teaching undergoing similar explosion. currently much machine teaching eﬀort undertaken experts machine learning statistics. like story programming range problems machine learning applied expanding. deep-learning breakthroughs perceptual tasks incredible eﬀort broaden range problems addressed teaching machines solve problems. similar expanding population software engineers advent services like luis.ai wit.ai enabled domain experts build machine learning models machine learning knowledge. discipline machine teaching young formative stages. expect growth continue even quicker pace. fact machine teaching might path bringing machine learning masses. example concept recipe page represented function returns zero based whether page contains cooking recipe. another example address concept represented function that given document returns list token ranges labeled address street state etc. label values binary concept could not. also allow undecided label allows teacher postpone labeling decisions ignore ambiguous examples. postponing decision important concept evolving teacher’s head. example usually feature denote concept emphasizing machine learning model. example concept corresponding presence absence word recipe text examples might useful feature teaching recipe concept. clarify deﬁnition teacher methods knowledge transfer need deﬁned. point include example selection labeling schema deﬁnition featuring concept decomposition teachers expected make mistakes forms knowledge transfer. teaching bugs common occurrences. figure illustrates concepts labels features teachers related. assume every concept computable function representation examples. representation assumed include available information example. horizontal axis represents space examples. vertical axis represents space programs concepts. computer science theory programs examples represented integers. using convention integer number vertical axis could interpreted program integer number horizontal axis could interpreted example. ignore programs compile examples nonsensical. figure refer diﬀerent ways teacher pass information learning system. teachers select speciﬁc examples ﬁltering unlabeled examples. choosing ﬁlters deliberately systematically explore space discover information relevant concepts. example teacher discover insect recipes building recipe classiﬁer issuing query source proteins. note uniform sampling uncertainty sampling explicit input teacher likely little discovering rare clusters positive examples. combinations semantic ﬁlters involving trained models even powerful ability examples containing useful aspects concept enables teacher useful features provide labels train them. furthermore selection choices valuable documentation teaching process. figure representation examples concepts. column represents example contains concept values example. teacher looks direction divine label. teacher access feature concepts available training however teacher know his/her program. represents concept contains value concept examples. teacher looks direction divine usefulness feature concept. teacher guess values space examples features selected teacher looking horizontally immune over-training. teachers provide labels looking column figure important realize teachers know programs running heads evaluate target concept values. knew programs would transfer knowledge programmatic form machine would need machine learning. teachers instead look available data example divine label. unconsciously evaluating sub-features combining make labeling decisions. feature spaces combination functions available teachers beyond available training sets. power makes teachers valuable purpose creating labels. multiple concepts involved teacher express relationship them. instance teacher could express concepts tennis soccer mutually exclusive concept tennis implies concept sport. concept constraints relationships lines diagram separating knowledge captured schema knowledge captured labels allows information conveyed edited high level. implied labels changed simply changing concept relationship. instance golf could moved sub-concept sport mutually exclusive vice versa. teachers understand change semantics concept reviewing schema. semantic decisions reversed without editing individual labels. generic parametrizable form teachers instantiate individual features providing useful semantic parameters. instance generic feature could instantiation would setting list brands given generic features teachers ability evaluate diﬀerent features looking along corresponding horizontal lines figure given features teachers divine better large unlabeled set. instance teacher choose feature measures presence word recipe feature measures presence word even though latter feature might yield better results training set. ability estimate value feature estimated distributions test essential feature engineering probably useful capability teacher. features selected teacher manner immune over-training created independently training set. note contrast automatic feature selection looks training concept-independent statistics susceptible over-training. whereas teachers direct access program implementing concept sometimes infer programs work. socrates used teach asking right questions. right question akin providing useful sub-concept whose value makes evaluating overall concept easier. words socrates teaching decomposition rather examples. ability equally available teachers. learned. essential scaling complexity number teachers. ability helps software engineers decompose functions sub-functions. software engineers also acquire ability experience. programming teaching decompositions unique knowledge provided teacher concept decomposition high level modular. concept implementation might provide example selection labels schema features. viewed documentation interfaces contracts. concept implementation black concept hierarchy transparent interpretable. concept decomposition highest form knowledge provided teacher. learning data scientist driver’s seat. training scientists increase number teachers believe right path follow. starters machine learning data scientists scarce expensive resource. secondly machine learning scientists serve better purpose inventing optimizing learning algorithms. data scientists indispensable applying expertise make sense data transform usable form. machine teaching process envision require skills expert data scientist. machine teachers domain knowledge pick right examples counterexamples concept explain diﬀer. interactive information exchange learning system. within ranks domain experts large population machine teachers increase orders magnitude number models used solve problems. transform domain experts making machine teaching language universally accessible. characteristic domain experts understand semantics problem. point argue problem’s data need interpreted person useful machine teaching needed. example problems labeled data abundant practically limitless; e.g. computer vision speech understanding genomics analysis click-prediction financial forecasting. these powerful learning algorithms hardware better strategy arrive eﬀective solution. problems like above feature selection using cross validation used arrive good solution without need machine teacher. nonetheless ever-growing problems machine teaching right approach; problems unlabeled data plentiful domain knowledge articulate concept essential. examples include controlling internet-of-things appliances spoken dialogs environment’s context routing customer feedback brand product start-up right department building one-time assistant help paralegal sift hundreds thousands briefs etc. reaching number machine teachers software engineers counted tens millions. table illustrates diﬀerences numbers machine learning scientists data scientists domain experts. enabling domain experts teach enable apply knowledge solve directly millions meaningful peruniversal teaching language rely power speciﬁc machine learning algorithms. teaching interface algorithms. machine learning algorithm swapped another teaching necessary teaching language model building experience changed. machine learning algorithms interchangeable. conversely teaching language simple easy learn given domain assume target concepts teacher want implement realizable recursive composition models existing features. implies property feature call feature completeness. feature completeness responsibility teaching tool teachers. teachers achieve realizability following actions missing features teacher distinguish documents belonging diﬀerent classes meaningful must feature expressible system make equivalent semantically meaningful distinction. adding feature teacher correct feature blindness errors. feature exists language feature complete distinguishing desired classes. create features decomposition concept function cannot learned existing features limitations model class teacher circumvent problem creating features models; call process model decomposition. illustrate point suppose binary features teacher would like explicitly ignore ambiguous patterns ambiguous patterns marked don’t care avoid wasting features labels teacher’s time diﬃcult examples. areas don’t care used coping mechanism keep realizability assumption despite bayes error rate. action constrain feature set. feature completeness teaching language imply language used eﬃciently teach concepts. feature complete language expressive realizability require large number model compositions. feature complete language expressive teachers become engineers. rich diverse sampling call unlabeled documents accessible teacher building models sampling distribution. call documents models built deployment distribution. rich-and-diversesampling-set principle sampling distribution captures richness diversity examples deployment distribution. sampling distribution deployment distributions preferably similar perfectly matched. important requirement sampling distribution important types documents represented important documents missing sampling distribution performance could impacted unpredictable ways. rule thumb unlabeled data collected indiscriminately cost storing data negligible compared cost teaching; view selectively collecting data meant labeled risky limiting. rich diverse data allows teacher explore express knowledge selection. also allows teacher examples used train sub-concepts speciﬁc original concept. instance teacher could decide build classiﬁers bonsai gardening botanical gardening used features gardening classiﬁer. sampling needs rich enough contain suﬃcient examples successfully learn sub-concepts. sampling distribution distribution robustness assumption training distribution matches sampling deployment distribution unrealistic practice. role teacher create model correct example regardless deployment distribution. given assumption feature completeness rich diverse sampling result successful teaching process robust knowing deployment distributions. imagine programming sort function. expect sort work regardless distribution data sorting. thanks realizability correctness expectation teaching. training data discovered labeled training using ﬁltering distribution robustness critical assumption therefore favor machine learning algorithms robust covariate shifts. warning mismatch train sampling distributions complicates evaluation. modular development decomposition central principle programming machine teaching. machine teaching process support modular development concept implementation. includes decomposition concepts subconcepts models features models. achieve standardizing model feature interfaces. similar programming integrated development environment within teaching concept implementation done projects grouped solutions. projects solution trained together retraining aﬀect other. dependencies across diﬀerent solutions treated versioned packages means retraining project solution aﬀect project diﬀerent solution modular development principle encourages sharing explicit concept implementations. labels version control teacher actions equivalent concept program. saved commit. like programming code teacher’s actions relevant concept saved version control system. diﬀerent type actions kept diﬀerent ﬁles facilitate merge operations between contributions diﬀerent teachers. combination principles suggests teaching process diﬀerent standard teaching process. universal teaching language implies machine learning expert left teaching loop. featuring completeness principle implies engineers left teaching loop well. teaching tool provide teacher needed build models eﬀectively. engineers update data pipeline programming language neither conceptdependent engineer teaching loop. principles imply single person domain teaching knowledge whole process. availability rich diverse sampling means traditional data collection labeling step part concept teaching process. distribution robustness principle allows teacher explore label freely throughout process without worrying balancing classes example types. concept modularity version control guarantee function created project reproducible provided features deterministic training deterministic. concept modularity principle enables interpretability scaling complexity. interpretability comes able explain sub-concept looking labels features schema. even sub-concept black inside interfaces transparent. merge functionality version control enables easy collaboration multiple teachers. evaluating quality criteria distribution-robust setting diﬃcult beyond scope paper. simple criteria could pause teacher’s cost time invested reaches given limit. finding test error eﬀectively also diﬃcult beyond scope paper. idea query large sample leveraging query-speciﬁc teacher-created concepts sub-concepts. maximize semantic expressiveness querying diversity results. uncertainty sampling striking diﬀerences teaching process standard model building process. important aspect done single actor operating true distribution. knowledge transfer teacher learner multiple modalities process never-ending loop reminiscent mitchell’s nell capacity increased demand need traditional regularization teacher controls capacity learning system adding features necessary. past decades machine learning ﬁeld devoted energy developing improving learning algorithms. problems data plentiful statistical guarantees suﬃcient approach paid handsomely. ﬁeld evolving toward addressing larger simpler ephemeral problems. demand solve problems eﬀectively grows access teachers build corresponding solutions limited scarcity cost. truly meet demand need advance discipline machine teaching. shift identical shift programming ﬁeld parallel yields wealth beneﬁts. paper takes inspiration three lessons history programming. ﬁrst problem decomposition modularity. allowed programming scale complexity. argue similar approach beneﬁts machine teaching. second lesson standardization programming languages write once everywhere. paper proposing standard machine teaching language enumerated important machine-learningagnostic knowledge channels available teacher. ﬁnal lesson process discipline includes separation concerns building standard tools libraries. addresses limitations productivity scaling number contributors plagued programming proposed principles lead better teaching process discipline. tools programming version control used principles successfully applied services luis.ai product groups inside microsoft bing local. early stages building teaching interactive development environment. philosophical note large monolithic systems epitomized deep learning popular trend artiﬁcial intelligence. form machine learning behaviorism. idea complex concepts learned large pairs. regularizers and/or deep representations computed using unsupervised semi-supervised learning monolithic learning approach yielded impressive results. case several ﬁelds labeled data abundant monolithic approach however limitations labeled data hard come deep representations built unlabeled data optimize data rare misspellings domain speciﬁc likely ignored misinterpreted appear frequently diﬀerent domain context. corner cases little labels autonomous-driving ignored great perils. large models hard interpret. limitations overcome injecting semantic knowledge active teaching reason believe large monolithic systems systems actively supervised teaching important roles play machine learning. bonus easily combined complement other. thank jason williams support contributions machine teaching. jason creator luis project service building language understanding models based principles mentioned paper. thank riham mansour microsoft cairo team co-building maintaining improving www.luis.ai service. finally thank matthew hurst team building highperforming page entity extractors leveraging machine teaching tools. entity extractors deployed bing local.", "year": 2017}