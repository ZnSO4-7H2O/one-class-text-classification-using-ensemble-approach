{"title": "Property analysis of symmetric travelling salesman problem instances  acquired through evolution", "tag": ["cs.NE", "cs.AI", "G1.6;I.2.8"], "abstract": "We show how an evolutionary algorithm can successfully be used to evolve a set of difficult to solve symmetric travelling salesman problem instances for two variants of the Lin-Kernighan algorithm. Then we analyse the instances in those sets to guide us towards deferring general knowledge about the efficiency of the two variants in relation to structural properties of the symmetric travelling sale sman problem.", "text": "abstract. show evolutionary algorithm successfully used evolve diﬃcult solve symmetric travelling salesman problem instances variants lin-kernighan algorithm. analyse instances sets guide towards deferring general knowledge eﬃciency variants relation structural properties symmetric travelling salesman problem. travelling salesman problem well known np-complete. mostly studied form optimisation problem goal shortest hamiltonian cycle given weighted graph restrict symmetric travelling salesman problem i.e. distance distance euclidean distances two-dimensional space. time much study devoted development better solvers. better refers algorithms eﬃcient accurate both. seems development progress eﬀort went construction algorithm opposed studying properties travelling salesman problems. work forms important counterexample focuses determining phase transition properties among others random graphs observing graph connectivity standard deviation cost matrix. conjecture become popular np-complete problems least order parameter hard solve problem instances clustered around critical value order parameter. remains open question whether critical region order parameters mainly depending properties problem whether linked algorithm attempts solve problem. however substantial number empirical studies shown many constraint satisfaction constraint optimisation problems general region exists problems deemed diﬃcult solve large selection algorithms often characterisation order parameter includes structural properties leads accurate prediction better understanding hard solve problems expected. naturally exclude relationship algorithm certain structural properties exist. study shall provide empirical evidence existence following section describe process evolving instances. then section provide brief overview lin-kernighan algorithm variants used study. section contains empirical investigation diﬃculty properties evolved problem instances. last section provide conclusions. general approach similar evolutionary algorithm used evolve diﬃcult solve binary constraint satisfaction problem instances backtracking algorithm. here similar evolutionary algorithm evolve diﬃcult travelling salesman problem instances well known solvers. instance represented list coordinates grid. list directly forms chromosome representation evolutionary algorithm works. initial instances create list nodes uniform randomly selecting coordinates grid. forms ﬁrst step process depicted figure process enters evolutionary loop instance awarded ﬁtness equal search eﬀort required solver nearoptimal shortest tour. using two-tournament selection repeatedly select parents create oﬀspring using uniform crossover. every oﬀspring subjected mutation consists replacing nodes probability uniform randomly chosen coordinates. generational model repeated times together best individual current population population formed. loop repeated generations. mutation rate decreased subsequent generations. process makes possible take large steps search space start keeping changes small run. mutation rate varied using constrained optimisation problems distinguish types algorithms complete algorithms incomplete algorithms. ﬁrst often based form branch-and-bound latter equipped several heuristics. general complete algorithms quickly become useless size problem increased development solvers shifted towards heuristic methods. renowned heuristic methods lin-kernighan developed thirty years still known success eﬃciently ﬁnding near-optimal results. core lin-kernighan descending variants consists edge exchanges tour. precisely procedure consumes algorithm’s run-time. therefore order measure search eﬀort lin-kernighan-based algorithms count number times edge exchange occurs run. thus measure time complexity independent hardware compiler programming language used. study variants lin-kernighan algorithm explained next. chained lin-kernighan variant aims introduce robustness resulting tour chaining multiple runs lin-kernighan algorithm. starts perturbed version ﬁnal tour previous run. length chain depends number nodes problem. proof given demonstrating local optimisation algorithms pls-complete always forced performing exponential number steps respect input size problem. lin-kernighan ﬁrst reported diﬃculty certain problem instances common property clustered. reported instances consisted partial graphs performance induced number hops required move salesman clusters large enough confuse algorithm. using symmetric problem full graphs exist thus every node reached hop. reaction performance reported variant linkernighan proposed called lin-kernighan cluster compensation variant aims reduce computational eﬀort maintaining quality solutions produced clustered non-clustered instances. minimum bottleneck cost path bottleneck cost path deﬁned heaviest edge path. values used guiding utility function lin-kernighan prune unfruitful regions i.e. involved high bottlenecks search space. experiment consists independent runs evolutionary algorithm time producing diﬃcult problem instance run. instances generations results running lin-kernighan variant times experiment. problem instances experiment called algorithmevolved algorithm either lk-cc depending problem solver used experiment. total problem instances used initial populations runs called random contains unique problem instances generated uniform randomly. initial instances lin-kernighan variants. figure show amount search eﬀort required chain lin-kernighan solve sets instances corresponding diﬀerent experiments well random set. also compared results results reported speciﬁc generator used create clustered instances solved using chained lin-kernighan variant. contains diﬃcult solve instances experiments called generator. figure notice mean median diﬃculty instances clkevolved higher created generator. also percentile ranges overlapping high conﬁdence correctness diﬀerence diﬃculty. comparing diﬃculty lk-cc random evolved sets figure remarkable diﬀerence amount variation results algorithms. much variation random lk-cc. however evolved sets opposite true. also mention random lk-cc signiﬁcantly faster diﬀerence speed evolved sets negligible. count number times optimum found algorithms random corresponding evolved sets. optima calculated using concorde’s branch-and-cut approach create lp-representation instance solved using qsopt show average discrepancy optimal tour length length tour produced problem solvers. similar picture presents evolved sets. here average discrepancy best tour clkevolved set. lk-cc average discrepancy ﬁnds best tour lk-ccevolved set. quantiﬁable measure amount clusters instances clustering algorithm gdbscan algorithm uses stochastic process assumes shape clusters works without predeﬁned number clusters. makes ideal candidate cluster -dimensional spatial data methods suﬀers least amount bias possible. works using arbitrary neighbourhood function case minimum euclidean distance. determines clusters based density ﬁrst seeding clusters iteratively collecting objects adhere neighbourhood function. neighbourhood function spatial index results run-time complexity clustering algorithms pose large responsibility users every clustering algorithm depends least parameter help deﬁne cluster common parameters number clusters e.g. variants k-means distance measurements decide points near enough consider robust result number clusters found diﬀerent sets instances repeat following procedure instance set. using settings minimum euclidean distance parameter gdbscan cluster instance every parameter setting. count number occurrences number clusters found. average results instances set. minimum euclidean distance parameters chosen includes peak smallest number clusters problem instance. procedure quantify clustering problem instances random evolved sets. figure shows random lk-ccevolved average number clusters found diﬀer much. instead problem instances clkevolved contain consistently clusters. largest diﬀerence found clusters. problem solvers study diﬀerence distribution segment lengths resulting tours random corresponding evolved set. sets take optimal tour instance then tour observe segment lengths. finally count occurrences segment lengths average whole tours. figure shows average distribution segment lengths tours derived instances random clkevolved set. notice diﬀerence random clkevolved increase short segments longer segments introduction long segments number segments tour always same i.e. increases relate decrease medium length segments figure shows average distribution segment lengths problem solvers. lk-cc observe signiﬁcant changes distribution segment lengths random lk-ccevolved set. comparing average distribution segment lengths tours problem solvers clearly large diﬀerence. lk-cc compared uses much longer segments. segments frequently used range never occur clk. distribution lk-cc seems match ﬂattened normal distribution whereas distribution much skewed favours usage short segments length less figure show average number occurrences distances pairs nodes. every instance contains pairs nodes account forms full graph. distribution pair-wise distances mostly resembles skewed gaussian distribution. main exception consists cut-oﬀ short segments lengths. short distances smaller occur rarely nodes distributed space. chained lin-kernighan notice change distribution similar previous section. compared random number short segments number long segments increases. although extent observing distribution segment lengths. also number medium length occurrences less random set. forms evidence introduction clusters problem instances. although analysis provide amount clusters give unbiased view existence clusters independent algorithms clustering algorithm. also shown figure distribution pair-wise distances problem instances evolved lk-cc algorithm. notice increase shorter distances matched equal decrease longer distances. thus total layout nodes becomes huddled together. diﬃcult algorithm. however variant needs signiﬁcantly search eﬀort alternative evolved random set. indicates properties diﬃculty shared algorithms. introduced evolutionary algorithm evolving diﬃcult solve travelling salesman problem instances. method used create problem instances well known variants lin-kernighan heuristic. sets provided diﬃcult problem instances problem instances generated uniform randomly. moreover chained lin-kernighan variant problem instances signiﬁcantly diﬃcult created specialised generator. analysis sets evolved problem instances show instances adhere structural properties directly aﬄict weak points corresponding algorithm. problem instances diﬃcult chained lin-kernighan seem contain clusters. comparing instances generator contained average clusters evolved ones thus leads conjecture clusters suﬃcient property induce diﬃculty clk. position clusters distribution cities clusters well distribution nodes belonging clusters much inﬂuence. goal author lk-cc provide solver eﬃciency eﬀectiveness inﬂuenced structure problem problem instances evolved study diﬃcult solve lin-kernighan cluster compensation tend condense contain random layouts. algorithm suﬀers high variation amount search eﬀort required therefore depending heavily lucky setting random seed. furthermore eﬀectiveness much lower length tours average away optimum. thus seems live goals lk-cc losing performance robustness. methodology described general nature theory used automatically identify diﬃcult problem instances instances inhibit properties. afterwards instances reveal properties lead general conclusions algorithms show particular performance.", "year": 2005}