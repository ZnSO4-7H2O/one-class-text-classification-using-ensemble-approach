{"title": "Counting and Uniform Sampling from Markov Equivalent DAGs", "tag": ["cs.DS", "cs.AI", "cs.LG", "math.CO", "stat.ML"], "abstract": "We propose an exact solution for the problem of finding the size of a Markov equivalence class (MEC). For the bounded degree graphs, the proposed solution is capable of computing the size of the MEC in polynomial time. Our proposed approach is based on a recursive method for counting the number of the elements of the MEC when a specific vertex is set as the source variable. We will further use the idea to design a sampler, which is capable of sampling from an MEC uniformly in polynomial time.", "text": "propose exact solution problem ﬁnding size markov equivalence class bounded degree graphs proposed solution capable computing size polynomial time. proposed approach based recursive method counting number elements speciﬁc vertex source variable. idea design sampler capable sampling uniformly polynomial time. directed acyclic graphs commonly used graphical model represent causal relationships among variables. representation directed edge indicates direct causal relationship corresponding variables. markov property faithfulness assumptions conditional d-separation variables bijective correspondence conditional independencies variables underlying joint probability distribution hence representation demonstrates conditional independencies among variables. general approach learning causal structure statistical data variables consistent conditional independencies given data. however representation conditional independencies always unique. preference elements mec. therefore given data generally given joint probability distribution variables size i.e. number elements clear metric measuring success observational structure learning approach indicates necessity using interventional experiments. indicates importance awareness size given structure interest. moreover mentioned earlier compare different dags consistent given joint distribution variables. here space dags space mecs chosen search space. chickering showed size mecs large searching space mecs efﬁcient indicates importance learning size mecs. best knowledge main existing solution problem ﬁnding size mecs markov chain methods according method markov chain constructed elements whose properties ensure stationary distribution uniform elements. main problems markov chain method non-negligible time required convergence computational issues cases prevents practice. paper propose exact solution problem ﬁnding size mec. bounded degree graphs proposed solution capable computing size polynomial time. proposed approach based recursive method counting number elements speciﬁc vertex source variable. mentioned earlier observational setting preference elements mec. therefore reasonable approach testing performance algorithm test uniformly drawn samples mec. indicates importance ability sampling uniformly. introduced idea design sampler capable sampling uniformly polynomial time. approach applied ﬁnding best variables intervene restricted certain budget number experiments rest paper organized follows. section present problem description. method counting elements presented section counting idea used section design uniform sampler markov equivalent dags. usually represented mixed graph graph containing directed undirected edges. denote vertices directed edges undirected edges respectively. directed edges direction elements class directions essential. reason mixed graphs referred essential graph literature rest edges undirected exist elements class agree direction edge. essential graphs also called complete partial directed acyclic graphs maximally oriented graphs deﬁne skeleton undirected graph vertices original undirected version edges dag. also deﬁne v-structure structure comprising converging directed edges whose tails connected edge. following result verma pearl characterizes markov equivalence. proposition indicates edges part v-structure directed essential graph i.e. none members subgraph corresponding undirected part essential graph allowed contain v-structure. essential graph. consider undirected graph resulted removing directed edges graph consists disconnected chain components gc}. note components essential graph themselves. entire essential graph undirected forms single chain component. andersson showed chain components chordal graphs size denote size corresponding gillispie perlman showed size calculated follows proposition determines direction edges resolved source vertex known. edges endpoint closer source vertex other. note removing resolved edges obtained digraph remain acyclic v-structure-free proof. acyclicity obvious removing edges. show v-structure-freeness consider v-structure note v-structure created means shielding vertex removed since unresolved contradiction. lemma orient edges obtain member corresponding follows. first vertex chosen source vertex. determine orientation edges according proposition removing resolved edges resulted isolated vertices disconnected components components contain cycles v-structures. component vertex chosen source vertex component. procedure repeated unresolved edge left. idea aforementioned procedure used recursive manner count members mec. main tool approach presented theorem proof. component choosing different variables component source partitions elements mec. different choices source lead elements remained uncounted variable chosen source once. therefore inner summation. justify outer product need show orientation component cause restrictions possible orientations component. fact component certain depth level source cannot create v-structures pointing lower levels. also reason fact edges source towards component edges component cannot create cycle. pseudo-code approach presented algorithm code consists functions flowed function flowed takes undirected connected graph vertices input returns edges whose orientation resolved input vertex source vertex. function applies theorem recursive manner calculate number elements connected undirected essential graph input vertex source vertex. obtain call flowed pairs execute flowed pair resulting undirected components. ﬁrst show vertex obtained directed edge vertex applying flowed. contradiction suppose directed edge. consider shortest path path must pass since oriented neighbors calling flowed procedure. contradiction fact thus directed edge example consider undirected graph presented figure essential graph given input algorithm setting vertex source vertex direction edges obtained using function flowed shown figure therefore remaining undirected graph shown figure setting vertex source vertex undirected component remained. hence therefore symmetry structure well. setting vertex source vertex direction edges obtained using function flowed shown figure therefore remaining undirected graph shown figure setting vertex source vertex undirected component remained. hence therefore symmetry structure well. mentioned earlier section applications performance action needed tested large size. cases optimize behavior uniform samples drawn mec. section introduce samplers providing random dags mec. ﬁrst sampler presented subsection based counting idea section case bounded degree graphs sampler capable producing uniform samples polynomial time. degree bounded worst case sampler high computational complexity. therefore subsection provide another sampler originally introduced case unbounded degree graphs. although sampler unbiased extensive experimental results conﬁrms sampling distribution second sampler close uniform. pseudo-code uniform sampler presented algorithm functions flowed deﬁned pseudo-code algorithm sampler ﬁrst weights calculated vertices vertex chosen source variable source variable determine orientation edges according proposition removing directed edges resulted isolated vertices disconnected components. choosing source variable proof. member mec. clarity proof assume obtained form three rounds choosing source vertices otherwise idea easily extendable case arbitrary many rounds. therefore assume obtained chosen source vertex round round case unbounded degree computational complexity algorithm high worst case. therefore also provide heuristic sampler case ﬁrst introduced although unbiased experimental results indicate sampler performance close uniform sampler. pseudo-code heuristic sampler presented algorithm algorithm consider subsets size uniformly random order subset orient undirected edges among independently according bernoulli distribution. resulting orientation induced subgraph became directed cycle v-structure redo orienting. keep checking subsets size induced subgraph directed none v-structure directed cycle. proof. directed cycle size itself lemma trivial. suppose cycle size relabel vertices since graph chordal chord hence triangle vertices vi+} direction vi+} directed cycle size otherwise directed cycle proof theorem undirected graph chordal therefore lemma insure generated directed graph sufﬁces make sure directed cycles length checks proposed procedure. checking generated markov equivalence class corresponding proposition sufﬁces check v-structures check proposed procedure. hauser bühlmann hauser bühlmann characterization greedy learning interventional markov equivalence classes directed acyclic graphs. journal machine learning research meek meek causal inference causal explanation background knowledge. proceedings eleventh conference uncertainty artiﬁcial intelligence pages morgan kaufmann publishers inc.", "year": 2018}