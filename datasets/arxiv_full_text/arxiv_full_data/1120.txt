{"title": "Expert-Driven Genetic Algorithms for Simulating Evaluation Functions", "tag": ["cs.NE", "cs.LG", "stat.ML"], "abstract": "In this paper we demonstrate how genetic algorithms can be used to reverse engineer an evaluation function's parameters for computer chess. Our results show that using an appropriate expert (or mentor), we can evolve a program that is on par with top tournament-playing chess programs, outperforming a two-time World Computer Chess Champion. This performance gain is achieved by evolving a program that mimics the behavior of a superior expert. The resulting evaluation function of the evolved program consists of a much smaller number of parameters than the expert's. The extended experimental results provided in this paper include a report of our successful participation in the 2008 World Computer Chess Championship. In principle, our expert-driven approach could be used in a wide range of problems for which appropriate experts are available.", "text": "abstract paper demonstrate genetic algorithms used reverse engineer evaluation function’s parameters computer chess. results show using appropriate expert evolve program tournament-playing chess programs outperforming two-time world computer chess champion. performance gain achieved evolving program mimics behavior superior expert. resulting evaluation function evolved program consists much smaller number parameters expert’s. extended experimental results provided paper include report successful participation world computer chess championship. principle expert-driven approach could used wide range problems appropriate experts available. since dawn modern computer science game playing posed formidable challenge ﬁeld artiﬁcial intelligence. many founding ﬁgures computer science received best paper award conference’s real-world applications track. n.s. netanyahu department computer science bar-ilan university ramat-gan israel center automation research university maryland college park e-mail nathan{cs.biu.ac.il cfar.umd.edu} ongoing role played impact computer games underestimated. nothing else computer games served important testbed spawning various innovative techniques domains applications search automated theorem proving planning learning. addition annual world computer chess championship arguably longest ongoing performance evaluation programs computer science inspired wellknown competitions robotics planning natural language understanding. computer chess researched ﬁelds within lent successful application conventional learning methods enormous complexity. hence chess programs still resort manual tuning parameters evaluation function. latter assigns score given chess position thus critical component chess program. paper introduce novel expert-driven approach automatically evolving parameters chess program’s evaluation function genetic algorithms results show expert-driven approach application eﬃciently evolves parameters randomly initialized values highly tuned ones yielding program outperforms original version wide margin. performance achieved evolved program whose evaluation function considerably smaller expert’s terms number parameters. paper extend results provided earlier work provide in-depth assessment performance gain evolution. experiments consist primarily longer series matches played evolved organism expert compare performance higher statistical conﬁdence. additionally compare performance initial random organisms expert evolved organism performance evolved organism several commercial chess programs including relative tactical strength respect suite tactical test positions. finally provide detailed account participation world computer chess championship. running average single processor laptop nine strongest programs world genetically evolved program reached second place world computer speed chess championship sixth place world computer chess championship thereby establishing practical merit approach. rest paper organized follows. section review past attempts applying evolutionary techniques computer chess. also compare alternative learning methods evolutionary methods argue latter appropriate task question. section presents expert-driven approach including detailed description chess programs used framework applied problem. section provides experimental results section contains concluding remarks suggestions future research. mccarthy refers chess drosophila chess-playing programs come long past several decades. ﬁrst chess programs could pose challenge even novice player current advanced chess programs strongest human chess players recent machine matches clearly indicate. improvement largely result deep searches possible nowadays thanks hardware speed improved search techniques. search depth early chess programs limited plies nowadays tournament-playing programs easily search dozen plies middlegame tens plies late endgame. despite groundbreaking achievements glaring deﬁciency today’s chess programs severe lack learning capability words despite seemingly intelligent behavior chess programs mere bruteforce searchers lack true underlying intelligence. ﬁfty years research area computer games many learning methods reinforcement learning employed simpler games. temporal diﬀerence learning successfully applied backgammon checkers although temporal diﬀerence learning also applied chess results showed three days learning playing strength program merely rating chess program. recent paper block reported experiments applying reinforcement learning chess. results show learning improvement phase program achieves playing strength amongst lowest ratings chess program. wiering provided formal arguments failure methods complicated games chess. issue learning computer chess basically optimization problem. program plays conducting search root search tree current position leaf nodes evaluated static evaluation function. words sophisticated search algorithms knowledge program lies evaluation function. even though automatic tuning methods based mostly reinforcement learning successfully applied simpler games checkers almost impact state-of-the-art chess engines. currently tournament-playing chess programs hand-tuned evaluation functions since conventional learning methods cannot cope enormous complexity problem. underscored following points search space smooth unimodal. evaluation function’s parameters chess program highly co-dependent. example many cases increasing values three parameters result worse performance fourth parameter also increased improved overall performance would obtained. since search space unimodal i.e. consist single problem well understood. discussed detail next section even though programs hand-tuned programmers ﬁnding best value parameter based mostly educated guessing intuition. problem well understood domain-speciﬁc heuristic would outperformed general-purpose method require global optimum found. goal tuning evaluation function adjust parameters overall performance program enhanced. fact unique global optimum exist tuning problem. view points seems appropriate employ automatic tuning parameters evaluation function. indeed ﬁrst glance appears like optimization task well suited many parameters evaluation function encoded bit-string. randomly initialize many chromosomes representing evaluation function. thereafter needs evolve population highly tuned evaluation functions emerge. however major obstacle hinders application namely ﬁtness function. given parameters evaluation ﬁtness value calculated? many years seemed solution individuals generation play series games subsequently record score individual ﬁtness value. main drawback approach unacceptably large amount time needed evolve generation. result severe limitations imposed length games played generation also size population involved. population size limitation minute game side assuming individual plays least games would take minutes generation evolve. speciﬁcally reaching generation would take less days. section present expert-driven approach using state-of-the-art chess programs. that brieﬂy review previous work applying evolutionary methods computer chess. despite abovementioned problems successful applications evolutionary techniques computer chess subject restrictions. genetic programming successfully employed hauptman sipper evolving programs solve mate-in-n problems play chess endgames. kendall whitwell used evolutionary algorithms tuning parameters evaluation function. approach limited success large number games required small number parameters used evaluation function. evolved program managed compete strong programs search depth severely limited. similarly aksenov used genetic algorithms evolving parameters evaluation function using games organisms determining ﬁtness. again since method required large amount games method evolved parameters evaluation function limited success. tunstall-pedoe also suggested similar approach without providing implementation. gross used hybrid genetic programming evolution strategies improve eﬃciency already existing search algorithm using distributed computing environment internet. following section present novel approach facilitates eﬃciently evolving parameters evaluation function. demonstrated method fast evolved program today’s strongest chess programs. impediments already discussed establishing ﬁtness evaluation means playing numerous games practical. however exploit vast reservoir previously under-utilized information. evaluation functions existing chess programs carefully-guarded secrets standard practice chess program reveal score given position encountered game. show section genetic algorithms essentially reverse engineer evaluation functions. particular show reverse engineering carried rapidly successfully program based evaluation function learned particular expert perform well expert. program evolves evaluation function learning expert according steps shown figure generate list random problems. problem expert evaluate problem store result. individual evaluate problems individual calculate average diﬀerence value given individual value issued expert. ﬁtness individual inversely proportional average diﬀerence. case problem associated chess position expert input score evaluation function state-of-the-art chess engine. words generate list random chess positions generation strong chess engine evaluate them. afterwards evaluation function individuals evaluate positions. closer evaluation individual evaluation expert higher ﬁtness value. following subsections describe detail chess programs implementation expert-driven approach parameters used. falcon chess engine expert experiments. falcon rated grandmaster-level chess program successfully participated three world computer chess championships. falcon uses negascout/pvs search null-move pruning internal iterative deepening dynamic move ordering multi-cut pruning selective extensions transposition table futility pruning near leaf nodes blockage detection endgames falcon’s extensive evaluation function consists parameters implementation contains several thousand lines code. initial chromosomes evolve mimicking expert exact search techniques falcon using diﬀer falcon evaluation function consists fewer parameters. experiments randomly initialize parameters organisms thus resulting random evaluation function goal evolve parameters mimicking behavior falcon. using falcon expert evolve organisms’ evaluation function mimic behavior expert thereby improving strength. output falcon’s evaluation function otherwise make assumption methods falcon uses compute function. thus make falcon’s scores optimize parameters organisms parameter values falcon’s evaluation function considered unknown. although described above organisms’ evaluation function consists much smaller number parameters falcon’s cover important aspects position e.g. material piece mobility centricity pawn structure king safety. despite considerably simpler evaluation function achieve comparable performance falcon’s shown section order demonstrate eﬀectiveness expert-driven approach ignore entirely initial values evaluation function’s parameters instead assign random values them. words initial organisms play like novice knowledge game parameters organisms’ evaluation function represented binary bit-string initialized randomly. impose restriction except parameters representing material values pieces parameters assigned ﬁxed length bits parameter. obviously many parameters bits suﬃce. however allocating ﬁxed length bits parameters ensures priori knowledge bias algorithm way. ﬁrst falcon search positions depth plies store evaluation position. then generation randomly select positions designated positions learning phase. random selection positions introduces additional variety test sets help prevent premature convergence suboptimal values. organism translate chromosome bit-string corresponding evaluation function apply evaluation function positions examined denote score organism position position deﬁne organism’s error ﬁrst present results running expert-driven described previous section. then provide results several experiments measure strength evolved program comparison original version. figure shows average error position best organism population average generations. speciﬁcally results indicate average error error best organism ﬁrst generations greater centipawns centipawns respectively. large initial errors random parameter initialization lead ﬁrst generations small ﬁtness values many organisms subsequently rapid extinction. close generation average error best organism drops centipawns. stage large parameter values already well tuned organisms smaller parameter values tuned remaining generations. generation average error best organism centipawns average error population centipawns. figure provides evolved values best individual. evaluation unit chess programs commonly called centipawn i.e. value pawn. traditionally pawn assigned value parameters assigned relative values. however value pawn need exactly unit evaluation longer exactly pawn. despite inconsistency term centipawn still used denote smallest evaluation unit. compared evaluation expert average error case centipawns. indicates ﬁrst positions used training cover types positions arise average error similar average error testing set. entire -generation evolution lasted seconds machine less minutes. results clearly demonstrate within minutes ga-based module evolved scratch evaluation function whose parameters yield similar performance expert. provide results series matches programs. order obtain baseline ﬁrst observed performance randomly initialized organism expert falcon best evolved organism conducted series games falcon evol*. table provides results. matches falcon randorg evol* randorg consisted games played time limit minutes results falcon randorg show randomly initialized organism loses almost games expected outcome. moreover evolved evol* resoundingly outperforms randomly initialized organism clearly demonstrating immense improvement evolution. results indicate evolved evol* performes expert falcon. particular results establish empirically despite using evaluation function smaller number parameters expert-driven module evol* evolves parameter values yield comparable performance falcon’s. fact cannot help observe curious fact evol*’s performance actually stronger falcon’s. indeed statistical conﬁdence rating diﬀerence statistical conﬁdence rating diﬀerence elo. evolved evol* actually slightly superior falcon statistical conﬁdence apparently improved performance evolved organism expert attributed following factors evolved program’s evaluation function fewer parameters expert makes capable applying evaluation function faster thus resulting higher processing rate program evolved mimic behavior expert -ply search evaluation function evolved statically incorporate dynamic knowledge expert. additional series consisting games chess program crafty crafty successfully participated numerous world computer chess championships direct descendent cray blitz wccc winner frequently used literature standard reference. thus compared evolved evol* expert falcon crafty. table provides results. phenomenon observed another experiment. measuring tactical strength programs used encyclopedia chess middlegames test suite consisting positions. program given seconds position come correct move position. table provides results. seen evol* solved signiﬁcantly problems crafty falcon. finally extended experiments compare performance evol* several world’s commercial chess programs. programs included junior fritz hiarcs. junior world microcomputer chess championship world computer chess championship junior played -game match former world champion garry kasparov resulted tie. junior ultimate computer chess challenge organized world chess federation defeating fritz fritz world computer chess championship. fritz drew brains bahrain match former world champion vladimir kramnik drew four-game match garry kasparov defeated vladimir kramnik hiarcs world microcomputer chess championship played four-game match grandmaster evgeny bareev ranked player world. four games ended draw resulting tied match. hiarcs international paderborn computer chess championship. addition table compares tactical performance evolved organism three commercial programs. results show number positions solved program. similar trend emerges i.e. evolved organism fritz hiarcs terms tactical strength slightly inferior junior. note experiments described conducted uniform platform i.e. match programs machine allocated resources next subsection report performance evolved organism recent world computer chess championship conducted uniform platform. using expert-driven approach participated genetically evolved version program world computer chess championship beijing china. competing average laptop strongest programs world program reached place world computer speed chess championship place world computer chess championship. highly surprising results especially light huge hardware handicap comparison competitors demonstrate capabilities expert-driven approach. table results genetically evolved program competitors world computer speed chess championship world computer chess championship stands victory program stands loss stands draw. paper presented novel expert-driven approach eﬃcient automatic tuning parameters chess program’s evaluation function. wherever intelligent entity already exists employ expert within ga-based framework evolve organisms mimic behavior. words approach enables duplicating behavior another intelligent organism observing merely performance without accessing underlying mechanism. according experiments organisms evolved within minutes randomly initialized chromosomes sets highly-tuned parameters yield similar performance expert respect positions. results games played demonstrate signiﬁcant gain evolved version clearly outperforms original version. note successful duplication expert’s behavior achieved despite fact evaluation function evolved program consists considerably smaller number parameters. extended version previously presented work included extended experiments assess accurately performance evolved program. speciﬁcally measured performance gain evolution comparing random organism evolved organism expert longer series matches evolved organism expert compared performance evolved organism three commercial chess programs observed tactical performance evolved organism several programs. finally provided detailed account participation world computer chess championship despite huge hardware disadvantage genetically evolved program achieved second place recent world computer speed chess championship sixth place world computer chess championship. extended results ﬁrmly establish merit ga-based method automatically learning parameters chess program’s evaluation function. future research intend develop additional capabilities based presented expert-driven approach. paper focused another computer program serve expert. however using human players experts diﬃcult challenge explicit notion numerical evaluation position. believe though record hundreds games human player would provide suﬃcient data similar learning take place. method intend explore extract several thousand positions games played human expert position assign higher ﬁtness organism produces move played expert. successful approach would basically enable program perform like expert without probing his/her mind. example might able develop program plays like kasparov learning games. work used single expert. alternative implementation might employ several experts using wisdom crowds concept evolve individual wiser experts. well known chess program strengths weaknesses. employing several expert chess engines might possible combine strengths them outperform individual expert. expert-driven approach could also applied problem player recognition. given players simplest approach separately evolve organisms mimicking behavior players respectively. then given query game would generated organisms evaluate position. player whose cloned organism agrees closely moves made likely played game question. finally believe approach pursued paper parameter tuning could applied wide array problems output expert’s evaluation function available training purposes. rating system developed arpad oﬃcial system calculating relative skill levels players chess. following statistics january fide rating list provide general impression meaning rating system four players ever rating above. novice player generally associated rating values elo. given rating diﬀerence player player expected winning rate player given addition given results series matches players derive conﬁdence intervals rating diﬀerence. without loss generality denote respectively number wins draws losses ﬁrst player. mean score standard deviation given respectively note essentially estimate expected winning rate. suppose interested computing example conﬁdence interval rating diﬀerence. compute lower upper ends winning rate i.e. substituting obtain corresponding lower upper ends conﬁdence interval rating diﬀerence. given conﬁdence level computer corresponding conﬁdence interval similarly described steps.", "year": 2017}