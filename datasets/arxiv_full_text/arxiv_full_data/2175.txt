{"title": "Adaptive Matching for Expert Systems with Uncertain Task Types", "tag": ["cs.AI", "cs.LG", "stat.ML"], "abstract": "Online two-sided matching markets such as Q&A forums (e.g. StackOverflow, Quora) and online labour platforms (e.g. Upwork) critically rely on the ability to propose adequate matches based on imperfect knowledge of the two parties to be matched. This prompts the following question: Which matching recommendation algorithms can, in the presence of such uncertainty, lead to efficient platform operation?  To answer this question, we develop a model of a task / server matching system. For this model, we give a necessary and sufficient condition for an incoming stream of tasks to be manageable by the system. We further identify a so-called back-pressure policy under which the throughput that the system can handle is optimized. We show that this policy achieves strictly larger throughput than a natural greedy policy. Finally, we validate our model and confirm our theoretical findings with experiments based on logs of Math.StackExchange, a StackOverflow forum dedicated to mathematics.", "text": "hand continuous stream arrivals tasks jobs hand. model platform’s operation consists servers iteratively attempting solve tasks. processed server task leaves system solved; otherwise remains till successfully treated server. model uncertainty task types assume incoming task given prior distribution task’s true type. servers’ abilities represented probability server solve task given type attempt platform scenario tasks questions servers experts; server processing task corresponds expert providing answer question. task solved corresponds answer accepted. online labour platform tasks could offers server pool workers similar abilities. server processing task corresponds worker interviewed task solved interview leads hire. could also consider dual interpretation labour market constrained workers rather offers. task worker seeking work server pool employers looking hires. important feature model consists fact task’s processing lead failure however affect uncertainty task’s type. indeed posteriori distribution task’s type failed attempt server differs prior distribution. instance scenario question expert calculus failed answer either calculus hard. model determine necessary sufﬁcient conditions incoming stream task arrivals manageable servers words determine achievable throughputs system. process introduce candidate policies particular greedy policy according server choses serve tasks chance success highest. scheduling strategy easy implement based natural motivation. surprisingly perhaps show optimal throughput handle. contrast introduce so-called backpressure policy inspired wireless networking literature prove throughput-optimal. summarize contributions paper follows abstract—online two-sided matching markets forums online labour platforms critically rely ability propose adequate matches based imperfect knowledge parties matched. prompts following question matching recommendation algorithms presence uncertainty lead efﬁcient platform operation? answer question develop model task server matching system. model give necessary sufﬁcient condition incoming stream tasks manageable system. identify so-called back-pressure policy throughput system handle optimized. show policy achieves strictly larger throughput natural greedy policy. finally validate model conﬁrm theoretical ﬁndings experiments based logs math.stackexchange stackoverﬂow forum dedicated mathematics. online platforms enable matches trading partners two-sided markets recently blossomed many areas linkedin upwork facilitate matches employers employees; uber allows matches passengers drivers; airbnb booking.com connect travelers housing facilities; quora stack exchange facilitate matches questions either answers experts able provide them. systems crucially rely ability propose adequate matches based imperfect knowledge characteristics parties matched. example context online labour platforms uncertainty skill sets candidate employees requirements. similarly context online platforms uncertainty question types users’ ability provide answers. naturally leads following question matching recommendation algorithms presence uncertainty lead efﬁcient platform operation? natural measure efﬁciency throughput platform achieves i.e. rate successful matches allows. address question thus needs ﬁrst characterize fundamental limits achievable throughput. note posterior distribution task’s type upon failure subset servers depend sequence servers resolve task i.e. point time task associated ‘mixed-type’ deﬁned posterior distribution type given past attempts. considering setting online task arrivals ease exposition ﬁrst consider scenario single task. suppose time discrete. task arrives time prior distribution type upon arrival time server attempts resolve task. consider problem designing sequence servers probability task resolved within ﬁxed time maximized. i.e. mixed-type task time given resolved upon previous attempts. probability task resolved time contrast bayesian active learning setting goal reduce uncertainty true hypothesis outcome several experiments. using diminishing returns property called adaptive submodularity authors obtain policy competitive optimal. setting submodular function. thus greedy policy chosen mins /e-competitive feedback assumed general binary feedback assumed case. however keep binary feedback assumption since hiring platforms outcome job-employee match binary notiﬁed platform agents involved. feedback performance agents also reported feedback reliable often biased towards larger values even setting model relevant since answer available responses accepted asker stackoverﬂow. further paper extra dimension problem considered namely consider setting online task arrivals tasks different mixed-types compete servers resources leave upon resolved. design throughput optimal policies setting. consider continuous time setting i.e. tasks arrive rate time unit average. subsequent mixed types incoming tasks assumed i.i.d. taking values countable subset finally time server complete attempt takes average time units provide full characterization stability region sustainable throughputs task-expert system consideration. establish particular backpressure policy throughput-optimal sense supports maximum task arrival rate system stable. show exist instances task-expert systems simple matching policies natural greedy policy random policy support much smaller maximum task arrival rate backpressure policy. report results empirical analysis popular math.stackexchange platform establish heterogeneity skills experts experts knowledgeable across different types tasks others specialized particular types tasks. also show numerical evaluation results conﬁrm beneﬁts backpressure policy greedy random matchmaking policies. remainder paper structured follows. section presents system model. section present results baseline matchmaking policies namely greedy random. section presents characterization task arrival rates supported system stable prove superiority backpressure policy random greedy. section present experimental results. related work discussed section conclude section vii. proofs results provided section viii. main text summarize ideas proofs brief. task types. task system particular type servers present system. server attempts resolve task type outcome probability probability −psc. upon success task resolved. context online hiring platform equivalent successful hiring employee job. context platform equivalent answer expert accepted asker question. consider bayesian setting prior distribution {zc}c∈c task’s type distributions. note different tasks different prior distributions. clearly server processes task prior distribution probability fails given assume given task inspected several times given server assume outcomes success failure independent inspection. justiﬁed label fact represents collection experts similar abilities case multiple processings correspond processing distinct individual experts. setting would like minimize expected sojourn time typical task i.e. expected time arrival resolving typical task. recall success probabilities assumed arbitrary. heterogeneous setting minimizing expected sojourn time hard problem. fact true even uncertainty task types. proxy sojourn time optimal policies strive throughput optimal policies. particular characterize arrival rates system stabilized i.e. exists scheduling policy induces time-stationary regime system’s behavior. indeed stable system long term task resolution rate coincides task arrival rate thus throughput-optimal policies must make system stable whenever possible. note unstable system number outstanding tasks accumulate time expected sojourn time tends inﬁnity. finally simplicity assume speciﬁcally tasks arrive instants poisson process intensity time server complete attempt task follows exponential distribution parameter continuous time analog i.i.d. arrivals independent departures time slot discreet time setting. assumptions imply system state given time represented markov process simpliﬁes throughput analysis. system throughput often insensitive statistical assumptions arrival service times time represent number tasks mixed-type present system {nz}z∈z. also denote mixed type task server works time strategies servers select task handle based uniquely vector process forms continuous-time markov chain policies considered paper studied analyzing associated ctmc. allow task assigned multiple experts given time. further allow pre-emptive service i.e. expert drop service task task arrive system existing task receive response. following discussion section ii-a could greedy approach work well even online setting? throughput perspective natural greedy policy expert assigned task best suits skills i.e. among outstanding tasks expert assigned task mixed-type minimizes show surprising result class asymmetric systems greedy policy suboptimal random policy server chooses task uniformly random. ﬁrst formally deﬁne policies. transition rates ctmc greedy policy given follows. transition rate state state denote vector coordinates equal except z-coordinate equals state consider following class task-expert system. deﬁnition system) suppose task types experts arrival equally likely types i.e. satisﬁes experts provide responses unit rate i.e. further class class refer task-expert system asymmetric system parameter class systems task mixed-type receives mixed type failure either experts becomes sufﬁcient assume further easy check following result. obtain stability conditions capacity constraints conservation constraints capture tasks type another upon service expert. instance represents tasks mixed-type served expert fraction leaves system success rest gets converted type total arrival rate mixed-type νszψs) must match total νsz. further total service rate must less service capacity exists policy system stable. exist non-negative real numbers non-negative real numbers constraints hold system cannot stable. condition existence expert minc technical reason simplify proof. believe result holds even condition true. describe policy achieves optimal stability. need notation describe policy. consider number tasks system time mixed-type z\\y. tasks mixed-type mixed-type z\\y. also convenience tasks mixed-type i.e. consider following policy. deﬁnition policy) given ˜nz}z∈y deﬁned above. proof theorem provided section viii. provide ides brief. part suitably chosen linear lyapunov function. stability show lyapunov function negative drift ﬁnitely many states variant lyapunov-forster theorem follows theorem part follows following general result. intuitive random perform poorly compared optimal policy counterintuitive greedy perform sub-optimally random. reason poor performance greedy explained follows. asymmetric system ﬂexible expert i.e. expert tasks pure-types specialized expert i.e. expert pure-type greedy policy experts prioritize newly arriving tasks optimizes probability achieving success short term. however larger long-term throughput could achieved ﬂexible expert could focus lagging tasks i.e. tasks pure-type proof lyapunov function again proof involves signiﬁcantly different approach compared stability proofs standard constrained queuing networks ﬁnite number queues. particular develop equations account sets associated mixedtypes tasks also lengths history tasks. unlike backpressure policy proposed different setting agnostic system arrival rates policy backpressure stabilizes system depend value policies stated complex implement allows develop implementable heuristics signiﬁcantly outperform greedy policy. demonstrate next section. section present empirical results obtained using data math.stack-exchange platform. platform users post tagged questions answered users. asker select submitted answers best answer given question made public information platform. data estimate success probabilities experts answering questions parameters simulations compare throughputs achieved greedy random backpressure policies. substantially larger throughput achieved backpressure policy greedy random. dataset dataset consists around questions answers. retrieved february common tags given table decreasing order popularity. among tags common calculus covers questions least common complex analysis covers questions. analysis used questions tagged least popular tags amounts total questions answers. estimated skill sets success probabilities answering questions estimated follows. given usertag pair success probability estimated empirical frequency accepted answers user questions given conditional user least accepted answers questions given otherwise estimate success probability equal zero. success probabilities estimated users accepted answers. among users user accepted answers accepted answers user least number accepted answers accepted answers. users answers accepted. order form clusters users similar success probabilities different tags k-means clustering algorithm. theorem suppose exists minc sufﬁcient conditions stability given statement theorem satisﬁed exists ﬁnite subset policy backpressure stabilizes system. particular backpressure policy optimally stable such proving result requires signiﬁcantly different approach compared stability proofs quadratic lyapunov functions classical constrained queueing networks ﬁnite number queues. particular equations directly give stabilizing static policy. avoid pitfall ﬁnite overall arrival rate small ‘pool’ slack capacity servers serve inﬁnite number queues z\\y. provide alternative policy achieves stability weaker condition bounded away advantage rely precise numbers jobs sharing mixed type rather ‘local averages’. remain optimally stable even distribution mixed types incoming jobs longer assumed discrete. deﬁnition policy) partition ﬁnitely many subsets diameter |z−z| suppose sufﬁcient conditions stability given statement theorem satisﬁed. then exists sufﬁciently small backpressure policy stabilizes system. give average success probabilities different tags. bottom give sizes corresponding clusters. instance persons cluster average calculus linear algebra answers accepted. pronounced heterogeneity user expertise. highlighted success probabilities value least subset users namely cluster topics whereas clusters good different subsets topics. also prevalence questions different combinations tags mixed types. question mixed type arrives multiple tags associated mixed-type uniform distribution associated tags. kept combinations tags occur least total number questions. results combinations among singletons combinations tags. mixed types postive observed roughly questions tagged multiple tags showing relevance model. simulation setup assumed experts unit service rates. make approximation information times experts begin respond question. examined system increasing values task arrival rates. simulate ctmc custom discrete event simulator. implement backpressure policy consists pure types frequently seen mixed types upon arrival described above mixed types result attempt expert exactly once. note pure types attempted multiple times without changing type. thus choice result compromise performance complexity. choosing larger increase stability region small fraction signiﬁcantly increase complexity backpressure policy. performance comparison different policies examined evolution number tasks system waiting served time greedy backpressure policy respective task arrival rates respective task arrival rates even stability backpressure outperform greedy. further greedy unstable backpressure stable even evaluated time-averaged number tasks system different task arrival rates three policies consideration. little’s time-averaged number tasks good proxy expected sojourn time typical task. results shown figure observe task arrival rates random greedy backpressure become unstable respectively. thus backpressure policy achieves throughput improvement greedy policy. greedy perform better backpressure lower arrival rates backpressure signiﬁcantly outperforms greedy higher arrival rates. bayesian active learning aims learning true hypothesis adaptively selecting sequence experiments. labels obtained batch items time. stream based budgeted setting considered ﬁnite number items arrive random order. contrast allow inﬁnite stream tasks interested maximizing task resolution throughput capacity constraints servers. crowdsourcing works consider task assignment problems classiﬁcation unknown ground truths however consider static model. labeling tasks arrive dynamically exit tied expert allocation decisions task leaves another related literature constrained queueing systems arriving tasks served heterogeneous servers subject resource constraints e.g. goal efﬁciently utilize server resources providing good performance servicing tasks e.g. optimizing task delays. matching policy ﬂavor similar stability-optimal backpressure policy ﬁrst proposed setting close studied routing queries peer-to-peer networks. here types queries known locations nodes queries successfully resolved uncertain. technically associate queues prior distribution inﬁnite number. makes stability analysis much challenging. another related work scheduling ﬂexible servers allows tasks different types servers different skills. established called max-weight policy optimal heavy trafﬁc regime. main difference work works assume task types known. authors considered task-expert system task types difﬁculty levels expert skills levels seniors serve task juniors serve easy tasks. hardness task unknown upon arrival. comparison allow much generality respect heterogeneity skills experts. model task upon service become progressively harder amounts feed-forward system unlike model. work considers model types known expert types unknown. consider problem matching simultaneously learning expert types. idea shadow price simultaneously accounts resource utilization type uncertainties. consider asymptotic regime expert allowed work large number tasks vanishingly work also broadly related multi-arm bandits e.g. citations therein sense optimizing trade-off exploration learn types exploitation optimize task performance. also relation collaborative ﬁltering systems studied interpreted expert-task systems success probabilities admit lowrank matrix structure. unlike work good matches inferred observed assignments tasks experts according given statistical model resources constraints imposed experts. related line work stochastic online matching e.g. stochastic online matching interpreted task-expert system expert associated budget constraint allows solve task. unlike work task types uncertain uncertainty models come arbitrariness small amount could used accurately learn expert types rest served optimally. limit learning aspect decoupled form expert utilization thus different work. studied matching tasks experts system uncertain task types. established complete characterization stability region system i.e. task arrival rates supported matching policy expected number tasks waiting served ﬁnite. showed task arrival rate stability region supported back-pressure matching policy. also compared baseline matching polices identiﬁed instances substantial maximum task arrival rates supported policies optimum back-pressure matching policy. tassiulas ephremides stability properties constrained queueing systems scheduling policies maximum throughput multihop radio networks ieee transactions automatic control vol. srikant stolyar novel architecture reduction delay queueing structure complexity back-pressure algorithm ieee/acm transactions networking vol. proof part ﬁrst show system stable. time ﬁrst event occurs time i.e. given time expected time ﬁrst event occurs time example common approach show system stability lyapunov-foster theorem e.g. proposition page idea construct function called lyapunov function tends inﬁnity strictly negative ‘drift’ ﬁnite values i.e. exists constant ﬁnite values intuitively negative drift condition implies becomes large becomes large) system dynamics tends decrease expectation. prevents blowing increases thus keeps system stable. roughly lyapunov-foster theorem states negative drift condition indeed sufﬁcient ensure system positive recurrent thus stable. variant lyapunov-foster theorem provided below follows theorem above. exists function constants thus drift non-negative ﬁnite values further since bounded below since maximum change upon arrival departure bounded using proposition page establish part. note system random policy equivalent pure-type task revealed upon arrival i.e. uncertainty task types. true since random policy information type thus pure-type task revealed upon arrival. number tasks system pure-type {xc}c. arrival rate queue equal ﬂuid limit approach developed roughly given initial condition ﬂuid trajectories state process obtained scaling initial conditions speeding time studying rescaled process; i.e. letting limk→∞ studying limk→∞ following almost times negative strictly bounded away zero. seen follows. firstly terms non-positive. therefore sufﬁces show exists always exists follows exists thus also yc/γc consequently log. kullback-leibler divergence bernoulli distributions parameters i.e. log. write thus drift non-negative ﬁnite number states. further since bounded below maximum change upon arrival departure also bounded using proposition page part. proof theorem theorem ﬁrst show stability sufﬁcient conditions provided statement theorem process prove theorem networked systems e.g. standard approach towards proving stability backpressure type policy design ‘static’ policy using variables {νsz}sz slacks {δs}s provides ﬁxed service rate queue drift sufﬁciently negative each. however setup total number queues {nz}z∈z could countable total available slack ﬁnite. thus possible design static policy drift individual queue bounded negative constant. unlike ﬁnite-server queueing system considered previous literature. thus take different approach explained roughly follows. since total exogenous arrival rate total endogenous arrival rate i.e. arrival queue failure another queue ﬁnite measurable. turn ctmc. tasks mixed-type mixed-type z\\y. also convenience tasks mixed-type i.e. z\\y. formally deﬁne -measurable backpressure policy. thus show stability system policy backpressure given deﬁnition assume ties selecting broken uniformly random simplicity exposition. proof easily extend breaking approach. consider following lyapunov function. thus exist positive constants |˜n|∞ then using version lyapunav-foster theorem namely theorem that state |˜n| expected time return i.e. ﬁnite. further interval time size probability arrival happens interval task leaves system ﬁnite. suppose system state time consider renewal times deﬁned follows equal indeed arrival happens task leaves system interval else ﬁrst time return ti−. clearly since deﬁned ﬁnite. probability task leaves system time ﬁnite thus time system emptying ﬁrst reaching upper-bounded geometric random variables rate thus expected time return state ﬁnite. hence system stable. suppose sufﬁcient conditions given theorem satisﬁed. then proof theorem showed existence policy system ergodic. fact since strict slack capacity constraint server using proof theorem design policy system achieves stability even server mins policy capacities modiﬁed represent long-term fraction times server attempts task attempted times past. then following hold. inequalities strengthened achieve positive slack server’s capacity mentioned sufﬁcient purposes. using existence solves show that backpressure lyapunov function sense threshold imply ﬁnally remains prove foster-lyapunov stability criterion holds proposed backpressure policy. assume rszi jobs type exceed servers’ capacities showed. arbitrary policy denote service rate devotes denote overall arrival rate jobs type whether external arrivals unsuccessful treatments. drift candidate lyapunov function since backpressure policy introduced minimizes summation among feasible policies guarantees drift therefore rely foster’s criterion deduce µs)/} bounded expectation. done constant since interval time size probability arrival happens suppose system state time consider renewal times deﬁned follows equal indeed arrival happens task leaves system interval else ﬁrst time return ti−. clearly since deﬁned ﬁnite. probability task leaves system time ﬁnite thus time system emptying ﬁrst reaching upper-bounded geometric random variables rate thus expected time return state ﬁnite. hence system stable.", "year": 2017}