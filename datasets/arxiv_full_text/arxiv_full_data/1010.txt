{"title": "Turing learning: a metric-free approach to inferring behavior and its  application to swarms", "tag": ["stat.ML", "cs.LG", "cs.NE", "I.2.4; I.2.6; I.2.9; I.2.11; I.5.1"], "abstract": "We propose Turing Learning, a novel system identification method for inferring the behavior of natural or artificial systems. Turing Learning simultaneously optimizes two populations of computer programs, one representing models of the behavior of the system under investigation, and the other representing classifiers. By observing the behavior of the system as well as the behaviors produced by the models, two sets of data samples are obtained. The classifiers are rewarded for discriminating between these two sets, that is, for correctly categorizing data samples as either genuine or counterfeit. Conversely, the models are rewarded for 'tricking' the classifiers into categorizing their data samples as genuine. Unlike other methods for system identification, Turing Learning does not require predefined metrics to quantify the difference between the system and its models. We present two case studies with swarms of simulated robots and prove that the underlying behaviors cannot be inferred by a metric-based system identification method. By contrast, Turing Learning infers the behaviors with high accuracy. It also produces a useful by-product - the classifiers - that can be used to detect abnormal behavior in the swarm. Moreover, we show that Turing Learning also successfully infers the behavior of physical robot swarms. The results show that collective behaviors can be directly inferred from motion trajectories of individuals in the swarm, which may have significant implications for the study of animal collectives. Furthermore, Turing Learning could prove useful whenever a behavior is not easily characterizable using metrics, making it suitable for a wide range of applications.", "text": "propose turing learning novel system identiﬁcation method inferring behavior natural artiﬁcial systems. turing learning simultaneously optimizes populations computer programs representing models behavior system investigation representing classiﬁers. observing behavior system well behaviors produced models sets data samples obtained. classiﬁers rewarded discriminating between sets correctly categorizing data samples either genuine counterfeit. conversely models rewarded ‘tricking’ classiﬁers categorizing data samples genuine. unlike methods system identiﬁcation turing learning require predeﬁned metrics quantify diﬀerence system models. present case studies swarms simulated robots prove underlying behaviors cannot inferred metric-based system identiﬁcation method. contrast turing learning infers behaviors high accuracy. also produces useful byproduct—the classiﬁers—that used detect abnormal behavior swarm. moreover show turing learning also successfully infers behavior physical robot swarms. results show collective behaviors directly inferred motion trajectories individuals swarm signiﬁcant implications study animal collectives. furthermore turing learning could prove useful whenever behavior easily characterizable using metrics making suitable wide range applications. system identiﬁcation process modeling natural artiﬁcial systems observed data. drawn large interest among researchers decades limitation current system identiﬁcation methods rely predeﬁned metrics square errors measure diﬀerence output models system investigation. model optimization proceeds minimizing measured diﬀerences. however complex systems deﬁning metric non-trivial case-dependent. require prior information systems. moreover unsuitable metric distinguish well good models even bias identiﬁcation process. paper overcomes problems introducing system identiﬁcation method rely predeﬁned metrics. promising application metric-free method identiﬁcation collective behaviors emergent behaviors arise interactions numerous simple individuals inferring collective behaviors particularly challenging individuals interact environment also other. typically motion appears stochastic hard predict instance given swarm simulated would evaluate close behavior real swarm close individual behavior simulated real ﬁsh. characterizing behavior level swarm diﬃcult metric require domain-speciﬁc knowledge; moreover able discriminate among distinct individual behaviors lead similar collective dynamics characterizing behavior level individuals also diﬃcult even individual swarm likely exhibit diﬀerent trajectory every time looked paper propose turing learning novel system identiﬁcation method allows machine autonomously infer behavior natural artiﬁcial system. turing learning simultaneously optimizes populations computer programs representing models behavior representing classiﬁers. purpose models imitate behavior system investigation. purpose classiﬁers discriminate behaviors produced system models. turing learning behaviors observed period time. generates sets data samples. ﬁrst consists genuine data samples originate system. second consists counterfeit data samples originate models. classiﬁers rewarded discriminating samples sets ideally recognize data sample system genuine data sample models turing learning rely predeﬁned metrics measuring close models reproduce behavior system investigation; rather metrics produced by-product identiﬁcation process. method inspired turing test machines pass behaving indistinguishably humans. similarly models could pass tests classiﬁers behaving indistinguishably system investigation. hence call method turing learning. following examine ability turing learning infer behavioral rules swarm mobile agents. agents either simulated physical robots. execute known behavioral rules. allows compare inferred models ground truth. obtain data samples record motion trajectories agents. addition record motion trajectories agent replica mixed group agents. replica executes rules deﬁned models—one time. shown observing motion trajectories agents agent replica turing learning automatically infers behavioral rules agents. behavioral rules examined relate canonical problems swarm robotics self-organized aggregation object clustering reactive; words agent maps inputs directly onto outputs problem inferring mapping challenging inputs known. instead turing learning infer mapping indirectly observed motion trajectories agents replica. paper organized follows. section discusses related work. section describes turing learning general methodology case studies. section investigates ability turing learning infer behaviors swarms simulated robots. also presents mathematical analysis proving behaviors cannot inferred metric-based system identiﬁcation method. section presents real-world validation turing learning swarm physical robots. section concludes paper. section organized follows. first outline previous work turing learning review similar line research appeared since publication. turing learning implementation uses coevolutionary algorithms overview work using coevolutionary algorithms well work evolution physical systems. finally works using replicas ethological studies presented. turing learning system identiﬁcation method simultaneously optimizes population models population classiﬁers. objective models indistinguishable system investigation. objective classiﬁers distinguish models system. idea turing learning ﬁrst proposed work presented coevolutionary approach inferring behavioral rules single agent. agent moved simulated one-dimensional environment. classiﬁers rewarded distinguishing models agent. addition able control stimulus inﬂuenced behavior agent. allowed classiﬁers interact agent learning process. turing learning subsequently investigated swarms simulated robots independently invented essentially based idea turing learning. authors used gans train models generating counterfeit images resemble real images example toronto face database simultaneously optimized generative model discriminative model estimates probability image real. optimization done using stochastic gradient descent method. work reported humans asked discriminate collective motion real simulated ﬁsh. authors reported humans could even though data model consistent real data according predeﬁned metrics. results highlight limitation ﬁtting detailed models real-world data. argued observational tests could used cross-validate models line turing learning. method however automatically generates models classiﬁers thus require human observers. turing learning principle used optimization algorithm implementation relies coevolutionary algorithms. metric-based coevolutionary algorithms already proven eﬀective system identiﬁcation range work performed simulated agents. bongard lipson proposed estimationexploration algorithm nonlinear system identiﬁcation method coevolve inputs models minimizes number inputs tested system. generation input simulation highest disagreement models’ predicted outputs carried real system. models’ predictions compared actual output system. method applied evolve morphological parameters simulated quadrupedal robot undergone physical damage. later work authors reported many cases simulated robot would exhibit wildly diﬀerent behaviors even closely approximated damaged ‘physical’ robot. result surprising fact robot highly coupled non-linear system thus similar initial conditions expected rapidly diverge behavior time. authors addressed problem using reﬁned comparison metric reported algorithm also coevolves models inputs presented model simulated quadrotor improve control quality. tests selected based multiple criteria provide disagreement models evaluate control quality given task. models reﬁned comparing predicted trajectories real system. works predeﬁned metrics critical evaluating performance models. moreover algorithms applicable scenarios consider here system’s inputs assumed unknown studies also investigated implementation evolution directly physical environments either single robot multiple robots four-legged robot built study infer morphology process continuous self-modeling. robot coevolutionary algorithm onboard processor. population evolved models robot’s morphology evolved actions conducted robot gauging quality models. note approach required knowledge robot’s inputs o’dowd presented distributed approach coevolve onboard simulators controllers swarm robots. robot used simulators evolve controllers performing foraging behavior. best performing controller used control physical robot. foraging performances robot neighbors compared inform evolution simulators. physical/embodied evolution helped reduce reality simulated physical environments robots created systematically controlled accepted conspeciﬁcs heterospeciﬁcs animals group example replica resembled sticklebacks appearance created investigate types interaction recruitment leadership. autonomous robots executed model mixed group cockroaches modulate decision-making selecting shelter. robots behaved similar cockroaches. although robots’ appearance diﬀerent cockroaches robots released speciﬁc odor cockroaches would perceive conspeciﬁcs. works models manually derived robots used model validation. believe robot-animal interaction framework could enhanced turing learning autonomously infers collective behavior. turing learning system identiﬁcation method inferring behavior natural artiﬁcial systems. turing learning needs data samples behavior—we refer data samples genuine. example behavior interest shoal like genuine data samples could trajectory data ﬁsh. behavior produce paintings particular style genuine data samples could existing paintings style. turing learning simultaneously optimizes populations computer programs representing models behavior representing classiﬁers. purpose models imitate behavior system investigation. models used produce data samples—we refer data samples counterfeit. thus sets data samples containing genuine data samples containing counterfeit ones. purpose classiﬁers discriminate sets. given data sample classiﬁers need judge comes from. genuine thus originating system investigation? counterfeit thus originating model? setup akin turing test; hence name turing learning. classiﬁers rewarded correctly categorizing data samples either genuine counterfeit. turing learning thus optimizes models producing behaviors seemingly genuine words indistinguishable behavior interest. contrast system identiﬁcation methods optimize models producing behavior similar possible behavior interest. turing test inspired setup allows model generation irrespective whether suitable similarity metrics known. model computer program used produce data samples. must however expressive enough produce data samples that— observer’s perspective—are indistinguishable system. classiﬁer computer program takes sequence data input produces binary output. classiﬁer must suﬃcient information behavior system. access subset behavioral information system characteristic inﬂuencing subset cannot learned. principle classiﬁers non-binary outputs could also considered. algorithm provides description turing learning. assume population models population classiﬁers. initialization stage turing learning proceeds iterative manner termination criterion met. iteration cycle data samples obtained observations system models. case studies considered here classiﬁers inﬂuence sampling process. therefore data samples provided classiﬁers iteration cycle. simplicity assume model’s quality determined ability misleading classiﬁers judge data samples genuine. classiﬁer wrongly classiﬁed data sample model otherwise. quality model given following examine ability turing learning infer behavioral rules swarming agents. swarm assumed homogeneous; comprises identical agents known capabilities. identiﬁcation task thus reduces inferring behavior single agent. agents robots either simulated physical. agents inputs outputs input output values known. however agents observed data samples generated classiﬁer. particular classiﬁers could change stimuli inﬂuence behavior system investigation. would enable classiﬁer interact system choosing conditions behavior observed classiﬁer could extract hidden information system revealed passive observation alone motion trajectories recorded. trajectories provided turing learning using reactive control architecture evidence indicates reactive behavioral rules suﬃcient produce range complex collective behaviors groups natural artiﬁcial agents note although reactive architectures conceptually simple learning parameters trivial agent’s inputs available case problem setup. fact shown section conventional system identiﬁcation method fails respect. environment free obstacles. objective agents aggregate single compact cluster fast possible. details including validation physical e-puck robots reported aggregation controller found performing grid search space possible controllers controller exhibiting highest performance rather counterintuitively agent never moves forward regardless controller agent provably aggregates another agent quasistatic cluster agents fig. shows snapshots simulation trial agents. object clustering behavior sensor ternary gives reading agent line sight object line sight otherwise. objective agents arrange objects single compact cluster fast possible. details behavior including validation using physical e-puck robots cylindrical objects presented agent moves forward along counterclockwise circular trajectory diﬀerent linear angular speeds. moves forward along clockwise circular trajectory. fig. shows snapshots simulation trial agents objects. replicas execute behavioral rules deﬁned model. adopt model representations gray black box. cases note classiﬁers determine quality models knowledge agent/model representation agent/model inputs. sumed known. words model agent share control system structure deﬁned representation reduces complexity identiﬁcation process sense parameters need inferred. additionally allows objective evaluation well identiﬁcation process performs compare inferred parameters directly ground truth. replicas mixed group agents separated them. default consider situation multiple replicas mixed group agents. case studying groups agents groups replicas isolation investigated section classiﬁers need discriminate data samples originating agents ones originating replicas. term individual refer either agent replica executing model. data sample comes motion trajectory individual observed duration trial. assume possible track individual’s position orientation. sample comprises linear speed angular speed full details provided sections cases simulation physical experiments respectively. classiﬁer represented elman neural network network inputs hidden neurons output neuron. neuron hidden output layers bias. network thus total parameters assume values activation function used hidden output neurons logistic sigmoid function range deﬁned data sample consists time series sequentially classiﬁer neural network. ﬁnal value output neuron used make judgment model value less agent otherwise. network’s memory reset judgment. optimization models classiﬁers realized using evolutionary algorithm. evolution strategy self-adaptive mutation strengths optimize either population. consequence optimization consists processes model population another classiﬁer population. processes synchronize whenever solution qualities described section computed. implementation evolutionary algorithm detailed remainder paper adopt terminology used evolutionary computing refer quality solutions ﬁtness iteration cycles generations. note coevolutionary algorithms population’s ﬁtness depends performance populations hence referred subjective ﬁtness. contrast ﬁtness measure used conventional evolutionary algorithms referred objective ﬁtness. respectively analyze inferred models classiﬁers. section compares turing learning metric-based identiﬁcation method mathematically analyzes latter method. section presents results testing generality turing learning exploring diﬀerent scenarios include simultaneously inferring control agent aspect morphology; using artiﬁcial neural networks model representation thereby removing assumption known agent control system structure; separating replicas agents thereby allowing potentially simpler experimental setup; inferring arbitrary reactive behaviors. open-source enki library models kinematics dynamics rigid objects handles collisions. enki built-in model e-puck. robot represented disk diameter mass inter-wheel distance speed wheel independently. enki induces noise wheel speed multiplying value number range chosen randomly uniform distribution. maximum speed e-puck cm/s forwards backwards. line-of-sight sensor simulated casting e-puck’s front checking ﬁrst item intersects range sensor unlimited simulation. simulations unbounded environment. aggregation case study groups individuals— agents replica executes model. initial positions individuals generated randomly square region sides following uniform distribution object clustering case study groups individuals— agents replica executes model—and cylindrical objects. initial positions individuals objects generated randomly square region sides following uniform distribution case studies individual starting orientations chosen randomly uniform distribution. performed runs turing learning case study. lasted generations. model classiﬁer populations consisted solutions trial classiﬁers observed individuals intervals setups total number figure model parameters turing learning inferred swarms simulated agents performing aggregation object clustering. corresponds models highest subjective ﬁtness generation runs. dashed black lines correspond values parameters system expected learn fig. shows plot parameters inferred models highest subjective ﬁtness value ﬁnal generation. seen turing learning identiﬁes parameters behaviors good accuracy aggregation object clustering case studies. curves represent median parameter values models highest subjective ﬁtness across runs turing learning. dashed black lines indicate ground truth. ations closely approximate true values takes generations converge. likely reason eﬀect agent spends larger proportion time seeing nothing seeing agents —simulations revealed percentages respectively object clustering case study parameters corresponding learned faster parameters corresponding generations start converge; however takes generations approximate true values. note agent spends highest proportion time seeing nothing followed seeing objects seeing agents —simulations revealed proportions respectively although inferred models approximate agents well terms parameters uncommon swarm systems small changes individual behavior lead vastly diﬀerent emergent behaviors especially using large numbers agents reason evaluate quality emergent behaviors models give rise case figure dispersion simulated agents replicas executing inferred models aggregation case study. dispersion objects using swarm simulated agents replicas executing inferred models object clustering case study. boxes show distributions obtained trials. models generation. dashed black lines indicate minimum dispersion individuals/objects possibly achieve section details. aggregation measure dispersion swarm elapsed time deﬁned models highest subjective ﬁtness ﬁnal generation performed trials replicas executing model. comparison also performed trials using agent initial conﬁgurations replicas agents. fig. shows dispersion agents replicas models aggregation. performed statistical test ﬁnal dispersion individuals agents replicas model. statistically signiﬁcant diﬀerence cases case object clustering dispersion objects measure emergent behavior. performed trials individuals objects agent model. results shown fig. ﬁnal dispersion objects agent models statistically signiﬁcant diﬀerence cases primary outcome turing learning method model discussed previous section. however generated classiﬁers also considered useful by-product. instance could used detect abnormal agents swarm. analyze performance classiﬁers. remainder paper consider aggregation case study. assess performance classiﬁers measure percentage correct judgments agents wide range models. models uniformly distributed four-dimensional parameter space agents {−.−. discretized space grid consisting points model executed replica mixed group agents motion data classiﬁer makes judgments individual. classiﬁer consistently judges individual model trials outputs model decision. otherwise outputs agent. conservative approach used minimize risk false-positive detection abnormal behavior. classiﬁer’s performance computed combining percentage correct judgments models percentage correct judgments agents analogous solution quality deﬁnition classiﬁers. fig. shows average decision accuracy classiﬁer highest subjective ﬁtness evolution runs turing learning. accuracy classiﬁer increases ﬁrst generations drops ﬂuctuates within range %–%. comparison also plot highest decision accuracy single classiﬁer achieved post-evaluation generation. classiﬁer referred best classiﬁer interestingly accuracy best classiﬁer increases almost monotonically reaching level select best classiﬁer classiﬁers post-evaluated using aforementioned models. ﬁrst sight seems counterintuitive best classiﬁer decision accuracy. phenomenon however explained considering model population. shown previous section models converge rapidly beginning coevolutions. result classiﬁers evaluated later generations trials likely include models similar other. classiﬁers become overspecialized small models higher chance selected evolutionary process. classiﬁers however performance evaluated across entire model space. note analysis exclude potential existence models performance classiﬁers degenerates substantially. reported well-trained classiﬁers case represented deep neural networks easily fooled. instance classiﬁers label random-looking image guitar high conﬁdence. however degenerate case image obtained evolutionary learning classiﬁers remained static. contrast turing learning classiﬁers coevolving models hence opportunity adapt situation. order compare turing learning metric-based method employ commonly used least-square approach. objective minimize diﬀerences observed outputs agents models respectively. outputs considered—an individual’s linear angular speed. outputs considered whole duration trial. formally figure model parameters metric-based evolutionary method inferred swarms simulated agents performing aggregation object clustering. corresponds models highest ﬁtness generation runs. dashed black lines correspond values parameters system expected learn theorem consider binary random variables variable takes value probability value otherwise. variable takes value probability value otherwise. variables assumed independent other. assuming given corollary consider discrete random variables values respectively variable takes value probability variable takes value probability variables unique. corollary consider sequence pairs binary random variables variable takes value probability value otherwise. variable takes value probability value otherwise. variables assumed independent global minimum implications scenario metric-based approach considered paper unable infer correct behavior agent. particular model globally optimal w.r.t. expected value error function deﬁned diﬀerent agent. observation follows corollary aggregation case study corollary object clustering case study exploits fact error function structure metric corollary square error terms. summation time concern—as shown corollary distributions sensor reading values agent model need stationary. however need assume control cycle actual inputs agents models correlated other. note comprises square error terms linear speed agent angular speed. simulated agents employ diﬀerential drive unconstrained motor speeds linear angular speeds decoupled. words linear angular speeds chosen independently other optimized separately. means thought separate error functions pertaining linear speeds angular speeds. verify whether theoretical result holds practice used evolutionary algorithm single population models. algorithm identical model optimization sub-algorithm turing learning except ﬁtness calculation metric employed. performed evolutionary runs case study. evolutionary lasted generations. simulation setup number ﬁtness evaluations models kept turing learning. fig. shows parameter distribution evolved models highest ﬁtness last generation runs. distributions evolved parameters corresponding similar. phenomenon explained follows. identiﬁcation problem consider method knowledge input whether agent perceives another agent consistent turing learning classiﬁers used optimize models also knowledge inputs. metric-based algorithm seems construct controllers respond diﬀerently either input work good gets average particular distribution inputs left wheel speed parameters approximately almost identical weighted mean takes account parameter observed around time whereas parameter observed around time parameters related evolved well agent’s model agents observed simulation trials probabilities seeing nearly constant throughout trial. hence scenario approximates well conditions theorem eﬀects non-stationary probabilities optimal point minimal. similar results found inferring object clustering behavior comparing figs. turing learning outperforms metric-based evolutionary algorithm terms model accuracy case studies. argued before unpredictable interactions swarms traditional metric-based method suited inferring behaviors. following present four orthogonal studies testing generality turing learning. experimental setup section identical described previously except modiﬁcations discussed within section. models parameters. before turing learning unbounded search space however necessarily bounded model executed replica parameter corresponding mapped range using appropriately scaled logistic sigmoid function. controller parameters directly passed replica. setup classiﬁers observe individuals trial figure turing learning simultaneously inferring control morphological parameters agents’ ﬁeld view rad. boxes show distributions models highest subjective ﬁtness generation runs. dashed black lines indicate ground truth. fig. shows parameters subjectively best models last generations runs. means model parameter follows parameters including still learned high accuracy. case true value edge case given arbitrarily small logistic sigmoid function maps unbounded domain values onto makes simpler turing learning infer parameter. reason also consider another scenario agents’ angle view rather rad. controller parameters achieving aggregation case diﬀerent found rerunning grid search modiﬁed sensor. fig. shows results runs setup. means parameter follows controller parameters still learned good accuracy. accuracy angle view noticeably lower still reasonable. previous sections assumed agent’s control system structure known inferred parameters. investigate generality turing learning represent model general form namely elman neural network network inputs outputs identical used reactive models. words figure turing learning infer agent’s behavior without assuming control system structure known. plots show steady-state outputs inferred neural networks highest subjective ﬁtness generation simulation runs. outliers shown. elman network input outputs representing left right wheel speed robot. bias connected input hidden layers network respectively. consider three network structures three hidden neurons correspond respectively weights optimized. except diﬀerent number parameters optimized experimental setup equivalent aspects section ﬁrst analyze steady-state behavior inferred network models. obtain steady-state outputs constant input time steps. fig. shows outputs ﬁnal time step inferred models highest subjective ﬁtness last generation runs three cases. cases parameters swarming agent inferred correctly reasonable accuracy. hidden neurons lead worse results probably larger search space. figure model parameters inferred variant turing learning observes swarms aggregating agents swarms replicas isolation thereby avoiding potential bias. corresponds models highest subjective ﬁtness generation simulation runs. denotes output neural network time step corresponding parameter inferred networks react inputs rapidly maintain steady-state output results show turing learning infer behavior without assuming agent’s control system structure known. case studies replica mixed group agents. context animal behavior studies robot replica introduced group animals recognized conspeciﬁc however behaving abnormally replica disrupt behavior swarm reason insertion replica exhibits diﬀerent behavior recognized conspeciﬁc disrupt behavior swarm hence models obtained biased. case alternative method would isolate inﬂuence replica. performed additional simulation study agents replicas never mixed. instead trial focused either group agents replicas. replicas trial executed model. group size identical cases. tracking data agents replicas sample classiﬁers making judgments. figure turing learning inferring models randomly generated agent behaviors. behavior turing learning performed model highest subjective ﬁtness generations considered. histogram models’ points larger shown); model parameter. results show turing learning still identify model parameters well. signiﬁcant diﬀerence either approach case studies considered paper. method separating replicas agents recommended potential biases suspected. aggregation controller agents used case study originally synthesized searching parameter space deﬁned using metric assess swarm’s global performance points produces global behavior. behaviors particularly interesting circle formation behavior reported investigate whether turing learning infer arbitrary controllers space irrespective global behaviors lead generated controllers randomly parameter space deﬁned uniform distribution. controller performed selected subjectively best model last generation. fig. shows histogram inferred models. distribution single mode close zero decays rapidly increasing values. cases error suggests accuracy turing learning highly sensitive particular behavior investigation fig. figure illustration general setup inferring behavior physical agents—e-puck robots computer runs turing learning algorithm produces models classiﬁers. models uploaded executed replica. classiﬁers computer. provided agents’ replica’s motion data extracted video stream overhead camera. shows model parameter. means parameter follows performed statistical test model parameters corresponding vr). inferred signiﬁcantly lower likely reason reported section agent likely spend time seeing nothing seeing agents trial. section present real-world validation turing learning. explain used infer behavior swarm real agents. agents replicas represented physical robots. type robot simulation. agents execute aggregation behavior described section replicas execute candidate models. replicas speed identiﬁcation process explained section providing models executed exert control agents. overhead camera supplies video stream swarm. performs video processing obtain motion data individual robots. describe physical platform detail. schematic view e-puck shown fig. implement line-of-sight sensor using e-puck’s directional camera located front. purpose wrap robots black ‘skirts’ make distinguishable light-colored arena. principle sensor could implemented using pixel column pixels subsampled image compensate misalignment camera’s vertical orientation. gray values pixels used distinguish robots arena details sensor realization also e-puck’s infrared sensors cases. firstly trial robots disperse within arena. case infrared sensors avoid robots walls making dispersion process eﬃcient. secondly observe using line-of-sight sensor lead robots becoming stuck walls arena hindering identiﬁcation process. therefore infrared sensors wall avoidance facilitate motion data extraction robots markers tops consisting colored isosceles triangle circular white background triangle’s color allows distinction robots; blue triangles agents orange purple triangles replicas. triangle’s shape eases extraction robots’ orientations. robots’ motion captured using camera mounted around arena ﬂoor. camera’s frame rate fps. video stream performs video processing extract motion data individual robots video processing software written using opencv objective infer agent’s aggregation behavior. wish infer agent’s dispersion behavior periodically executed distribute already-aggregated agents. separate behaviors robots system implicitly synchronized. realized making robot execute ﬁxed behavioral loop constant duration. also executes ﬁxed behavioral loop timing determined signals received replicas. therefore synchronized swarm. communicates replicas bluetooth. start human intervention robots initially synchronized using infrared signal remote control. figure flow diagram programs replica physical experiments. dashed arrows represent communication units. section details. exert control agents. update turing learning algorithm. uses motion data trial observed update solution quality corresponding models classiﬁers. models current iteration cycle evaluated also generates model classiﬁer populations. method calculating qualities solutions optimization algorithm described sections respectively. goes back send stop signal. trial stops replica informs sending stop signal. replica waits proceeding robots remain synchronized. waiting states serves purpose. program running agents structure replica program. however states analogous simply wait rather communicate state corresponding also execute disperse behavior. state corresponding execute agent’s aggregation controller rather model. simulation population size classiﬁers however model population size reduced shorten experimentation time. robots representing agents executing original aggregation controller representing replicas execute models. means trial models population could simultaneously evaluated; consequently generation consists trials. turing learning algorithm implemented without modiﬁcation code used simulation still model parameters evolve unboundedly however speed physical robots naturally bounded apply hyperbolic tangent function model parameter figure model parameters turing learning inferred swarms physical robots performing aggregation. models highest subjective ﬁtness generation runs. dashed black lines indicate ground truth values parameters system expected learn. conducted runs turing learning using physical system. lasted generations corresponding hours video recordings runs found online supplementary materials ﬁrst investigate quality models obtained. select ‘best’ model post-evaluated models ﬁnal generation times using classiﬁers generation. parameters models shown fig. means parameter follows investigate eﬀects real-world conditions identiﬁcation process performed simulated runs turing learning setup physical runs. fig. shows evolutionary dynamics parameters inferred models physical simulated runs. dynamics show good correspondence. however convergence physical runs somewhat less smooth simulated ones generation every computed model. compared error model highest subjective ﬁtness average lowest errors. results shown fig. physical simulated runs subjectively best model error lowest figure evolutionary dynamics model parameters physical simulated runs turing learning curves represent median parameter values models highest subjective ﬁtness across runs. dashed black lines indicate ground truth. figure evolutionary dynamics candidate models physical simulated runs turing learning. curves represent median values across runs. curve represents average error models generation. green blue curves show respectively errors models highest subjective highest objective ﬁtness generation. argued swarm systems good agreement between local behaviors guarantee similar global behaviors. reason investigate original controller controller obtained physical runs. latter configure average aggregation dynamics physical trials physical e-puck robots executing original agent controller model controller inferred observation physical system. vertical axis shows proportion robots largest cluster; shows robots’ dispersion dashed lines respectively represent maximum proportion minimum dispersion robots achieve. initial conﬁgurations robots common controllers. necessary extract orientation robots circular marker attached robot position extracted higher accuracy oﬄine analysis controllers performed trials using physical e-pucks. trial lasted minutes. fig. shows proportion robots largest cluster time agent model controllers. fig. shows dispersion robots time controllers. aggregation dynamics agents models show good correspondence. fig. shows sequence snapshots trial e-pucks executing inferred model controller. video accompanying paper shows turing learning identiﬁcation process models simulation physical system. additionally videos post-evaluation trials e-pucks provided online supplementary materials figure example collective behavior produced model inferred turing learning observation swarms physical e-puck robots. swarm physical e-puck robots executing inferred model aggregates single spot. figure average decision accuracy best classiﬁers generations runs turing learning swarms physical robots. average data samples post-evaluation physical robots executing random models. error bars show standard deviations. text details. post-evaluating classiﬁers generated physical runs turing learning limited number candidate models order reduce physical experimentation time. candidate model chosen randomly uniform distribution parameter space deﬁned fig. shows average decision accuracy best classiﬁers runs. similar results simulation best classiﬁer still high decision accuracy. however contrast simulation decision accuracy best classiﬁer drop within generations. could noise present physical runs prevented classiﬁers getting over-specialized comparatively short time provided paper presented system identiﬁcation method—turing learning— autonomously infer behavior system observations. best knowledge turing learning ﬁrst system identiﬁcation method rely predeﬁned metric quantitatively gauge diﬀerence system inferred models. eliminates need choose suitable metric bias metric identiﬁcation process. competitive successive generation models classiﬁers system successfully learned behaviors self-organized aggregation object clustering swarms mobile agents. model parameters automatically inferred emergent global behaviors closely matched original swarm system. also examined conventional system identiﬁcation method used least-square error metric rather classiﬁers. proved metricbased method fundamentally ﬂawed case studies considered here. particular inputs agents models correlated model solution globally optimal respect metric identical agent solution. words according metric parameter agent scored worse diﬀerent—and hence incorrect—parameter set. simulation results good agreement theoretical ﬁndings. classiﬁers generated turing learning useful by-product. given data sample tell whether genuine words whether originates reference system. classiﬁers could used detecting abnormal behavior—for example faults occur members swarm—and obtained without need deﬁne priori constitutes abnormal behavior. paper presented main results using gray model representation; words model structure assumed known. consequently inferred model parameters could compared ground truth enabling objectively gauge quality identiﬁcation process. note even though search space models small identifying parameters challenging input values unknown swarm e-puck robots. behavior learned successfully results obtained physical experiments showed good correspondence obtained simulation. shows robustness method respect noise uncertainties typical real-world experiments. best knowledge also ﬁrst time system identiﬁcation method used infer behavior physical robots swarm. conducted simulation experiments test generality turing learning. first showed turing learning simultaneously infer agent’s brain well aspect agent’s morphology determines ﬁeld view. second showed turing learning infer behavior without assuming agent’s control system structure known. models represented ﬁxed-structure recurrent neural networks behavior could still successfully inferred. complex behaviors could adopt optimization algorithms neat gradually increases complexity neural networks evolved. third assessed alternative setup turing learning replica—the robot used test models—is environment swarm agents. requires swarm replicas advantage ensuring agents aﬀected replica’s presence. addition opens possibility replica physical agent rather residing simulated world lead less costly implementation. hand advantage using physical replica help address reality issue. replica shares physics agent evolved behavior rely physics. necessarily true simulated replica—for instance evolving simulated hard fully capture hydrodynamics real environment. ﬁnal experiment showed turing learning able infer wide range randomly generated reactive behaviors. future intend turing learning infer complex behaviors exhibited natural swarms shoals herds land mammals. interested reactive non-reactive behaviors. shown beneﬁcial classiﬁers restricted observing system passively. rather could inﬂuence process data samples obtained eﬀectively choosing conditions system observed. authors grateful support received jianing chen especially relation physical implementation turing learning. authors also thank anonymous referees helpful comments.", "year": 2016}