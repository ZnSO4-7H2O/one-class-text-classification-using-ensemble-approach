{"title": "Efficient Rank Aggregation via Lehmer Codes", "tag": ["cs.LG", "cs.AI"], "abstract": "We propose a novel rank aggregation method based on converting permutations into their corresponding Lehmer codes or other subdiagonal images. Lehmer codes, also known as inversion vectors, are vector representations of permutations in which each coordinate can take values not restricted by the values of other coordinates. This transformation allows for decoupling of the coordinates and for performing aggregation via simple scalar median or mode computations. We present simulation results illustrating the performance of this completely parallelizable approach and analytically prove that both the mode and median aggregation procedure recover the correct centroid aggregate with small sample complexity when the permutations are drawn according to the well-known Mallows models. The proposed Lehmer code approach may also be used on partial rankings, with similar performance guarantees.", "text": "propose novel rank aggregation method based converting permutations corresponding lehmer codes subdiagonal images. lehmer codes also known inversion vectors vector representations permutations coordinate take values restricted values coordinates. transformation allows decoupling coordinates performing aggregation simple scalar median mode computations. present simulation results illustrating performance completely parallelizable approach analytically prove mode median aggregation procedure recover correct centroid aggregate small sample complexity permutations drawn according well-known mallows models. proposed lehmer code approach also used partial rankings similar performance guarantees. rank aggregation family problems concerned fusing disparate ranking information arises application areas diverse social choice meta-search natural language processing bioinformatics information retrieval observed rankings either linear orders partial rankings. sometimes rankings assumed form pairwise comparisons note that many massive ordinal datasets arise ratings rather actual comparisons. rank aggregation rather averaging ratings justiﬁed fact raters diﬀerent rating scales. example rating three user indicate user liked item rating three another user indicate user disliked item. hence actual preferences deduced using ranked ratings. rank aggregation task hand ranking smallest cumulative distance given rankings. here cumulative distance equals distances element frequently used distance measure case permutations kendall distance. case partial rankings distance choice kemeny distance kendall distance permutations equals smallest number adjacent transpositions needed convert permutation other. kemeny distance contains additional weighted correction term accounts ties rankings. well known wide range distance functions learning underlying models aggregating rankings computationally hard nevertheless case distance measure kendall distance number approximation algorithms developed oﬀer various trade-oﬀs quality aggregation computational complexity techniques used aggregating permutations given include randomly choosing permutation pivoting random selections elements divide-and-conquer approaches markov chain methods akin pagerank minimum weight graph matching methods exploiting fact kendall distance well-approximated spearman footrule distance methods provable performance guarantees pick-a-perm fas-pivot give -approximation objective function although combinations thereof known improve constant also exists polynomial time approximation scheme aggregation problem shorter version appear artiﬁcial intelligence statistics †the authors coordinated science laboratory department electrical computer engineering uni‡the author department computer science university massachusetts. mathematics literature partial rankings commonly referred weak orders term partial order used describe orders subsets elements ground set. nevertheless term partial ranking denote orders ties terminology widely adopted machine learning community. paper propose approach problem rank aggregation uses combinatorial transform lehmer code gist approach convert permutations lehmer code representations coordinate takes values independently coordinates. aggregation lehmer code domain reduces computing median mode bounded numbers done linear time. furthermore eﬃcient conversion algorithms permutations lehmer codes also running linear time known making overall complexity parallel implementation scheme denotes number permutations aggregated denotes length permutations. illustrate performance lehmer code aggregators permutations carry simulation studies showing algorithms perform comparably best known methods approximate aggregation signiﬁcantly lower computational cost. proceed establish number theoretical performance guarantees algorithms particular consider mallows model kendall distance permutations kemeny distance partial rankings ties allowed. show centroid permutation model derivative thereof recovered samples corresponding distribution high probability. paper organized follows. section contains mathematical preliminaries deﬁnitions used throughout paper. section introduces aggregation methods types rankings section describes analysis pertaining mallows generalized mallows models. section contains illustrative simulation results comparing performance aggregators known aggregation methods simulated real ranking data. number technical results namely detailed proofs theorems lemmas found appendix. denote elements without loss generality assume equal ranking ordering subset elements according predeﬁned rule. refer order permutation ranking includes ties refer partial ranking partial rankings used complete rankings subsets element number diﬀerent ways unranked elements last position. rigorously permutation bijection permutations forms symmetric group order denoted denotes rank element ranked higher inverse permutation denoted clearly represents element ranked position deﬁne projection permutation subset elements denoted ordering elements example projection equals since seen equals rank element similar deﬁnitions partial rankings partial ranking also deﬁned mapping contrast permutations mapping bijection mapping partial ranking allows ties i.e. exist elements partial ranking often represented using buckets context referred bucket order bucket order elements partitioned number subsets buckets denote index bucket containing element element assigned bucket elements bucket tied also deﬁne projection partial ranking subset elements denoted given partial ranking |bj| denote corresponding buckets. addition deﬁne |bj| based previous discussion |bσ| number elements bucket containing referring bucket certain element whenever confusion arises. note arbitrarily break ties create permutation clearly permutation number distance functions permutations known social choice learning discrete mathematics literature distance function interest based transpositions transposition swap elements positions transposition referred adjacent transposition. well known transpositions generate i.e. permutation converted another permutation sequence transpositions smallest number adjacent transpositions needed convert permutation another permutation known kendall distance denoted alternatively kendall distance permutations equals number mutual inversions elements permutations kemeny distance includes component equal kendal distance linear chains partial rankings another scaled component characterizes distance tied pairs elements spearman footrule distance also deﬁned apply partial rankings equals absolute diﬀerences positions elements partial rankings. here position element partial ranking deﬁned well known lehmer code bijective encoding decoding algorithms linear complexity codes similar properties lehmer codes extensively studied name subdiagonal codes. overview codes relationship mahonian statistics permutations found propose next generalization lehmer codes partial rankings. recall x-th entry lehmer code permutation number elements index smaller ranked lower partial ranking addition another code takes account ties according assume aggregate rankings denoted aggregation performed distance-based kemeny-young model seeks ranking minimizes cumulative kendall distance formally deﬁned procedure kendall distance described algorithm note step algorithm executed parallel. parallelization used ﬁrst step requires time given lehmer codes computed time parallelization used instead time reduces similarly without parallelization second step requires time coordinate parallelization reduces time third step requires computations. hence overall complexity algorithm either depending parallelization used not. permutations aggregation procedure viewed specialized voting ranking casts vote rank position case elements considered however partial ranking involving ties vote account possible placements precisely suppose vote cast place element position denoted vk→x. then compute values algorithm requires time yields overall aggregation complexity parallelization used. complexity reduced parallel implementation. note evaluations functions performed simple iterative manner provided votes vk→x positive constants leading reduction overall complexity step parallelization used. relevant details regarding iterative procedure found appendix note output algorithm permutation. generate partial ranking minimizes kemeny distance consistent o-time algorithm outlined appendix alternatively following simple greedy method always produces practically good partial rankings complexity scan elements output permutation highest lowest rank decide bucket based choices oﬀers smaller kemeny distance respect subset {ˆσ− ˆσ−}. follows brieﬂy outline similarities diﬀerences method existing positional well insertionsort based aggregation methods. positional methods class aggregation algorithms seek output ranking position element close position element example positional method borda’s algorithm known produce -approximation kemeny-young problem permutations another method spearman footrule aggregation method seeks permutation minimizes spearman footrule distance output ranking already mentioned latter method produces -approximation kendall aggregate permutations partial ranking. also falls category positional methods positions scoring performed highly specialized lehmer code. although appears hard prove worst-case performance guarantees method statistical analysis particular ranking models shows recover correct results small sample complexity. also oﬀers signiﬁcant reductions computational time compared spearman footrule method reduces solving weighted bipartite matching problem hence complexity least implemented mapreduce insertion selected follows. assume elements inserted according identity order iteration element chosen inserted previously constructed ranking symbol inserted ranking arrive ranking available iteration inserted adjacent elements σst− σst− σst− σst− denote rank assigned element choice vary method method. authors proposed setting next describe method viewed insertionsort method special choice consider permutation method algorithm focus estimating t-th coordinate lehmer code inverse lehmer code insertion simultaneously. generated it’s corresponding inverse lehmer transform viewed operation placing element position words inverting incomplete ranking reduces setting essentially equals mode median positions rankings projected onto true partial rankings diﬀerence selection changed ties elements. provide next theoretical performance analysis algorithm assumption rankings generated according mallows generalized mallows model. mallows model parameters denotes centroid ranking determines variance ranking respect probability permutation proportional partial rankings assume samples generated generalized mallows model whose centroid allowed partial ranking distance kemeny rather kendall distance analysis based premise given suﬃciently large number samples expects ranking obtained good aggregation algorithm equal centroid high probability. alternative methods analytically test quality aggregation algorithm perform worst-case analysis method appears hard perform simulation-based analysis produces comparison objective function values kemeny-young problem given diﬀerent aggregation methods. report latter study section follow. idea behind proof view procedure insertionsort method probability event selected position incorrect respect small suﬃciently large based lemma follows show satisﬁes probable position element ranking corresponds rank centroid given enough samples estimate rank element centroid directly using mode rank element drawn samples. remark result seem counterintuitive since implies probability ranking element position diﬀerent position larger probability raking position easy-to-check example shows indeed case corresponds here lemma guarantee single iteration position element correct since ranking involves subset elements. therefore lemma generalized version subset-projected ranking required proof. turn attention partial rankings prove following extension previous result algorithm uses median coordinate values. note output algorithm essentially permutation although transformed partial ranking bucketing method described section proof theorem relies showing insertionsort procedure places elements correct position high probability. median used partial ranking aggregation vote uniformly distributed amongst possible positions range given ensure output permutation need guarantee median positions votes rσst] large enough rσst] represents bucket contains next evaluate performance algorithms experimental methods compare rank aggregation methods using synthetic real datasets. comparative analysis choose fas-pivot faslp-pivot methods insertionsort comparison optimal spearman footrule distance aggregator randomized algorithms fas-pivot faslp-pivot pivot iteration chosen randomly. insertionsort comparison insertion order elements also chosen randomly. furthermore three methods procedure executed times best solution selected. fas-pivot faslp-pivot chose better result pick-a-perm given method suggested context synthetic data present results mallows model number ranked items equals number rankings equals variance parameter chosen according allowed vary parameter setting independent simulations computed average cumulative kendall distance output ranking given normalized value algorithm faslp-pivot since faslp-pivot always oﬀered best performance. results note parameter values algorithms perform almost identically best aggregation method lp-based pivoting scheme. smaller values small performance diﬀerences observed; compensated signiﬁcantly smaller complexity methods parallel implementation mode linear note insertionsort comp method performs poorly although ensures local kemeny optimality. also conducted experiments number real-world datasets. test permutation aggregation algorithms used sushi ranking dataset jester dataset sushi dataset consists permutations involving types sushi. jester dataset contains scores continuous interval jokes submitted individuals. chose scores individuals rated jokes transformed rating permutations sorting scores. dataset tested algorithms randomly choosing many samples complete list computing average cumulative kendall distance normalized independent tests. results listed table table test partial ranking aggregation algorithms used complete jester dataset movielens dataset jester dataset ﬁrst rounded scores nearest integer placed jokes integer score bucket resulting partial ranking. also assumed unrated jokes placed bucket ranked lower bucket rated jokes. movielens dataset contains incomplete lists scores movies rated users. scores integers many ties present. chose rated movies users rated movies largest coverage. similarly jester dataset assumed unrated movies tied last position. test used iterative method described section transform permutations partial rankings. note computing kemeny distance partial rankings omitted penalty incurred ties unrated elements otherwise iterative method would yield many ties output partial ranking. precisely used following formula assess distance incomplete partial rankings results listed table table seen parallelizable low-complexity methods tend oﬀer similar performance signiﬁcantly computationally demanding pivoting algorithm. chris burges shaked erin renshaw lazier matt deeds nicole hamilton greg hullender learning rank using gradient descent proceedings international conference machine learning. chen paul bennett kevyn collins-thompson eric horvitz pairwise ranking aggregation crowdsourced setting proceedings sixth international conference search data mining. ronald fagin ravi kumar mohammad mahdian sivakumar erik comparing aggregating rankings ties proceedings twenty-third sigmod-sigact-sigart symposium principles database systems. coppersmith lisa fleischer atri rudra ordering weighted number wins gives good ranking weighted tournaments proceedings seventeenth annual acm-siam symposium discrete algorithm. society industrial applied mathematics toshihiro kamishima nantonac collaborative ﬁltering recommendation based order responses proceedings ninth sigkdd international conference knowledge discovery data mining. easy given elements ranked rank higher φσ−σ−p φj−σ note mapping neither bijection injection. denote mapping deﬁne then ∪σ′∈t forms partition next consider distinct rankings tσ′. rankings must rank element diﬀerently i.e. must therefore pφj− pφj−. result pφn− proves third claim. conclude observing condition equality achieved bound stated lemma exactly condition equality achieved bound stated third claim. suppose want prove statement left-hand-side statement equals ratio note removing ﬁxed number elements lowest rank centroid ranking change probability ranking involving remaining elements hence assume element highest rank ranking swap element element obtain another ranking moreover easy check ratio statement exceed note inequality instead equality since potentially exists elements ranked mapping basically performs circular swapping moving position rank higher adjacent moving element including higher position adjacent original one. based also form partition contains rankings mapped note denote remainder permutations preimage remainder ranking property elements ranked lower centroid ranking. since swapping operations establish bijection also partition consider bound step direct optimization cannot yield required upper bound increase right-hand-side hence addition also simultaneously consider larger yield smaller proof. recall deﬁnition fact ranking obtained hence elements ranked higher lower elements ranked higher lower based structure ranking perform swapping operation obtain another ranking tl′. swapping constitutes bijection. this consider elements highest rank swapping element selected elements ranked high yields ranking tl′. since element p)φℓ−ℓ. completes proof. proof. symmetry suﬃces prove ﬁrst claim only. left-hand-side ﬁrst inequality equals probability event element ranked t-th position lower within elements right-hand-side inequality equals probability event element ranked t-th position lower within elements since union another element inserting ranking increase rank already present elements. consider lemma main text. choose element element satisﬁes {x}. then statement result implies probability element ranked lower equal correct rank increase element ranked lower therefore removing elements ranked lower obtain subset consequently σa′′ note element lowest rank σa′′ therefore easy check σa′′ simplicity {x}. note choice rank element rσa′′ lσa′′ ranking removal produces another ranking σ′′. contribute vote left-hand-side contributes vote smaller vote always contribute smaller vote. ranking contribute zero vote. therefore removing strictly decreases left-hand-side prove inequality note deﬁnition rσa′ also lemma document assume i.e. element ﬁrst bucket deﬁnition includes rankings element ﬁrst bucket includes rankings addition elements ﬁrst bucket section explained algorithm based lehmer code viewed form insertionsort t-th iteration places element )-th position subset elements speciﬁc choice subset permutation hence event {ˆcσ equivalent event {σst denote convenience section main text explained lehmer code transform viewed form insertionsort t-th iteration places element position within subset elements choice subset hence event {ˆcσ equivalent event {σst lσst rσst denote proof reduces ﬁnding lower bound section main text discusses partial ranking aggregation pointed eﬃciently compute voting function hence mode/median well. algorithm vii. text explains eﬃciently compute provided ﬁxed vk→x positive continuous interval precisely algorithm vii. complexity computation mode/median component requires time. therefore total complexity algorithm main text partial rankings equals section main text pertaining partial ranking aggregation pointed optimally transform permutation output algorithm partial ranking. algorithm vii. text explains perform transform. description algorithm used vector used denote algorithm vii. complexity algorithm vii. transforms permutation partial ranking kemeny-distance optimal input permutation partial rankings initialize bucketsize= initialize {wij}ij∈ =dynamic-programming; construct partial ranking putting lowest bucketsize many elements", "year": 2017}