{"title": "Grounded Discovery of Coordinate Term Relationships between Software  Entities", "tag": ["cs.CL", "cs.AI", "cs.LG", "cs.SE"], "abstract": "We present an approach for the detection of coordinate-term relationships between entities from the software domain, that refer to Java classes. Usually, relations are found by examining corpus statistics associated with text entities. In some technical domains, however, we have access to additional information about the real-world objects named by the entities, suggesting that coupling information about the \"grounded\" entities with corpus statistics might lead to improved methods for relation discovery. To this end, we develop a similarity measure for Java classes using distributional information about how they are used in software, which we combine with corpus statistics on the distribution of contexts in which the classes appear in text. Using our approach, cross-validation accuracy on this dataset can be improved dramatically, from around 60% to 88%. Human labeling results show that our classifier has an F1 score of 86% over the top 1000 predicted pairs.", "text": "present approach detection coordinateterm relationships entities software domain refer java classes. usually relations found examining corpus statistics associated technical domains however text entities. access additional information real-world objects named entities suggesting coupling information grounded entities corpus statistics might lead improved methods relation discovery. develop similarity measure java classes using distributional information used software combine corpus statistics distribution contexts classes appear text. using approach cross-validation accuracy dataset improved dramatically around human labeling results show classiﬁer score predicted pairs. discovering semantic relations text entities task natural language understanding. critical component enables success knowledge representation systems textrunner reverb nell turn useful variety applications including temporal scoping semantic parsing entity linking work examine coordinate relations between words. according wordnet glossary deﬁned coordinate terms share common hypernym symmetric relation indicates semantic similarity meaning type thing since share least common ancestor hypernym taxonomy entities instance entities usually appear similar contexts likely semantically similar however technical domains access additional information realworld objects named entities e.g. might biographical data person entity structural encoding protein entity. situations seems plausible grounded method corpus statistics coupled data real-world referents might lead improved methods relation discovery. explore idea grounded relation discovery domain software. particular consider detection coordinate-term relationships between entities refer java classes. software domain text corpus derived website stackoverﬂow users answer questions software development extract posts labeled users java related. data collected small entity pairs labeled coordinate terms based high-precision hearst patterns frequency statistics attempt label pairs using information available higher-recall approaches based distributional similarity. describe entity linking method order given text entity underlying class type implementation java standard libraries. next describe corpus code based information relation discovery task. corpus based methods include distributional similarity string matching similarity. additionally sources code based information deﬁne classcontext java class given code repository therefore able calculate code-based distributional similarity measure classes consider hierarchical organization classes described java class type namespace hierarchies. demonstrate using approach cross-validation figure visualization predicted coordinate term pairs pair coordinate classes connected edge. highly connected components labeled edge color noted contain classes similar functionality. areas containing functional class group magniﬁed easier readability. work ﬁrst step towards building knowledge representation system software domain text entities refer elements software code base example classes methods applications programming languages. understanding software entity relations allow construction domain speciﬁc taxonomy knowledge base enable higher reasoning capabilities applications software domain improve variety code assisting applications including code refactoring token completion figure shows visualization based coordinate term pairs predicted using proposed method. java classes similar functionality highly connected graph indicating method used construct code taxonomy. semantic relation discovery. previous work semantic relation discovery particular coordinate term discovery used main approaches. ﬁrst based insight certain lexical patterns indicate semantic relationship high-precision initially observed hearst example conjuction pattern indicates coordinate terms. pattern-based classiﬁer mentation code repository named according estimated probability p|word s.t. maxc classes code referent similarly class given code-based grounding extract information using class implementations deﬁne code based distributional similarity measure using code-context encode usage pattern class hierarchical organization classes described type namespace hierarchies. finally combine information single classiﬁer. introduced meronyms synonyms general analogy relations second approach relies notion words appear similar context likely semantically similar. contrast pattern based classiﬁers context distributional similarity approaches normally higher recall. work attempt label samples extracted high-precision hearst patterns using information higher-recall methods. grounded language learning. grounded language learning methods learn mapping natural language observed world recent work includes grounding language physical world grounding entire discourses early work ﬁeld relied supervised aligned sentence-tomeaning data however later work supervision constraint gradually relaxed relative prior work grounded language acquisition rich complex representation entities relationships however consider constrained language task namely coordinate term discovery. statistical language models software. recent work software engineering researchers language models adapted modeling software code. models used enhance variety software development tasks code comment token completion analysis code variable names mining software repositories complemented work programming language research community structured prediction code syntax trees best knowledge prior work discovering semantic relations software entities. provide input/output access system often contain suﬃx stream buffer. likewise many classes extend names super classes examples found figure table therefore include second baseline attempts according string matching similarity. secondstring open source java toolkit. string tokenized camel case consider softtfidf distance tokenized strings deﬁned cohen word. mapping ambiguous example since users less likely mention qualiﬁed class name usually class label meaning name class including package example terms java.lang.string java.util.vector appears times respectively corpus versus terms string vector appear times. additionally class names appear several variations including case-insensitive versions spelling mistakes informal names api-method class provides method method. count occurrence context method deﬁnition every occurrence method invocation e.g. class.method. example given statement code distributional similarity. corpus distributional similarity evaluates occurrence words particular semantic contexts. deﬁning classcontext java class similarly calculate code distributional similarity classes. definition class context based usage class argument methods class provides detailed table observe unique contexts code repository. based deﬁnitions compute distributional similarity measure classes based code-context distributions previously described corpus distributional similarity code-based case calculate empirical context distribution using occurrence frequency class context argmethod api-method contexts methods observed code repository. dis. code hierarchies organization. words deﬁned coordinate terms hypernym given taxonomy meaning least common ancestor taxonomy purpose comparing class types therefore deﬁne ancestry relation using taxonomies based code namespace type hierarchies. package taxonomy package standard deﬁning namespaces java language. mechanism organizing sets classes normally share common functionality. packages organized hierarchical structure easily inferred class name. example class java.lang.string belongs java.lang package belongs java package. high jtextfieldjcombobox yearsplayedtotalearned postinserteventlistener postupdateeventlistener removelisteneraddlistener javaclient mintreemapmaxtreemap eclipsearray table sample word pairs high scores. many high pairs refer software entities variable method java class names whereas pairs contain general software terms. mallet statistical package study text portions posts exclude code segments indicated user-labeled <code> markup. next text tagged stanford tagger parsed maltparser finally extract noun pairs conjunction dependencies conj inv-conj total pairs positive training samples. java standard libraries code repository grounding source java classes expect users often refer classes java tagged posts. data includes source code ﬁles implementation class interface types packages. code repository parsed using eclipse compiler tools provide apis accessing manipulating abstract syntax trees. table cross validation accuracy results coordinate term classiﬁer well baselines using corpus distributional similarity string similarity corpus based features code based features individual code based features. weighted version code based features parenthesis. results shown coord coord-pmi datasets. greater note guarantees noun must mapped least class non-zero probability. next evaluate string morphology resemblance camel-case format acceptable formatting java class names. therefore select alphanumeric terms least upper-case lower-case characters. name noun pairs coord dataset. assumption underlying statistical distributional similarity approaches high-interest entities associated higher corpus frequencies therefore given suﬃcient statistical evidence high-interest relations extracted. software domain real world factors introduce biases software-focused text corpus aﬀect corpus frequencies classes e.g. users discuss classes based clarity eﬃciency implementation simply fundamental software introduced novice users. another motivation using grounded data class implementation highlight additional aspects interest example classes commonly inherited from. therefore deﬁne second noun dataset coord-pmi attempts address issue noun pairs selected based pointwise mutual information positive. include coordinate term pairs high scores appear rarely corpus therefore harder predict using standard techniques. negative data noun pairs appear frequently separately appear coordinate terms therefore marked scores. illustrate point provide sample noun pairs high scores table pairs highlighted bold font labeled coordinate terms data. high contains pairs speciﬁc interesting software domain necessarily frequent words general domain. example pairs seem represent variable names yearsplayed totalearned) others likely refer method names removelistener addlistener). pairs refer java classes jtextfield jcombobox classiﬁcation feature analysis. table report cross validation accuracy coordinate term classiﬁer well baseline classiﬁers using corpus distributional similarity string similarity corpus features code features note using code features signiﬁcantly successful data corpus baselines fileoutputstreamoutputstream aﬃnetransformaﬃnetransformop gzipoutputstream deﬂateroutputstream outputstreamdataoutputstream atomicintegeratomicintegerarray resourcebundlelistresourcebundle buﬀeredimagewritableraster mouselistenermousewheellistener documentbuilderfactory documentbuilder actionlistenersfocuslisteners datainputstreamdataoutputstream table coordinate terms predicted classiﬁers using following features code distributional similarity package hierarchy ancestry displayed predictions true. evaluation manual labeling. crossvalidation results based labels extracted using hearst conjunction patterns. figure provide additional analysis based manual human labeling samples coord-pmi dataset following procedure similar prior researchers exploring semi-supervised methods relation discovery development complete hand labeled coordinate term pairs according ranking full classiﬁer pairs predicted classiﬁers based code corpus distributional similarities only. report results classiﬁer rank predicted samples. according analysis score text code distributional similarity classiﬁers degrades quickly ﬁrst ranked pairs respectively. rank score full classiﬁer whereas code text classiﬁers highlight strength code based features provide table coordinate terms predicted using successful code based features. example prediction using type hierarchy ancestry labels matched pairs classes share least higher package levels. example blockqueue matched java.util.concurrent.blockingqueue predicted coordinate term threadpoolexecutor belongs package. using code disprovide additional feature analysis table report cross validation accuracy classiﬁers using single code feature. interestingly code distributional similarity strongest single feature signiﬁcantly better predictor corpus distributional similarity achieving around v.s. around datasets. taxonomy construction. visualize coordinate term pairs predicted using method aggregating graph entities nodes edges determined coordinate term relation graph edges colored using louvain method community detection entity label’s size determined betweenness centrality degree. high-level communities graph correspond class functionality indicating method used create interesting code taxonomy. note predictions also highlight connections within functional groups cannot found using package type taxonomies directly. example highlighted within functionality group. listener classes facilitate response mechanism actions pressing button entering text however classes belong diﬀerent packages basic components historical reasons. graph action listener classes belong communities components normally used with. presented approach grounded discovery coordinate term relationships text entities representing java classes. using simple entity linking method text entities underlying class type implementation java standard libraries. code-based grounding extract information usage pattern class location java class namespace hierarchies. experimental evaluation shows using corpus distributional similarity coordinate term prediction task unsuccessful achieving prediction accuracy around however adding information based entities’ software implementation improves accuracy dramatically classiﬁer score according human labeling predicted pairs. shown predictions used build interesting code taxonomy draws functional connections common usage patterns implementation details shared classes.", "year": 2015}