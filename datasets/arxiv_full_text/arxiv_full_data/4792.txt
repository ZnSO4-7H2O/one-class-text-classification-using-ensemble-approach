{"title": "The Inductive Constraint Programming Loop", "tag": ["cs.AI", "cs.LG"], "abstract": "Constraint programming is used for a variety of real-world optimisation problems, such as planning, scheduling and resource allocation problems. At the same time, one continuously gathers vast amounts of data about these problems. Current constraint programming software does not exploit such data to update schedules, resources and plans. We propose a new framework, that we call the Inductive Constraint Programming loop. In this approach data is gathered and analyzed systematically, in order to dynamically revise and adapt constraints and optimization criteria. Inductive Constraint Programming aims at bridging the gap between the areas of data mining and machine learning on the one hand, and constraint programming on the other hand.", "text": "constraint programming used variety real-world optimisation problems planning scheduling resource allocation problems. time continuously gathers vast amounts data problems. current constraint programming software exploit data update schedules resources plans. propose framework call inductive constraint programming loop. approach data gathered analyzed systematically order dynamically revise adapt constraints optimization criteria. inductive constraint programming aims bridging areas data mining machine learning hand constraint programming hand. machine learning/data mining constraint programming central many application problems. concerned learning functions/patterns characterizing training data whereas concerned ﬁnding solutions problems subject constraints possibly optimization function. problem current technology problems data analysis constraint satisfaction/optimization almost always studied independently isolation. indeed exist wide variety successful approaches analysing data ﬁeld statistics time advanced techniques addressing constraint satisfaction optimization problems developed community. past decade limited number isolated studies speciﬁc cases indicated signiﬁcant beneﬁts obtained connecting ﬁelds technology used solve many types problems power companies generating distributing electricity hospitals planning surgeries public transportation companies scheduling buses. despite availability eﬀective scalable solvers current approaches still unsatisfactory. reason using technology solve applications constraints criteria model must statically speciﬁed. however reality often model needs revised time. revision needed reﬂect changes environment external events impact problem. revision also needed execution solution generated model modiﬁed characteristics problem. finally revision needed simply original model capture correctly problem. observing impact solution allows correct improve model. therefore urgent need improving revising model time based data continuously gathered performance solutions environment used exploiting gathered data modify model diﬃcult labor intensive state-of-the-art solvers solvers support consequence data gathered today order monitor quality produced solutions help evaluating eﬀect possible adjustments constraints optimization criteria fully exploited changes schedule plan needed. hence schedules plans produced often suboptimal. this turn leads waste resources. instead using data passively data actively analysed order discover update underlying regularities constraints criteria govern data. paper propose formalize framework inductive constraint programming. framework based call inductive constraint programming loop interaction machine learning component constraint programming component observes world extracts patterns. solves constraint satisfaction optimization problem using patterns whose solution applied world. assume world changes time possibly impact applying solution. process repeated loop. inductive constraint programming serve long-term vision easier-to-use eﬀective tools resource optimization task scheduling. central notion constraint programming constraint. constraint boolean function whose scope variables. depending whether function returns true false given input assignment variables constraint accepts rejects assignment. instance constraint speciﬁes combination values variables equals based notion constraint deﬁne constraint network solver. constraint network composed variables taking values domain variables subject constraints optional evaluation function takes input assignment returns cost solution tuple satisfying constraints solver takes input constraint network returns solution/best solution failure case solution satisfying constraints exists. exist several languages/formats specifying constraint problem given solver solving. take instance sudoku problem. figure expresses sudoku constraint satisfaction problem using pseudo-minizinc language line deﬁnes input matrix start containing preﬁlled cells sudoku. line deﬁnes matrix puzzle variables contain solution sudoku. lines equality constraints between preﬁlled cells input matrix start matrix variables puzzle. lines post alldifferent constraint every puzzle. alldifferent global constraint speciﬁes variables x..xn must take diﬀerent values. lines columns. lines tricky play indices subsquares post allfdifferent constraints variables every subsquare puzzle. finally line calls solver instance. machine learning goal learn hypothesis explains observed data. data typically consists training examples assumed independent identically distributed. diﬀerent learning methods diﬀer largely type examples learn from type hypothesis want learn. popular learning setting supervised learning example accompanied label predicted. search linear function examples best predicts labels decision tree formally deﬁne learning task follows example given real-valued data real-valued labels identiﬁed target function goal linear regression learn linear function coeﬃcients minimizes many loss range machine learning methods regression support vector machines expressed standard optimisation problems goal assignment function parameters loss minimized. practice usually specialised solving methods used. inductive constraint programming loop cope changes world iteratively solving learning problem constraint problem. loop composed several components interact writing reading operations. visualization loop given figure introduce elements loop turn. generates solutions good/best solutions according writes solutions repository. case xsolve able produce solution applied world component notiﬁes component sending information failure. world component composed world evaluation function eval world observations repository. world independent behavior dynamically changing eﬀect time eﬀect applying solutions solutions repository. solutions evaluated eval world function feedback stored observations repository. initially world-to-ml used gather training data component. data feedback previous executions solutions component world. solution previous cycle also directly used well cp-to-ml. especially useful previous solution could applied world example learned patterns lead inconsistency. using output world-to-ml cpto-ml learning problem constructed speciﬁc learner solutions applied world using apply-to-world. mentioned before found solution applicable world. case iteration loop started immediately bypasses world. otherwise solutions applied world cycle observations started. observe direct link component world. framework indeed devoted solving combinatorial problems scheduling routing revising based feedback world; classify predict events world. ﬁrst describe component. component focus task scheduling problem. treatment patient typically involves execution various tasks patient executing scans taking blood tests operating patient physiotherapeutic sessions tasks need executed well-deﬁned order require resources hospital certain amount time. overall scheduling problem schedule tasks shortest amount time possible using limited resources hospital. important parameters scheduling problem hence include resources available hospital tasks need executed. task important resources need used many resources needed long need used. whereas many patients clear procedures need followed patient discharged hospital case duration tasks depending parameters health conditions certain task take much longer patient another patient. task component address challenge task predict long task estimated take patient. task involves solving regression problem identiﬁed earlier given task patient need predict duration real number. clearly tasks executed hospital predicted durations diﬀer actual durations. furthermore patients hence tasks arrive. means hospital needs schedule tasks regular basis. patient data collected iteration used improve quality predicted task durations. makes good example inductive constraint programming loop. within loop distinguish following components functions components formalized using language minizinc language mentioned earlier. figure shows minizinc code task scheduling problem. model parameters problem setting reﬂected follows variables need found start variables indicate times tasks need executed. constant max_time represents latest time task still start could speciﬁed task separately well. constraints twofold ensures time point resource within capacity bound resource. note cumulative constraint built-in constraint available minizinc language. constraints involve number variables called global constraints. capture complex structural constraints problem. global constraints essential part eﬃciency models. predict durations tasks hospital regression task needs solved. many diﬀerent models made regression task corresponding learning diﬀerent type regression model. arguably simple regression model linear model task duration prediction based linear combination characteristics patient task executed. problem learning regression model formalized figure variables represent training data contains descriptive attributes various tasks historical durations tasks; variable represents weights features learning. based weights calculate error predictions; line calculates weighted linear combination training example using weights prediction used line calculate error example. line minimizes error examples line deﬁnes errors individual examples combined summing squared errors. scheduling model machine learning model together deﬁne components inductive constraint programming loop. demonstrated declarative uniﬁed language could used model learning problem solving problem. single language learning solving appealing prospect requirement applicability inductive constraint programming loop. problem deﬁne interactions world component component. ﬁrst three problems describe real world problems expressed neat eﬃcient inductive constraint programming loop. last existing academic problems seen inductive constraint programming loop. order improve human mobility region pisa plans take account information trajectories people taking order improve public transportation system. problem composed parts. ﬁrst consists tracking localisation cell phones understand people commute pisa region. second part consists optimising schedules meet much possible requirements people. problem dynamic implementation generated schedule aﬀect people commute observed again problem represented inductive constraint programming loop framework. world observed localisation cells phones region pisa represented trajectories individuals. evaluation traﬃc quality provided eval world function. eval world based measure amount traﬃc jams generated traﬃc. observations stored observations repository. function world-to-ml reads observations given input component. component uses observations learn patterns trajectories quality evaluation traﬃc. learned patterns trajectories/time slots written patterns repository. component contains constraint network models problem generating good schedules region pisa schedules cover much possible trajectories people time need them. parameterized weight trajectory/time slot. values parameters computed function ml-to-cp based input patterns. output component schedule written solutions repository applied world function apply-to-world. process loop ever. figure shows loop solving problem. carpooling application aimed proposing carpooling matches users participating service based actual mobility information kind match proposals likely accepted user. problem modelled inductive constraint programming loop framework. world observed trajectories user describing recent mobility user. eval world function returns response user previous carpooling solution oﬀered data written observations repository. function world-to-ml simply reads information sends component perform mining operations produce temporally labelled weighted oriented graph exists labelled time lift take place probability match proposal accepted graph written patterns repository. ml-to-cp reads graph encodes constraint network. observation world also provides information useful carpooling system e.g. number passengers hosted users vehicle. function world-to-cp reads information directly sends component relevant constraints network. user constraint deﬁning maximum capacity vehicle user added. component solves network best solution. solution carpooling assignment maximizes reduction cars likelihood acceptance users. written solutions repository proposed users. figure shows loop solving problem. improve energy-eﬃciency data-centers. consider cloud computing service customers contract computing services throughout day. tasks assigned machines within data centre require certain amount resources duration run. schedule tasks overall cost energy used minimized. however complicated fact large electricity consumers like data centre typically variable price electricity known advance. ireland example price known four days after. price also ﬂuctuate signiﬁcantly throughout provides opportunity reduce energy peak periods instead perform work cheaper periods. requires forecast price ahead time produce schedule tasks based forecasted price data. application focus ﬁrst inductive challenge modeled inductive constraint programming loop follows. world consists number elements wide range factors aﬀect energy market like weather conditions producers/consumers electricity etc; customers data center contract various workloads. worldto-cp gives component tasks scheduled next turn; world-to-ml takes input world produce hypothesis modeling electricity price. ml-to-cp incorporates forecast produce solution scheduling problem minimizing forecast energy cost. apply-to-world takes schedule applies world. time progresses world changes world-to-ml need evolve forecast model subsequently schedule take account factors aﬀecting energy price. figure shows loop solving problem. here machine learning applied outcome directly used program. alternative proposed tulabandhula rudin machine learning taking operational cost account. achieved making operational cost part loss function problem. repeatedly iterate solving component applying found schedule world. modeling problem constraint network requires expertise constraint programming. want novices constraint programming need automatic constraint acquisition systems assist user modeling task. conacq system conacq interacts user learn target constraint network represents problem user. describe conacq implemented instance inductive constraint programming loop. world involves examples deﬁned objects/variables example assignment value variables examples produced component world itself. evaluation function eval world user herself evaluates quality examples. conacq quality either true false depending example solution target constraint network not. examples evaluation written observations repository. world-to-ml simply reads classiﬁed examples observations gives component. hypotheses space used component deﬁned language constraints used express target network. reading examples observations component updates needed– hypothesis form constraints correctly classify examples. learned constraints written patterns repository. based learned constraints component generates constraints implement followed query strategy constraints together learned constraints sent component ml-to-cp function. component solves network built constraints provided component generates solutions stored solutions repository. apply-to-world sends solutions repository world classiﬁed user/eval world function. case constraint network solution provided world cp-to-ml function notiﬁes component able generate satisfactory query possibly reasons failure inconsistent constraints. figure shows loop solving problem. algorithm portfolio contains number algorithms solvers suitable solving kind problem diﬀerent performance characteristics. given problem instance solve determine best solver particular problem best deﬁned according application-speciﬁc metric. algorithm portfolios shown achieve signiﬁcant performance improvements individual algorithms. prominent application area techniques constraint programming. world consists performance data solvers instances. world-to-ml reads performance information component learns model describes predicted performance solvers instances allows determine best solver particular instance. instance solved appears world world-to-ml worldto-cp read world-to-ml sends component classiﬁes writes classiﬁcation patterns repository. world-to-cp sends instance solved component. ml-to-cp reads patterns repository classiﬁcation provided component decide solver use. selected solver solves instance generates data point world apply-to-world function. world lead component update predictive model forth. figure shows loop solving problem. brief introduction constraint programming machine learning introduced framework inductive constraint programming. idea inductive constraint programming loop components interact world order adapt solutions changes world. essential need problems change eﬀect time problems inﬂuenced application previous solution. also eﬀective problems partially speciﬁed component learns observation applying partial solution e.g. case constraint acquisition. presented multiple examples inductive constraint programming loop real world problem settings. many settings exist often learning methods used producing schedules operational plans need framework adapt changes world increase.", "year": 2015}