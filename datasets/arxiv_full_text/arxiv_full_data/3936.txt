{"title": "\"Going back to our roots\": second generation biocomputing", "tag": ["cs.AI", "cs.NE"], "abstract": "Researchers in the field of biocomputing have, for many years, successfully \"harvested and exploited\" the natural world for inspiration in developing systems that are robust, adaptable and capable of generating novel and even \"creative\" solutions to human-defined problems. However, in this position paper we argue that the time has now come for a reassessment of how we exploit biology to generate new computational systems. Previous solutions (the \"first generation\" of biocomputing techniques), whilst reasonably effective, are crude analogues of actual biological systems. We believe that a new, inherently inter-disciplinary approach is needed for the development of the emerging \"second generation\" of bio-inspired methods. This new modus operandi will require much closer interaction between the engineering and life sciences communities, as well as a bidirectional flow of concepts, applications and expertise. We support our argument by examining, in this new light, three existing areas of biocomputing (genetic programming, artificial immune systems and evolvable hardware), as well as an emerging area (natural genetic engineering) which may provide useful pointers as to the way forward.", "text": "researchers ﬁeld biocomputing have many years successfully harvested exploited natural world inspiration developing systems robust adaptable capable generating novel even creative solutions humandeﬁned problems. however position paper argue time come reassessment exploit biology generate computational systems. previous solutions whilst reasonably effective crude analogues actual biological systems. believe inherently inter-disciplinary approach needed development emerging second generation bio-inspired methods. modus operandi require much closer interaction engineering life sciences communities well bidirectional concepts applications expertise. support argument words bio-inspired computing genetic programming artiﬁcial immune systems evolvable hardware natural genetic engineering biological plausibility natural organisms rule much complicated subtle therefore much less well understood detail artiﬁcial automata. nevertheless regularities observe organisation former quite instructive thinking planning latter john neumann even world scientists already thinking conceptual cross-over natural artiﬁcial systems. neumann turing pioneers contributed emergence bio-computing extraction computational principles methods natural biological systems. biologically-inspired computational methods artiﬁcial neural networks genetic algorithms successfully used solve wide range problems engineering domain. think methods comprising ﬁrst generation biocomputing techniques rely crude approximations fundamental underlying biological principles crude models have accepted several reasons ﬁrst produced solutions considered good enough terms ﬁtness purpose. second reason borne necessity sufﬁciently-detailed description understanding underlying biological system eluded reasons acceptance status believe beginning eroded growing unease limitations current nature-inspired models speed understanding biology increasing. possible explanation lack recent progress nature-inspired computing respective disciplines parted company prematurely report epsrc workshop minuted major challenges facing collaborative work biologically inspired computing systems temptation diverge early. case extent genetic algorithms method moved forward hoped premature divergence computing biology communities. second generation biocomputing emerge perhaps case convergence disciplines required re-ignite initial spark interest passed them. developments systems biology driving advances biology engineering computer science crucially breakthroughs longer unidirectional expertise concepts one-way stream discipline another. systems-level philosophy beginning dominate century science dictates artiﬁcial boundaries disciplines must transcended even demolished. ﬁrst step process might revisit perspective nature-inspired computing perhaps even reinvent bottom-up. research community proposed number grand challenges computer science research ambitious plans development variety research areas. grand challenge addresses area non-classical computation includes exploring areas biologically inspired paradigms exploitation natural world order develop areas computation. part ambition bring together again disciplines prematurely drifted apart. become clear bio-inspired approaches same contribution make scientiﬁc community. position paper highlight number themes ﬁrst important consider type biological system wish exploit different biological systems different mechanisms give rise different properties. second main thread position paper high level abstractions underlying biology longer sufﬁcient deeper level understanding required. become necessary ﬁrst understand exploit underlying richness order expand themes paper take reader exemplar bio-inspired systems speciﬁcally genetic programming section artiﬁcial immune systems reﬂect themes describe paradigms evolved years begun address issues themes raise. paper also emphasise importance consider deployment artiﬁcial systems i.e. software hardware system constructed deployed different considerations required each. tackle section again reﬂecting themes outlined context evolvable hardware finally order bring things together examine area natural genetic engineering present small case study development biologically inspired approach truly rooted biology system trying exploit change real feedback given biologists insights biological system rather wholesale pillaging done date. genetic programming genetic programming technique breeding computer programs loosely following darwinian theory evolution speciﬁc based synthesis approach towards evolution including genetic traits inherited generation generation molecular mechanisms based transformation phenotypes approach followed footsteps quite successful adaptations evolutionary paradigm toward solution optimization problems genetic algorithms evolutionary programming evolutionary strategies earlier applications fundamental idea substrate somewhat different goal different nature genetic programming different complexity task complexity data structure variable course evolutionary run. turns indeed tightly intertwined hope early applications genetic programming typically employed socalled parse-tree representation clearest examples evolvable data structure. later number data structures introduced able evolve well better parse trees circumstances. prominent among linear sequence instructions imperative programming language generic graph structure whose special case tree earlier used initial ﬂurry publications methods different operators selection methods examined besides data structures ﬁeld turned application exploitation method. spectacular applications published early paved bold inquiries recently ﬁeld emboldened degree applications rivalling even superseding performance humans demonstrated. instance koza applied patent protection particular design generated highly parallel computational approach toward circuit design. others succeeded designing antennae sent space beat human designers goals entire competition sprung held regularly annual gecco conference year devoted products producing designs human-competitive beating human performance. might asked fairness whether ﬁeld come maturity merely needs niche growing bio-inspired computational paradigms. believe least yet. reason time computer scientists engineers busy developing exploring methods artiﬁcial evolution biologist natural scientists made great strides deciphering nature’s secrets success recipes real evolution. effect people taking inspiration actually taking inspiration snapshot real system. explosion activity molecular biology explosion knowledge evolution ﬂuidity concepts like shooting moving target difﬁculties accompanying conquer unknown twists turns. expect continued stream discoveries biology might translate improvements artiﬁcial evolutionary approaches future provided give attention. such ﬁeld reached steady state driven progress dynamic human quests time. furthermore enabling technology behind artiﬁcial evolution large storage capacity enormous computational power digital computer. quantities also quantities transition attested continuous adherence growth quantities according moore’s law. aspects genetic programming adaptability genetic representation. limited though mainly changes complexity proposed solution might measured number elements used early curious phenomenon discovered length programs would tend grow grow nearly without bounds unless artiﬁcially restricted more resulting code would always reﬂect complexity behaviour. upon closer inspection found so-called neutral code main source complexity growth data structures representing algorithmic behaviour found phenomenon community agreed call emergent phenomenon ubiquitous runs positive negative effects resulting behavior consuming many resources needed explanation within genetic programming method used. substantial number publications meantime addressed problem consensus beginning emerge reasons phenomenon. time remedies proposed prohibit effect methods considered introduce effect artiﬁcially following tradition evolutionary computation approaches question building blocks dynamics growth examined. work number preconditions fulﬁlled among better understanding length-varying evolutionary algorithms work. entire body work published question understanding algorithms actually work forwarded substantially. code-growth emergent phenomenon genetic programming perhaps obvious. upon closer inspection solutions bred approaches found evolved code shows internal patterning reminding repetitive structure natural genomes. examined ﬁrst linear sequences code conﬁrmed representations well much natural counterpart seems phenomenon aspects mentioned above. exciting developments reported merging approaches approaches artiﬁcial life community recent years. application sphere growing every year amount work published growing correspondingly. also underground stream work published patented instead held trade secret. refers applications mostly ﬁnancial business slight edge competitor might produce difference money-wise. however number areas expect progress really make difference world. first foremost present techniques scale well. present useful applications restricted short programs complexity comparable lines code. otherwise modularity needs engineered solutions somewhat distraction unbiased evolutionary search process. human-competitive programs evolved structuring evolutionary process turned necessary another. koza explained recent book automatically deﬁned functions could employed allow structuring. originally completely engineered power evolve selection pressures. argued without inclusion developmental process might enable evolution genome structuring upscaling solutions growth continue suffer scalability lack potential modularity inclusion process however come free. need considerably complicate genotype-to-phenotype prospects improving paradigm something practinioners weary about. believe however without implementation developmental structuring prodiscovered molecular biology going genome meets eye. although human genome translated protein thus consists genes genome transcribed indicates barely started understand formation phenotypes genetic information transcription important step formation phenotype translation proteins? addition phenotypic differences come without difference genetic makeup individual points dimension epigenetics primary importance want understand evolution could effects incorporated genetic programming epigenetic programming? even world evolution things used thus would well continuing explore diversity nature apply various methods various combinations. computer hardware becoming ubiquitous seemlessly connected biological systems technical progress allowed integration algorithms become life-like compatible human behavior look closer modelling biological behaviour. evolution however adaptive system we’d study. neural system endocrine system immune system need studied too. next section discusses recently become focus attention researchers bio-inspired computing. immune system complex system undertakes myriad tasks. abilities immune system helped inspire computer scientists build systems mimic various properties immune system ﬁeld research artiﬁcial immune systems seen application immune inspired algorithms problems robotic control network intrusion detection fault tolerance bioinformatics machine learning name few. computational point view immune system many desirable properties could endowed artiﬁcial systems. properties include robustness adaptability diversity scalability multiple interactions variety timescales brief history artiﬁcial immune systems origins roots early theoretical immunology work farmer perelson varela number theoretical immune network models proposed describe maintenance immune memory absence antigens. models whilst controversial immunological perspective began give rise interest computing community. inﬂuential people crossing divide computing immunology early days hugues bersini stephanie forrest. case hugues attended talk francis varela hugues made decision begin working varela. case stephanie forrest happened sharing work alan perelson thus working relationship began there. fair early work bersini well rooted immunology also true early work forrest works formed basis great deal excellent foundational work area ais. case bersini concentrated immune network theory examining immune system maintained memory might build models algorithms mimicking property. regards forrest work focussed computer security formed basis great deal research community application immune inspired techniques computer security. time forrest undertaking work researchers started investigate nature learning immune system might used create machine learning algorithms initial results encouraging built success applying immune ideas classiﬁcation sequences either promoter non-promoter classes detection potentially fraudulent mortgage applications spawned work area immune network based machine learning next years notably hunt cook system totally rewritten simpliﬁed applied unsupervised learning thread work machine learning spawned work unsupervised domain trying perform dynamic clustering success works time using ideas immune network theory work used immune inspired associative memory ideas track moving targets databases. supervised learning domain little happened work developed immune based classiﬁer known airs. system developed watkins turned parallel distributed learning system shown real success stories immune inspired learning course activity time machine learning small area. outline applications developments past years would take long time good review papers literature reader directed towards international conference artiﬁcial immune systems conference series born operated subsequent years best reference material read order grasp variety application areas also developments algorithms theoretical side ais. taking early work forrest example work great deal research proposal immune inspired anomaly detection systems results reported works hint possibility immune approach going beneﬁcial degree work showed known novel intrusions could detected. however given typical representation used r-contiguous bits matching rule typically used compare contiguous regions binary string issues computational efﬁciency. r-chunk rule developed later made computationally efﬁcient generate detectors non-self space later computationally efﬁcient methods developed real-valued shape space unlike code bloat problem case problem able generate enough detectors capable covering space effeciviy; essence ended occuring exponential relationship size self data number detectors could generated. work presented in-depth theoretical analysis negative selection algorithm real hamming shape spaces. authors suggest hamming shape-space approach well suited real-world anomaly detection problems. problems seem arise generated detector under-ﬁts training data exponentially small values however also point consequence. detector generation process infeasible since proposed detector generating algorithms runtime complexity exponential addition theoretical arguments undertook simple study comparison negative selection approaches one-class support vector machine comparing work results revealed classiﬁcation performance method crucially depended size variable region results one-class provides good better results. argued clear date made real breakthrough natural application network security. another example work timmis immune network inspired algorithm proposed capable performing unsupervised learning. initial results encouraging investigations highlighted number problems work identiﬁed different behavioral pattern original work. subsequent investigation discovered algorithm would naturally discover strongest pattern within data applied network would effectually converge single cluster desired behavior all. pressure within network great weaker cells survive came naive implementation network interactions stimulation suppression cells balanced effectively. pointed simplistic approach taken representation data vectors particular deﬁnition interactions. original interdisciplinary slant taking care develop algorithms faithful immunological roots. example bersini pays clear attention development immune network models applies models control problem characterised discrete state vector state space. bersini’s proposal relaxes conventional control strategies attempt drive process control speciﬁc zone state space; instead argues metadynamics immune network akin meta-control whose keep concentration antibodies certain range viability examples interdisciplinary work development immune gene libraries ultimately bone marrow algorithm employed development negative selection algorithm ﬁrst application computer security however recent years work drifted away biologically-appealing models attention biological detail focus engineeringoriented approach. systems examples reasoning metaphor include simple models clonal selection immune networks negative selection algorithms outlined above. example clonal selection algorithm whilst intuitively appealing lacks notion interaction b-cells t-cells cytokines. addition large number parameters associated algorithm whilst well understood make algorithm less appealing computational perspective. ainet again whilst somewhat affective employ immune network theory great extent. suppression b-cells employed whereas immune network theory suppression stimulation cells. regards negative selection simple random search strategy employed combined using binary representation makes algorithm computational expensive almost unusable real world setting however past year work danger team started address imbalance. example recent work begun initial explorations dendritic cells event data stream. whilst work still preliminary works static data moment great deal promise there ways towards making real breakthrough intrusion detection area research. work linked proposes artiﬁcial tissue type representation data space evolve adapt time. again preliminary work could prove useful bridge data immune algorithm itself. addition this work proposes conceptual framework development propose greater interaction computer scientists engineers biologists mathematicians gain better insights workings immune system applicability paradigm gained. interactions rooted sound methodology order fully exploit synergy. whilst immune system clearly interesting system investigate viewed isolation many emergent properties arising interactions systems missed. systems operate isolation biology therefore consideration given interactions immune neural endocrine systems together allow emergent properties arise immune neural endocrine cells express receptors other. allows interaction communication cells molecules direction. appears products immune neural systems exist lymphoid endocrine neural tissue time. indicates bi-directional link nervous system immune system. therefore would seem endocrine neural systems affect immune system. evidence suggest stimulating areas brain possible affect certain immune responses also stress suppress immune responses also reciprocal immune cells affect endocrine neural systems. action various endocrine products neural system accepted important stimulus wide variety behaviours. range behaviours ﬂight sexual activity sleeping eating computationally then ais? possible explore role interaction three systems. interesting avenue would design help select types components useful added control system moment remove components proving harmful control system biological immune system cells select action perform detecting properties cells chemical environment molecular interactions membrane receptors. artiﬁcial system similar properties detected looking activation states artiﬁcial neurons endocrine cells well global state information current consumption battery levels. thus artiﬁcial immune system components make similar decisions within artiﬁcial context. reviewed bioinspired paradigms well established relative newcomer section noticed little mention nature system developed. section review area evolvable hardware method electronic circuit design uses inspiration biology evolve rather design hardware. ﬁrst sight would therefore seem appealing. consider different systems nature human engineered human immune system computer writing article complex? reliable? optimized most? adaptable change? answer almost questions likely immune system. could argue winner engineered side could question which optimized most? this obvious conclusion might methods based nature works myriad current human design methods. however quite straight forward. nature number advantages current engineered systems least time resources however mean evolutionary designs cant useful. simple example evolutionary techniques real beneﬁt consider growing issues associated keep electronic systems running operational long periods time often unpredictable environments. since basis evolutionary algorithms population different systems compete chance reproduce already contains type redundancy since system population different. fault occurs system either external conditions internal electronic faults affect different systems different ways diversity solutions. mean particular individuals effected fault therefore provide tolerance fault. evolvable hardware ﬁeld brings together reconﬁgurable hardware artiﬁcial intelligence fault tolerance autonomous systems. evolvable hardware refers hardware change architecture behaviour dynamically autonomously interaction environment. ideally process interactions changes continuous open-ended. evolvable evolved hardware make evolutionary techniques order produce system performs speciﬁcation; extent autonomous properties endow ﬁnal system limited fault tolerance. major difference evolved systems change good individual found therefore rather static designs evolvable systems continue possibility changing throughout existence. hence systems change environment changes evolvable system able adapt changes continue operate effectively. brief history evolutionary hardware systems could argued artiﬁcial intelligent system design address features autonomy adaptability robustness fault-tolerance. autonomous robot navigation dynamic environments represents challenging task needs take account features. conventional approaches based off-line learned control policies generally work appropriately implemented real time environments. example actual hardware system implementing evolved behaviour well accurately match simulation environment used evolution. sensors actuators used real system different characteristics used simulation development research ﬁeld named evolvable hardware application evolutionary algorithms automatic design reconﬁguration electronics circuits presents promising approach tackle problem adaptation unknown/changing environments. methodologies established design extrinsic intrinsic former case evolutionary process well ﬁtness evaluation individual simulated software. entire design undertaken off-line evolutionary process completed best member ﬁnal population downloaded onto hardware. latter case evolutionary process maybe executed software individual executed evaluated hardware developments electronic devices field programmable gate array reconﬁgurable devices pre-determined function enabled theoretical ideas intrinsic evolution become reality last years. individual represented string downloaded chip conﬁguration data. data includes deﬁnition cells functionality well topology system. higuchis group japan taken different approach ehw. rather extrinsic evolution intrinsic evolution cots developed single chip sepciﬁcally designed support evolvability developed gate-level chip consists genetic algorithm hardware reconﬁgurable hardware logic control logic required. chip variants applied number applications including artiﬁcial hand controller autonomous robotics data compression image data analogue chip design cellular phones optical system adjustment adjustment clock timings results show increased cycle time evolutionary process specialised optimisation taken place hardware. evolutionary computation evolutionary strategies genetic programming applied example using binary representation appears convenient since matches perfectly conﬁguration bits used fpgas. however huge problems associated evolution large circuits problems scaling. direct genotype-phenotype mappings circuit complexity increases size genotype size search space. number papers published evolve on-line fpga-based robot controllers using methods using cots. main problems evolving fpga genotypephenotype mapping. effective methods solve problem using intrinsic proposed. intrinsic ﬁtness evaluated target hardware. therefore changes environment reﬂected immediately ﬁtness evaluation. example problem adaptation autonomous robot navigation changing environments consists ﬁnding suitable function maps inputs sensors outputs becoming popular ehw. techniques cartesian genetic programming enzyme genetic programming applied extensively ehw. recent development attempt move back biology considered criticism location genes within chromosome direct indirect inﬂuence resulting phenotype. words order speciﬁc information regarding deﬁnition stored direct indirect effect operation performance characteristics resulting program. effects considered undesirable mask modify role speciﬁc genes generation phenotype consequently often referred possessing direct indirect context representation. alternative representation genes express positional dependence proposed lones tyrrell termed implicit context representation order genes used describe phenotype determined self-organised binding based characteristics speciﬁc location within genotype much like biology. result implicit context representation version traditional parse-tree based termed enzyme genetic programming. authors since implemented implicit context representation termed implicit context representation cartesian genetic programming speciﬁcally evolution image processing ﬁlters many evolutionary algorithms whether intrinsic extrinsic ﬁnal criteria evolutionary process stops best population used implementation. alternative approach allow continuous evolution throughout lifetime system. evolutionary process continues however member chosen implementation evolutionary process stop. continuous process allows system responsive environmental changes. example evolution cope errors runtime. ﬁtness might drop instant error activated evolutionary process autonomously deals drop ﬁtness recovers back acceptable ﬁtness level hence acceptable level functionality number generations. overwhelming majority digital design today done using electronic design automation tools. complicated designs usually implemented fpga application speciﬁc integrated circuits device density permits high-speeds small packages. complexity designs makes hand design methods impossible. tools automate design process thereby reducing design time improving yields reducing nonrecurring costs. process begins describing digital circuit computer program written hardware description language ubiquitous hdls verilog vhdl speciﬁed ieee standards. design expressed mixture different levels abstraction. compiled source code input synthesiser along component library design constraints timing power consumption. synthesiser responsible taking design described using devices component library creating circuit satisﬁes design constraints. output synthesizer goes another tool assigns logic functions conﬁgurable logic blocks inside fpga determines routing blocks. bitstream produced design implementation tool used physically program fpga. veriﬁcation design occurs various places design process. description simulated verify design meets functional speciﬁcations. second simulation performed synthesis ensure synthesised circuit still functions properly. synthesised circuit design placed routed thorough timing analysis conducted. finally programmed fpga placed target system full functional timing check. veriﬁcation fails stage original description must modiﬁed synthesis process repeated. example timing analysis identiﬁes designer could describe design lower level abstraction allows tighter control gets synthesised. practitioners need understand fpga design place widely used throughout integrated circuit industry today. essence means community show substantial signiﬁcant advantages established method making real inroadsand presents several challenges method trying perform circuit synthesis. area adaptive system design control potentially methods greatest potential digital analog mixed signal systems. circuitry adapted i.e. reconﬁgured take roles fault recovery. consequently focus adaptation fault recovery operations. circuits adapted in-situ. makes environment particularly difﬁcult work user almost never complete knowledge original circuitry failed. obviously faults degrade circuits performance change operational environment well. regardless cause fault reconﬁguration done in-situ especially challenging reasons faults hard detect isolate reconﬁguration function compromised fault. however biological systems seem operate majority time issue continually challenging them. present time signiﬁcant portion ehw-based fault recovery investigations rely simulations usually fairly simplistic models biological evolution. many evolutionary-type systems genotype phenotype mappings tend rather simpliﬁed usually one-to-one. mentioned already developmental processes seldom considered investigations needed develop intrinsic evolutionary methods autonomous systems limited resources. also include recovery techniques. like biological systems evolutionary methods stop good solution found. need consider incorporate biological open-ended evolution systems? work needs done developing intrinsically evolve circuit conﬁgurations imprecisely deﬁned performance objectives evolving benign conﬁgurations damage contained controlled interest. accurate models equivalent biological processes need considered hardware systems. studies needed determine effective ehw-based recovery methods computing resources degraded environmental conditions. somehow homeostasis-type ideas make systems adapt intelligently ensure critical functions kept operational expense other less critical functions example immune-endocrine-neural system many fault recovery scenarios involve injecting arbitrary faults operating circuite.g. randomly chosen switch fpta forced open. clear fault likely occur isolation whether results fault. ambiguity leads development recovery methods limited usefulness. major issue fault-tolerant systems error detection. mostly ignored systems. artiﬁcial immune systems role play made combination multiple bio-inspired ideas endocrine etc. discussed section previous sections already shown detail living organisms easily thought information processing systems. biological systems individual cells capable performing amazingly intricate sophisticated information processing tasks including pattern recognition distributed memory storage pattern formation distributed communication adaptive control already seen descriptions cellular systems usefully abstracted applied solution human-deﬁned computational problems. particular studies bacterial attraction movement successfully applied training artiﬁcial neural networks design aircraft aerofoils addition actual living cells also directly engineered perform simple computational tasks. weiss described technique mapping digital logic circuits onto genetic regulatory networks resulting chemical activity within cell corresponded computations speciﬁed desired digital circuit. burst activity papers appeared issue nature seminal contributions ﬁeld. elowitz leibler described construction oscillator network caused culture e.coli periodically glow expressing ﬂuorescent protein. crucially period oscillation slower cell division cycle indicating state oscillator transmitted generation generation. gardner implemented genetic toggle switch e.coli switch ﬂipped stable state another either chemical heat induction. single cell experiments demonstrated feasibility implementing artiﬁcial logical operations using genetic modiﬁcation. savageau addresses issue ﬁnding general design principles among microbial genetic circuits citing several examples. several examples successful work cellular computing found clear therefore working interface cellular biology engineering/computer science generate tangible beneﬁts terms real world applications. however applications bring closer real break-through terms completely novel computational paradigm. moreover exceptions rarely case studies anything overall understanding underlying biological system. here argue development novel biological algorithms least part motivated desire longer-term insights short-term applications. given work presented sections seems clear evidence matter appealing creating applications inherent difﬁculties adopting biologically inspired approaches possible circumvent these rigorous in-depth investigations. following section strengthen main overall argument article simple abstractions whilst useful limited needs consider detail underlying biology work long-term general signiﬁcance. support argument reviewing recent work natural genetic engineering. relatively novel still controversial view evolution proposed mainly shapiro centres ability individual cells restructure genomic information response reproductive pressures. deeper understanding fundamental underlying processes beneﬁt biologists attempting gain insights evolution computer scientists engineers seeking nature inspiration robust adaptable hard/software systems. crucially though investigation poses twin challenges biologists computer scientists neither community succeed isolation. however anticipated beneﬁts wide-ranging profound. shapiro argues these challenges high research agenda century. likely meeting lead computing paradigms great creative power like evolution itself relatively recently view genome changed collection relatively independent genetic units system made organised collection interacting interdependent modules coding regions genes provide templates proteins generated gene expressed proteins affect expression genes shapiro argues genome precise architecture encoded distribution various non-coding repetitive sequences system-level architecture governs functioning cell follows alterations structure well much signiﬁcant terms evolution modiﬁcations individual proteins cutting splicing organisms therefore reorganise repetitive coding sequences generate functional genomic systems. natural genetic engineering term given ability capacity organisms modify reorganise genome response certain pressures. seen section shufﬂing interdependent program modules effective computational strategy combined sort selection pressure. reorganisation occur different time-scales multitude reasons. example clear occurs intermediate time-scale immune system here progresses course multicellular development cellular differentiation providing system clock. notion timescales variety immune system would seem missed vast majority date. problem encoding virtually inﬁnite array response molecules given ﬁnite coding sequence region appears solved immune system lymphocytes utilising nge. here sequences controlled rearrangements generate novel protein-coding regions used generate antigen-binding molecules. moreover real time positive feedback loop ampliﬁes cells succeeded generating molecules sufﬁcient antigen cells undergo process tweaking increase speciﬁcity. gives lymphocytes extraordinary degree responsiveness; evolved evolve rapid speciﬁc adaptations clear also occurs much rapid time-scale lymphocyte differentiation. many organisms capable extremely rapid genomic rearrangement perhaps striking example ciliate term applied member group around different types single-celled organism characterized features possession hair-like cilia movement presence kinds nuclei instead usual one. nucleus used sexual exchange responsible cell growth proliferation. crucially micronucleus contains encoded description working macronucleus decoded development. encoding scrambles fragments functional genes macronucleus permutation partial coding sequences inclusion non-coding sequences. macronucleus provides blueprints production proteins. micronucleus hand dormant nucleus activated sexual reproduction point micronucleus converted macronucleus process known gene assembly. process micronuclear genome converted macronuclear genome. conversion reorganizes genetic material micronucleus removing noncoding sequences placing coding sequences correct order. unscrambling interpreted computational process. exact mechanism genes unscrambled fully understood. ﬁrst describe experimental observations least suggested possible mechanisms. describe computational model process. conclude section discussion computational biological implications work. macronucleus consists millions short molecules result conversion micronuclear molecules. exceptions macronuclear molecule corresponds individual gene varying size b.p. b.p. fragments macronuclear form small proportion micronucleus micronuclear noncoding including intergenic spacers noncoding excised gene assembly. process decoding individual gene structures therefore interests here. simplest case micronuclear versions macronuclear genes contain many short noncoding sequences called internal eliminated sequences iess. short at-rich sequences name suggests removed genes destroyed gene assembly. separate micronuclear version gene macronuclear destined sequences mdss iess removed mdss making gene glued together form functional macronuclear sequence. simplest case iess bordered either side pairs identical repeat sequences ends adjacent mdss organisms gene assembly problem complicated scrambling mdss within particular gene. situation correct arrangement mdss macronuclear gene present permuted form micronuclear dna. example actin gene oxytricha nova made mdss iess mdss present micronucleus order –––––––– inverted development macronucleus mdss making gene rearranged correct order time excision. scrambling often complicated fact mdss inverted fundamental questions ciliates remarkably successful organisms. range manipulation reorganization operations perform clearly acquired millennia evolution. however fundamental questions remain underlying molecular mechanisms gene reconstruction evolve ciliates know sequences remove keep? concerning ﬁrst question prescott proposes compression working nucleus larger predecessor part strategy produce streamlined nucleus every sequence counts efﬁciency enhanced dispersal genes individual molecules rather joined chromosomes. however still know little details evolutionary origins intricate underlying molecular machinery. perhaps success attempting answer second question genes successfully reassembled encoded version? rest section address question computational perspective describe computational model rearrangement process. model proposed prescott ehrenfeucht rozenberg based three intramolecular operations actual mechanics cutting splicing sequences still understood ciliates clearly contain enzymatics tools needed perform tasks. operation proceeds follows. strand folded loop identical pointers aligned staggered cuts made pointers connecting mdss join together self-anneals yield circular molecule second operation known hairpin inverted repeat excision used situation pointer occurrences inverted. molecule folds hairpin structure pointer inversion aligned cuts made inverted sequence reinserted yielding single molecule. third ﬁnal operation double-loop alternating direct repeat excision/reinsertion. operation applicable situations repeats pointers interleaving occurrences strand. double loop folding made pairs identical pointer occurrences aligned cuts made recombination takes place yielding molecule fig. model successfully applied known experimental data assembly real genes including actin gene urostyla grandis engelmanniella mobilis gene encoding telomere binding protein several stichotrich species assembly gene encoding polymerase sterkiella nova. descriptions applications presented perspective current article aspect work problem ﬁrst originated study biological system. expressing operation ciliates terms abstract topological operations mathematicians able produce computational model process appears account every decrypted ciliate gene observed date. feedback cycle complete abstract model studied novel computational paradigm right biology computer science therefore inextricably tied together neither computational model descriptions offers would possible without tight interaction overriding message paper feel bio-inspired computing general reached impasse. exploring paradigms seen that whilst signiﬁcant inroads made development systems mimic natural counterpart still remains wide gulf artiﬁcial systems compared natural systems. cases explored limitations approach concluded necessary maybe essential paradigms revisit biological roots take look whence came. considered areas evolvable evolved hardware systems. systems make techniques evolve designs conﬁgurations placed hardware systems thus bringing beneﬁts speed conclude discussion whilst seem appealing place solutions hardware meet problem before scale. finally reviewed area natural genetic engineering. here showed close interaction biologists computer scientists generated useful model natural genetic engineering. incredibly powerful framework genomic rearrangement possible explanation organisms might confront issue encoding inﬁnity would areas bioinspired computing take lesson natural genetic engineering community allow move forward create second generation biocomputing systems. emergent phenomena genetic programming. anthony sebald lawrence fogel editors evolutionary programming proceedings third annual conference pages diego usa. world scientiﬁc publishing. algorithmic chemistry genetic programming. keijzer tettamanzi collet tomassini hemert editors proc. europ. conference genetic programming lausanne switzerland april pages berlin. springer verlag. wolfgang banzhaf. genetic programming pedestrians. stephanie forrest editor proceedings international conference genetic algorithms icga- page francisco usa. morgan kaufmann. wolfgang banzhaf. artiﬁcial regulatory networks genetic programming. riolo worzel editors genetic programming theory applications pages kluwer academic boston usa. bersini. reinforcement recruitment learning adaptive process control. proc. int. fuzzy association conference artiﬁcial intelligence real time control pages s.l. smith a.m. tyrrell. beneﬁts employing implicit context representation hardware geometry cgp. proceedings international conference evolvable systems volume lncs pages multilayered immune system hardware fault tolerance within embryonic array. jonathan timmis peter bentley editors proceedings international conference artiﬁcial immune systems icaris pages university kent canterbury. university kent canterbury printing unit. greensmith aickelin cayzer. introducing dendritic cells novel immune-inspired algorithm anomaly detection. jacob pilat bentley timmis editors proceedings international conference artiﬁcial immune systems volume stephanie forrest editor proceedings international conference genetic algorithms icga- pages university illinois urbana-champaign. morgan kaufmann. application areas past present jacob pilat bentley timmis editors proceedings future. international conference artiﬁcial immune systems lncs volume lncs pages springer. exploiting analogy immunology sparse distributed memories system clustering non-stationary data. jonathan timmis peter bentley editors proceedings international conference artiﬁcial immune systems icaris pages university kent canterbury. university kent canterbury printing unit. john koza martin keane matthew streeter william mydlowec jessen guido lanza. genetic programming routine human-competitive machine intelligence. kluwer academic publishers. john koza martin keane jessen forrest bennett william mydlowec. automatic creation human-competitive programs controllers means genetic programming. genetic programming evolvable machines evolving fpga-based robot controllers using evolutionary algorithm. jonathan timmis peter bentley editors proceedings international conference artiﬁcial immune systems icaris pages university kent canterbury. university kent canterbury printing unit. evolutionary antenna design nasa spacecraft. una-may o’reilly tina rick riolo bill worzel editors genetic programming theory practice pages kluwer boston usa. neal. artiﬁcial immune system continuous analysis timejonathan timmis peter bentley editors proceedings varying data. international conference artiﬁcial immune systems icaris pages university kent canterbury. university kent canterbury printing unit. peter nordin frank francone wolfgang banzhaf. explicitly deﬁned introns destructive crossover genetic programming. peter angeline kinnear editors advances genetic programming chapter pages press cambridge usa. exact schema theory markov chain models genetic programming variable-length genetic algorithms homologous crossover. genetic programming evolvable machines search biases homologuous crossover linear genetic programming variablelength genetic algorithms. langdon cant´u-paz mathias davis poli balakrishnan honavar rudolph wegener bull potter schultz miller burke jonoska editors gecco proceedings genetic evolutionary computation conference pages york. morgan kaufmann publishers. james shapiro. thinking evolution terms cellular computing. martyn amos david hodgson editors selected papers first international symposium cellular computing december warwick special issue natural computing. press. stepney j.a. clark tyrrell c.g. johnson timmis partridge adamatsky r.e. smith. journeys non-classical computation grand challenge computing research. grand challenge report national e-science centre university edinburgh. stibor timmis eckert. comparative study real-valued negative selection statistical anomaly detection techniques. jacob pilat bentley timmis editors proceedings international conference artiﬁcial immune systems volume lncs pages k.c. c.m. chew k.k. l.f. wang y.j. chen. autonomous robot navigation intrinsic evolution. proc. congress evolutionary computation part ieee world congress computational intelligence pages ieee press. astro teller manuela veloso. pado learning architecture object recognition. katsushi ikeuchi manuela veloso editors symbolic visual learning pages oxford university press. timmis knight. data mining heuristic approach chapter artiﬁcial immune systems using immune system inspiration data mining. pages idea group. watkins. exploiting immunological metaphors development serial parallel distributed learning algorithms. thesis university kent computing laboratory. parallelizing immune-inspired watkins xintong phadke. algorithm efﬁcient pattern recognition. intelligent engineering systems artiﬁcial neural networks smart engineering system design neural networks fuzzy logic evolutionary programming complex systems artiﬁcial life pages asme press. andrew watkins timmis lois boggess. artiﬁcial immune recognition system immune-inspired supervised learning algorithm. genetic programming evolvable machines weiss homsy t.f. knight toward in-vivo digital circuits. l.f. landweber winfree editors dimacs workshop evolution computation pages springer. stable clusters formation artiﬁcial immune system. jonathan timmis peter bentley editors proceedings international conference artiﬁcial immune systems icaris pages university kent canterbury. university kent canterbury printing unit.", "year": 2005}