{"title": "A Bayesian Model for Plan Recognition in RTS Games applied to StarCraft", "tag": ["cs.LG", "cs.AI"], "abstract": "The task of keyhole (unobtrusive) plan recognition is central to adaptive game AI. \"Tech trees\" or \"build trees\" are the core of real-time strategy (RTS) game strategic (long term) planning. This paper presents a generic and simple Bayesian model for RTS build tree prediction from noisy observations, which parameters are learned from replays (game logs). This unsupervised machine learning approach involves minimal work for the game developers as it leverage players' data (com- mon in RTS). We applied it to StarCraft1 and showed that it yields high quality and robust predictions, that can feed an adaptive AI.", "text": "worked starcraft brood canonical game chess board games. around since sold millions licenses best competitive decade. factions totally different terms units tech trees thus gameplay styles. starcraft games provide tool record game logs replays re-simulated game engine watched improve strategies tactics. high level players feature heavily either improve play study opponents style. observing replays allows players happened understand timing technologies attacks clues/evidences leading infer strategy well weak points used replay feature extract players actions learn probabilities tech trees happen given time. model used buildings part tech trees because buildings easily viewed units enforced main focus starcraft implementation nothing hinders units upgrades well setting without task keyhole plan recognition central adaptive game tech trees build trees core real-time strategy game strategic planning. paper presents generic simple bayesian model build tree prediction noisy observations parameters learned replays unsupervised machine learning approach involves minimal work game developers leverage players’ data applied starcraft showed yields high quality robust predictions feed adaptive players need gather resources build structures military units defeat opponents. often worker units gather resources needed build workers buildings military units research upgrades. resources different uses instance starcraft minerals used everything whereas required advanced buildings military units technology upgrades. military units different types combinations ranged casters contact attack zone attacks small slow fast invisible ﬂying... units attacks defenses counter others rock-paper-scissors. buildings research upgrades deﬁne technology trees tech trees tied strategic planning constraints units types produced numbers spells available player spends resources. real-time strategy games either challenging play against. challenging adapt well dynamically different strategies tactics human perform. play cheat economically gathering resources faster and/or intelligence bypassing war. believe creating adapt copyright association advancement artiﬁcial intelligence rights reserved. mainly parts description compute joint distribution question asked. description consists explaining relevant variables explain dependencies decomposing joint distribution existing preliminary knowledge data forms term product specify compute distributions either parametric forms recursive questions bayesian programs. answering question computing distribution searched known disjoint subsets variables. general bayesian inference practically intractable conditional independence hypotheses constraints often simplify model. also different well-known approximation techniques instance monte carlo methods variational bayes paper simple enough models allow complete inference computed real-time. methodology build/tech tree prediction model outline model infers distribution opponent’s build tree observations tend partial war. common hierarchical structure build tree diminishes raises probabilities. predictive model bayesian program seen bayesian network represented figure generative model great help deal parts observations’ space much data indeed model uncertainty putting large standard deviation rare observations generative models tend converge fewer observations discriminative ones description bayesian program related works work encouraged reading weber mateas data mining approach strategy prediction fact provided dataset. tried evaluated several machine learning algorithms replays labeled strategies related works domains opponent modeling main methods used ends case-based reasoning planning plan recognition precedent works bayesian plan recognition even games using dynamic bayesian networks recognize user’s plan multi-player dungeon adventure. also chung buro schaeffer describe montecarlo plan selection algorithm applied open rts. molineaux ponsen used perform dynamic plan retrieval extracted domain knowledge wargus onta˜n´on base real-time case-based planning system plan dependency graph learned human demonstration. expert demonstrations wargus. improve speed using decision tree select relevant features. hsieh based work molineaux ponsen used starcraft replays construct states building sequences. strategies choices building construction order model. schadd bakkes spronck describe opponent modeling hierarchically structured models opponent behaviour applied work spring hoang lee-urban mu˜noz-avila hierarchical task networks model strategies ﬁrst person shooter goal planners. kabanza improve probabilistic hostile agent task tracker simulated plan recognition) encoding strategies htn. work described paper classiﬁed probabilistic plan recognition. strictly speaking present model-based machine learning used prediction plans model limited prediction. plans build trees directly learned replays bayesian programming probability used alternative classical logic transform incompleteness uncertainty introduce bayesian programs formalism used describe entirely kind bayesian model subsuming bayesian networks bayesian maps equivalent probabilistic factor graphs compatible observations covers fully. instance buildt {pylon gate core} compatible ocore compatible orge words buildt incompatible {on\\{on buildt ree}} bell shape distributions bell shape buildt ree. parameters discrete gaussian distributions learned replays. identiﬁcation bell account uncertainty buildt rees observations. indeed normal distribution begins high dirac seen value sigma accounts fact ﬁrst observation outlier. learning process independent order stream examples seeing point learning phase produces result. questions question benchmarks variables buildt {∅{building}{building}{building∧ building} trees building given race. instance {pylon gate} {pylon gate core} different buildt rees. observations oi∈...n /true tion). ﬁrst generated possible buildt values observed possible buildt values absurd performed competitive match never seen learning. restricted buildt value build trees encountered replays dataset added multiple instances basic unit producing buildings expansions supply buildings build trees terran protoss zerg results presented section represents nine match-ups versus starcraft. worked data-set replays highly skilled human players performed cross-validation dataset used learning remaining dataset used evaluation. performance wise learning part takes around second core inference step takes around second. memory footprint around bits machine. and/or structures. abiding probability theory gives consistency regard concurrent build tree. reconstructive power model shown table increasing noise ﬁxed figure displays ﬁrst evolution error rate increasing random noise consider average distance actual build tree little missing observations success. think robustness precise amount data used. secondly figure displays evolution predictive power increase noise. good enough measured distance actual build tree opponent tolerate. used distance card card. call =best distance probable build tree actually happened. call =mean marginalized distance inferred balanced probability inferences note distance always build tree distance taken account fourth building ﬁrst buildings would penalize prediction metric used strong sense opponent doing miss building switched tech path. table without noise model predict average building advance opponent build next best prediction almost four buildings advance marginalize predictions. course accept error predictive power increases without noise. robustness noise robustness algorithm measured quality predictions build trees missing observations reconstructive power ensues learning parameters real data even build trees possible regard game rules probable given time figure evolution metrics increasing noise graphic shows increase distance predicted build tree probable marginal actual one. bottom graphic shows decrease predictive power numbers buildings ahead model predict build tree closer ﬁxed distance/error discussion perspectives developing beforehand game speciﬁcally deals whatever strategies players come hard. even game developers willing patch afterwards would require really modular design work treat strategy. model adapt evolutions play learning parameters replay dynamically adapt games asking even units technology upgrades buildings. would allow dynamically choose/change build orders strategies. what build/tech tree opponent tacitly seeks distribution buildt reeop break complexity possible combinations obsn possible marginalize buildt reeop consider probable buildt reeop computing efﬁciency. ﬁlter buildt reebot showing probabilities possible strategies poker commentary software finally hard problem detecting fake builds highly skilled players. indeed pro-gamers build orders purposes fool opponent thinking performing opening instance could take early leading opponent think going tech units gather perform early rush instead. conclusion presented probabilistic model computing distribution build trees opponent game. main contributions ability deal partial observations unsupervised learning. model yields high quality prediction results shows strong robustness noise predictive power buildings ahead build tree distance less random noise used production thanks computational memory footprint. implementation free software found online. model starcraft competition entry enables deal incomplete knowledge gathered scouting.", "year": 2011}