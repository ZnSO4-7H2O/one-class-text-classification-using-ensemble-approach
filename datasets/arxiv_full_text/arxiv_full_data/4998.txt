{"title": "On Relaxing Determinism in Arithmetic Circuits", "tag": ["cs.AI", "cs.LG"], "abstract": "The past decade has seen a significant interest in learning tractable probabilistic representations. Arithmetic circuits (ACs) were among the first proposed tractable representations, with some subsequent representations being instances of ACs with weaker or stronger properties. In this paper, we provide a formal basis under which variants on ACs can be compared, and where the precise roles and semantics of their various properties can be made more transparent. This allows us to place some recent developments on ACs in a clearer perspective and to also derive new results for ACs. This includes an exponential separation between ACs with and without determinism; completeness and incompleteness results; and tractability results (or lack thereof) when computing most probable explanations (MPEs).", "text": "past decade seen signiﬁcant interest learning tractable probabilistic representations. arithmetic circuits among ﬁrst proposed tractable representations subsequent representations instances weaker stronger properties. paper provide formal basis variants compared precise roles semantics various properties made transparent. allows place recent developments clearer perspective also derive results acs. includes exponential separation without determinism; completeness incompleteness results; tractability results computing probable explanations arithmetic circuits introduced literature ﬁfteen years tractable representation probability distributions. original work circuits proposed compilation circuits bayesian networks identifying assuming three circuit properties called determinism decomposability smoothness since then literature using arithmetic circuits probabilistic reasoning seen developments. ﬁrst proposal made learn circuits directly data—instead compiling models—therefore creating distinct construction modes circuits. second development reported amounted proposing class arithmetic circuits satisfy determinism name sum-product networks examination literature surrounding arithmetic circuits variants suggests implications relaxing determinism well understood even leading conﬂicting claims cases. treatment smoothness also consistent necessity certain operations arithmetic circuits complexity enforcing goal paper address issues providing systematic formal treatment arithmetic circuits focusing precise roles semantics various properties implications relaxing determinism. make several contributions paper. start reconstructing original deﬁnition arithmetic circuits given assuming circuits represent arbitrary factors instead distributions induced bayesian networks provide deﬁnitions decomposability smoothness determinism context reconstruction isolating precisely role properties play. report already observed literature provide alternate formal proofs sake systematic inclusive treatment. also derive results. ﬁrst separation theorem showing relaxing determinism lead exponentially smaller arithmetic circuits preserving ability circuits compute marginals linear time. begs question whether anything lost relaxing determinism. front highlight ﬁnding already reported literature introduce ones. particular provide expanded proof observation relaxing determinism deprives arithmetic circuits ability compute linear time. also result showing enforcing decomposability power solving even though query tractable decomposable circuits. moreover show relaxing determinism leads type incompleteness call parametric incompleteness important implications compilability circuits models. ﬁnal contribution formal correctness proof linear-time algorithm originally proposed respect reconstructed deﬁnition arithmetic circuits satisfying decomposability determinism smoothness. paper structured follows. reconstruct definition arithmetic circuits given section respect factors instead distributions provide treatment decomposability smoothness section followed treatment determinism section ﬁnally focus relaxation determinism section provide results insights. capital letters denote variables lower-case letters denote values. bold capital letters denote sets variables bold lower-case letters denote instantiations. value compatible instantiation assigns value assign value classical tabular representation factor clearly exponential number variables allows answer probabilistic queries efﬁciently. interest compact representation factors using arithmetic circuits preserving ability answer queries efﬁciently. focus following queries respect factor variables partitioned sets bayesian networks decision variants marginals problems respectively np-complete pp-complete nppp-complete also hence computing marginals difﬁcult computing mpe—an observation quite relevant later. also need deﬁne projection factor variables factor projection denoted next deﬁne arithmetic circuit discrete variables utilized represent distrideﬁnition arithmetic circuit variables rooted whose internal nodes labeled whose leaf nodes labeled either indicator variables non-negative parameters here value variable value circuit instantiation denoted obtained assigning indicators value compatible instantiation otherwise evaluating circuit standard notion computes factor constrains value arithmetic circuit strict subset inputs however notion computes marginals constrains value under every input. hence arithmetic circuits represent distinct functions still compute factor. consider arithmetic circuit computes factor values replacing circuit preserves ability compute factor since +λ¯x every input relevant computing factor. replacement however change function represented circuit ability compute factor marginals. corollary arithmetic circuit computes marginals factor also computes factor. however arithmetic circuit computes factor necessarily compute marginals. property decomposability used tractable probabilistic reasoning compiling bayesian networks arithmetic circuits guaranteed decomposable. property also enforced algorithm proposed learning arithmetic circuits. deﬁnition node arithmetic circuit variables denoted vars variables indicator appearing node arithmetic circuit decomposable every pair children ∗-node satisﬁes vars vars property smoothness also used probabilistic reasoning compiling circuits smooth. also enforced learning algorithm property later called completeness works spns initially consider variable values multiplying circuit node preserves circuit’s ability compute given factor since circuit input relevant computation. technique ensure smoothness circuit incurring polynomial overhead. hence contrary decomposability determinism enforcing smoothness difﬁcult computationally necessary arithmetic circuit compute marginals discuss later. also state following observation used extensively inductive proofs utilize later. polynomial factor figure λaλb+ λaλ¯b +λ¯aλb +λ¯aλ¯b. polynomial factor corresponds simplest circuit computes factor marginals. two-level circuit though exponential size. interest however deeper circuits exponentially sized. later discuss circuit properties allows achieve this sometimes. construct arithmetic circuit computes distribution bayesian network partition function markov network time space linear size models. models correspond factors model representing product factors. construct circuit computes factor given deﬁnition simply combine circuits using multiplication node. result compute factor necessarily compute marginals. next show enforce properties decomposability smoothness circuit maintaining ability compute factor resulting circuit also compute factor marginals. therefore properties turn circuit tractable representation factor allowing compute marginals simply evaluating circuit deﬁnition deﬁnition complete subcircuit arithmetic circuit obtained traversing circuit topdown choosing child visited +-node children visited ∗-node. term values indicator appears coefﬁcient product parameters circuit ∗λx+∗λ¯x+∗λx computes factor decomposable smooth three complete subcircuits term/coefﬁcient pairs. note subcircuits term different coefﬁcients. following lemma proof reveal precise roles decomposability smoothness. given decomposability term complete subcircuit contain conﬂicting values variable. given smoothness term must contain value variable. proof given smoothness every variable must least indicator given decomposability variable must indicator hence contain exactly indicator variable term therefore instantiation variable decomposable smooth circuit every complete subcircuit x-subcircuit instantiation variables circuit treated collection x-subcircuits proofs utilize implication heavily. lemma given decomposable smooth arithmetic circuit coefﬁcients complete subcircuits whose terms compatible circuit input circuit evaluate input proof given lemma induction circuit structure. base case leaf circuit node lemma holds trivially case. inductive case internal circuit node children suppose lemma hold children. ∗-node lemma holds decomposability +-node lemma holds since complete subcircuits correspond union complete subcircuits children. proof consider instantiation variables instantiations variables compatible circuit input corresponding instantiations. coefﬁcients xi-subcircuits. since circuit computes factor hence corollary lemma circuit evaluates .+θm input hence circuit computes factor marginals. theorem justiﬁes standard algorithm computing marginals arithmetic circuits linear time proposed —that simply evaluating circuit deﬁnition work however property determinism also assumed determinism necessary though computing marginals initially observed proof uses different tools used general context. moreover tools associated lemmas turn essential rest treatment role determinism discuss next section. necessity smoothness consider circuits λaλb λaλb λ¯a. circuits decomposable compute factor however circuit smooth smooth. guaranteed compute factor marginals theorem example evaluating instantiation gives according deﬁnition discuss determinism note decomposability determinism exploited recently tractable propositional reasoning within semi-ring setting; initially followed property determinism employed probabilistic reasoning compiling bayesian networks arithmetic circuits deterministic. also enforced algorithm learning arithmetic circuits. property later called selectivity works spns initially using terminology current formulation original deﬁnition determinism would amount this arithmetic circuit deterministic terms complete subcircuits conﬂicting. adopt weaker deﬁnition allows conﬂicting subcircuits long non-zero coefﬁcient. introduced sum-product networks equivalent decomposable smooth acs. precisely converted linear time space conversion straightforward amounts adjusting graphical notation. theorem implies factor marginals computed time linear size arithmetic circuit circuit decomposable smooth. complexity justiﬁed proof theorem. fact unaware justiﬁed algorithm attains complexity without smoothness; also footnote metic circuits tractable representation probability distributions ensured circuits deterministic addition decomposable smooth. moreover several methods proposed compiling bayesian networks properties. methods ensures size proportional size jointree network. another method yields circuits sometimes exponentially smaller implemented publicly available system also empirical evaluation system inference evaluations. determinism needed compute factor marginals needed correctness linear-time algorithm missed earlier works used algorithm non-deterministic without realizing longer correct. oversight noticed later works next reveal reason computing without determinism hard. later section reveal reason algorithm fails without determinism. observation this. consider variables partitioned given decomposable smooth arithmetic circuit computes factor obtain linear time decomposable smooth computes projection achieved simply setting indicators root observation. moreover projection original factor hence polytime algorithm implies polytime algorithm decomposable smooth acs. know however naive bayes networks linear-size decomposable smooth hard networks therefore existence polytime algorithm circuits contradict standard complexity assumptions. observations abstracted following lemma succinctly intuitively explains tractable decomposable smooth circuits. proposed polytime algorithm converts deterministic smooth computes different factor computed original spn. hence mpes cangenerally converted mpes original spn. proof given instantiation value test whether evaluating circuit time linear size circuit. hence problem show np-hardness reduce problem computing naive bayes network np-complete decomposable smooth arithmetic circuit. suppose naive bayes network root node leaf nodes inducing distribution compile network polysize decomposable deterministic smooth arithmetic circuit computes e.g. sum-out variable circuit setting indicators one. resulting circuit decomposable smooth computes factor given value exists instantiation exists instantiation np-complete problem following lemma reveals precise role determinism stands behind correctness linear-time algorithm basically shows one-to-one correspondence non-zero rows factor computed circuit complete subcircuits non-zero coefﬁcients. proof prove suppose circuit contains distinct x-subcircuits non-zero coefﬁcients. establish contradiction. since distinct must include distinct child +-node circuit. evaluate circuit instantiation non-zero values. hence circuit cannot deterministic contradiction. prove suppose x-subcircuits. non-zero coefﬁcient since circuit computes factor must evaluate instantiation hence exactly coefﬁcient. lemma allows prove correctness algorithm given general setting paper. original algorithm based converting deterministic decomposable smooth computes distribution maximizer circuit. evaluating circuit evidence deﬁnition gives value argmaxx∼y arithmetic circuit converted maximizer circuit denoted acmax replacing every +-node max-node. complete subcircuits acmax deﬁned deﬁnition exactly child visited max-node selected. proof lemma one-to-one correspondence non-zero rows factor xsubcircuits non-zero coefﬁcients. coefﬁcients x-subcircuits compatible hence max{θ maxx∼y value coefﬁcient x-subcircuit— call mpe-subcircuit. think algorithm composing mpe-subcircuit addition computing coefﬁcient show acmax max{θ induction circuit structure base case trivially holds leaf circuit nodes assume internal circuit node equality holds children ∗-node mpe-subcircuits coefﬁcient decomposability mpe-subcircuit found joining coefﬁcient. max-node determinism mpesubcircuit found largest maxk discuss impact relaxing determinism point class arithmetic circuits probabilistic sentential decision diagram imposes stronger versions decomposability determinism. enables multiplication polytime otherwise hard standard versions properties consider implications relaxing determinism positive negative. also address apparent paradox could representation allow computation marginals easily allow computation easily recall complexity class included class theorem family factors exists decomposable smooth arithmetic circuit computes marginals size polynomial every deterministic decomposable smooth circuit computes marginals factor must size exponential proof identiﬁes family boolean functions decomposable nnfs sizes polynomial deterministic dnnfs must sizes exponential previously known separations conditional polynomial hierarchy collapsing make assumption this algorithm used selective spns also adapted algebraic model counting sum-product functions determinism required sound since problems correspond boolean circuits weight instantiation product literal weights independent many times instantiation appears subcircuit. denote polysize dnnf function denote polysize decomposable smooth arithmetic circuit obtained replacing inputs corresponding indicator variables replacing conjunctions disjunctions products sums respectively smoothing necessary. resulting arithmetic circuit positive value input original function evaluates true. show factor computed arithmetic circuit deterministic decomposable smooth computes must exponential size. obtained replacing indicator variables corresponding literals variables replacing products sums conjunctions disjunctions respectively replacing positive parameters true zero parameters false. note i.e. complete subcircuit evaluates true corresponding subcircuit positive coefﬁcient. hence sub-exponential size function would sub-exponentially sized d-dnnf know exist standard methods compiling bayesian networks graphical models generally arithmetic circuits indeed limit circuit parameters appearing model factors. hence compilation process amounts ﬁnding circuit structure since property lost insists constructing arithmetic circuits decomposable smooth deterministic. shown following theorem refers dead circuit nodes ones appear complete subcircuits zero coefﬁcients. d-mpe np-complete whereas d-pr pp-complete. moreover complexity class includes decomposable smooth allow compute marginals linear time computing harder hard circuits proof +-node vacuously deterministic. otherwise +-node. since circuit deterministic +-node violates determinism. node included complete subcircuit non-zero coefﬁcient since node violates determinism distinct x-subcircuits non-zero coefﬁcients differ branch selected node since circuit computes factor lemma implies coefﬁcients x-subcircuits must must exist x-subcircuit whose coefﬁcient exclusive i.e. circuit parameter resolve apparent paradox must observe sometimes subtle distinction representation computation needed produce representation. representation decomposable smooth computation algorithm used compile graphical model representation. representation facilitate computation compilation algorithm must sufﬁcient compute query without additional complexity formalize this need following lemma. words decomposable smooth circuit computes marginals boolean factor must also non-trivially deterministic. result major implication compiling probabilistic graphical models deterministic. cannot generally restrict circuit parameters appearing model otherwise circuit exist. theorem consider algorithm takes factors input returns decomposable smooth arithmetic circuit computes marginals factor size input factors time complexity algorithm compute factor time o)). therefore relaxing determinism lead exponentially smaller circuits ﬁnding circuits involved require searching parameters. demands techniques techniques aware compiling models deterministic circuits assume circuit parameters come model parameters. last contribution relates following apparent paradox. factors representing probabilistic graphical model corresponding joint factor consider following decision problems probabilistic graphical models correspond computing marginals dead nodes replaced constant zero without changing factor computed circuit. relax determinism trivially adding dead nodes help obtaining smaller circuits. ﬁndings highlight interesting property decomposable smooth acs. store results exponential number marginal queries result retrieved simple traversal circuit. store answers queries even though queries easier. implication seen angles depending whether circuits compiled models learned data. former case compilation algorithm readily available answer queries cost invoking algorithm query. latter case however answering queries remains challenge. hence learning circuits deterministic needs yield additional beneﬁt compensates loss tractability. could simpler learning algorithm; smaller learned circuit; learned circuit whose factor superior statistical learning viewpoint. proof corollary given instantiation value test whether evaluating circuit time linear size circuit. hence problem show problem np-hard reduce problem computing naive bayes network proof theorem first construct boolean circuit takes inputs outputs true false otherwise. construct circuit factor inputs outputs bitstring representing encoding value construct circuit represents multiplier takes input bitstrings outputs another bitstring representing product finally another circuit takes bitstring input outputs true bitstring represents value greater false otherwise. hence output circuit true constructed circuits size polynomial size inputs i.e. aggregate size factors number bits needed represent values. reduce circuit adding auxiliary variables using variable output gate i.e. reduce circuit satisﬁability -sat; e.g. results boolean factors exists input proof theorem given factors size ﬁrst construct factors size poly lemma invoke algorithm factors obtaining decomposable smooth arithmetic circuit representing time o)). size also amount time required evaluate marginal hence overall time compute", "year": 2017}