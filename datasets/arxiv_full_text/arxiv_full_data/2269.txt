{"title": "Intent-Aware Contextual Recommendation System", "tag": ["cs.IR", "cs.AI", "cs.LG", "stat.ML"], "abstract": "Recommender systems take inputs from user history, use an internal ranking algorithm to generate results and possibly optimize this ranking based on feedback. However, often the recommender system is unaware of the actual intent of the user and simply provides recommendations dynamically without properly understanding the thought process of the user. An intelligent recommender system is not only useful for the user but also for businesses which want to learn the tendencies of their users. Finding out tendencies or intents of a user is a difficult problem to solve.  Keeping this in mind, we sought out to create an intelligent system which will keep track of the user's activity on a web-application as well as determine the intent of the user in each session. We devised a way to encode the user's activity through the sessions. Then, we have represented the information seen by the user in a high dimensional format which is reduced to lower dimensions using tensor factorization techniques. The aspect of intent awareness (or scoring) is dealt with at this stage. Finally, combining the user activity data with the contextual information gives the recommendation score. The final recommendations are then ranked using filtering and collaborative recommendation techniques to show the top-k recommendations to the user. A provision for feedback is also envisioned in the current system which informs the model to update the various weights in the recommender system. Our overall model aims to combine both frequency-based and context-based recommendation systems and quantify the intent of a user to provide better recommendations.  We ran experiments on real-world timestamped user activity data, in the setting of recommending reports to the users of a business analytics tool and the results are better than the baselines. We also tuned certain aspects of our model to arrive at optimized results.", "text": "abstract—recommender systems take inputs user history internal ranking algorithm generate results possibly optimize ranking based feedback. however often recommender system unaware actual intent user simply provides recommendations dynamically without properly understanding thought process user. intelligent recommender system useful user also businesses want learn tendencies users. finding tendencies intents user difﬁcult problem solve. keeping mind sought create intelligent system keep track user’s activity webapplication well determine intent user session. devised encode user’s activity sessions. then represented information seen user high dimensional format reduced lower dimensions using tensor factorization techniques. aspect intent awareness intent scoring dealt stage. finally combining user activity data contextual information gives recommendation score. ﬁnal recommendations ranked using ﬁltering collaborative recommendation techniques show top-k recommendations user. provision feedback also envisioned current system informs model update various weights involved recommender system architecture. overall model aims combine frequencybased context-based recommendation systems quantify intent user provide better recommendations. experiments real-world timestamped user activity data setting recommending reports users business analytics tool/application results better baselines. also tuned certain aspects model arrive optimized results. business world showing advertisement appropriate product appropriate person correct time deﬁnite method attracting customers. general underlying thought behind digital marketing solutions exist current ecosystem. occasionally easy ﬁgure user wants generally isn’t trivial. therefore need effective recommendation system identify user wants needs like doing? probably harder question answer analyzing web-based situation reduces observing things like frequency visits duration spent user page depth visit determining answer question least customized scenario essential component improving recommendations user user ultimately starts liking material shown/suggested starts spending time webpage. sweet spot recommender system algorithm positive reinforcement lead revenue businesses involved greater satisfaction user. thus win-win situation everyone involved. second question user want last time? example electronic music listener would like electronic music recommendations high probability. situations extrapolate better results suggest electronic music soundtracks rather rock music. leads third question user want something never before? difﬁcult question answer much work done providing diversiﬁcation recommendation systems handle problems exactly like identify going user’s mind design smart system. coming second part user needs certain aspects involved. user business setting generally objective provided administration needs fulﬁll. thus understanding function user requirements essential component designing suitable recommendation system. speaking virtual assistant perspective user sales department company want suggestions related methods improving sales bothered getting computer programming suggestions. however programming suggestions useful technical team primarily bother sales issues. thus even though company suggestions high relevance overall group employees company recommender system must understand ieee. personal material permitted. permission ieee must obtained uses current future media including reprinting/republishing material advertising promotional purposes creating collective works resale redistribution servers lists reuse copyrighted component work works. ./icdmw.. simple frequency-based recommender system essentially remembers pages visited previous sessions user suggests pages itself. simple algorithm obvious issues like taking account content page. alternate system recommendations exists content-based recommendation system. lots variations exist literature however basic idea remains i.e. system essentially tries observe usefulness piece content user thus recommend user. usually sort relevance score involved range simple methods like cosine similarity complex algorithms. novelty work lies focus combining aspects recommender systems hope providing better recommendations. propose innovative method encapsulating user intent increase relevance recommendations shown. complex systems vast array parameters changed thus leading thousands possible recommendations suggested user. overall paper suggest methodology rank content combine ranking historical browsing knowledge arrive recommendation score. conduct experiments real data recommending reports users demonstrate effectiveness approach. firstly content-based recommendation system recommends particular kinds items users. consists recommendation system used netﬂix traditional music recommendation systems video recommendation youtube kinds recommendations driven content items recommended proﬁle user’s preference based historical information. combining global popularity user preference videos recommend next videos recommendation youtube described various methodologies like latent factors model relationship items users determine rating videos neighboring videos seen user discussed kinds systems deal markov-model approach. consists models study item similarity understand sequential patterns recommend next items based previous user’s preference different items modeled using markov chain. therefore transition matrix estimated gives probability buying item based previous purchases user. tensor decomposition methods used promote collaborative ﬁltering combining transition matrices similar users. however models lack knowledge contextual signals user. then context-based recommendation systems. systems represent context either explicitly various external signals implicitly using technique exploration exploitation tensor decomposition methods extended combine content context collaborative ﬁltering bandit’s approach used generate context aware online recommendations. instead modeling context explicitly external signals uses user activity user feedback model context hence gives suitable recommendation context. systems lack sequential evolution state consider ﬁnal intent user. finally literature exists tracking user intent analyzing context. contextual markov chains nowcasting models studied track user intent context. however context modeling cases limited consumer applications. context intent enterprise applications dealt differently modeled relevant enterprise users. certain special business intelligence tasks involved require user content multiple reports arrive conclusions. often specialized business intelligence tools used purpose. thus user goal mind prime importance recommendation system. refer goal intent user scenario report. difﬁcult task solve given current literature. system aims provide recommendations manner system tries understand goal user thereby assisting user coming conclusions faster. also helps reducing human error system essentially tries understand quality webpage content suggest webpages accordingly. also case user tool overwhelmed number features provided much history involved user recommendations correct appropriate times. user’s needs understood certain period time. thus case collaborative approach makes sense. work done case expert recommendations literature system utilizes collaborative/group-based model suggest recommendations order address issue. directed edge node signifying user transitioned node probability greater user graph thought markov model since outgoing transition probabilities node sums second step algorithm determine target/intent nodes. motivation behind every user intent mind discussed before. target nodes denoted setting target attribute node target nodes refer possible candidates intent analysis milestone. target nodes arrived analyzing sequences nodes visited user session using following heuristics. node question in-degree greater equal mean in-degrees nodes target attribute algorithm yielded least target node even smallest graphs particularly inherent property statistical mean ensures least node target. next step algorithm model user context. forms basis context-based recommendations discussed before. combined frequency information encoded user navigation graph give ﬁnal recommendation score. combination novel step behind improvement performance. section gives evidence improvement. find suitable recommendation scoring system propose model able address questions. refer recommendation items reports users analysts paper approach works type items parse-able information section describe approach detail. ﬁrst describe graphical contextual models predict relevance items users describe incorporate models together generate recommendations here items refer reports seen users. report dimension gives value metric dimension elements. metric continuous variable dimension categorical variable dimension element value dimension takes. example report page views consists page views individual pages website dimension elements {homepage sales page contacts page} metric elements number views. time-series reports capture variation metric time particular dimension element histogram reports consist histograms metrics different dimension elements. finally brieﬂy discuss feedback scenario propose solution predicting user intent based upon current context combining frequency based graphical model provide relevant recommendations user. deﬁned current context current report looked analyst. solution approach main steps modeling context user matrix context features versus time predicting user intent latent factors obtained current context. combining markov model intent scores ﬁrst step algorithm generate navigation graph user. need learn reports users visit build reports recommend. encoding additional information building graph reports every user. forms frequency-based recommendation aspect algorithm. frequency model illustrated figure explained below. mostly kinds reports seen users report form histograms another form time series. model context current report extract relevant features described below. course varies domain domain based implementation. following features aggregate value maximum minimum value time series location maximum minimum observation longest positive negative runs length time series average absolute change consecutive observation. features calculated metric dimension element pair. alternatively histogram report aggregate value feature populated rest values vector reports seen given user form descriptions building context vector specify place different values reports seen. time instant corresponding vector populated according type report. combining context vectors different time instants context matrix formed users. users tool analyzed clustered categories depending exposure competence level using tool using k-means clustering algorithm. done purpose group-based recommendations discussed section iv-f. users categorized depending upon usage amount activity tool. activity implies duration browsing number redirects reports seen. user matrix combined users within cluster form context tensor. given user different dimension elements metric calculated. cardinality metric cardinality metrics seen user. report observable features. thus dimension context vector denote populate values time-series report aggregate value populated histogram report. remaining positions given value zero indicating present current report. aggregation many context vectors number reports seen form context matrix. dimension context matrix hence signiﬁes context variables varies user user signiﬁes number reports seen. form context tensor consisting context matrices users cluster. method generate context tensor illustrated figure user repeat reports seen total number reports seen equal maximum number reports seen user. since tensor highly sparse number context features varies user user parafac tensor decomposition used obtain latent factors report seen user parafac decomposition three-way tensor i.e. parafac decomposition requires three modes uniform sizes scenario time user modes third mode different sizes. decomposition equivalent solving following optimization problem frobenius norm. latent factor space dimensionality value discussed above. value constant ﬁxed design purposes. typically value much smaller number users leads reduction dimensionality original context tensor decomposition panel user approximated orthonormal matrix rr×r matrix invariant rr×r diagonal matrix rt×r matrix containing collaborative latent factors time instances. latent factors lower dimensional representation reports. user initially estimated latent factors kalman filter kalman filter used enforce dynamics sequential correlations latent factors. priori posteriori latent factors error covariance matrices time step respectively. represents transition matrix. time update step priori factors next time step computed ranking function wish obtain intent score scores normalized here represents distance training point plane separating positive training negative training points. latent factors normalized norm since ranksvm measures distance hyperplane points distance value lies next step algorithm determine recommendation scores candidate recommendable nodes. step puts together frequency-based context-based recommendations. according hypothesis prove combining actually improve recommendations. based training data consists latent factors user eventually ends target node session. similarly consists latent factors user eventually target node session i.e. user reaches target node intent deﬁne belongs otherwise belongs notation induces partial ranking latent factors intent preferred intent deﬁned below. objective ranksvm learn ranking function thus deﬁned s.t. determines trade-off margin maximization error minimization. latter individual losses constitutes upper bound /-loss mistaken preference relations. constraints enforce greater whenever possible penalize violations thereof. optimal learned used induce ranking latent factors intent. relevance score recommendable node score essentially function intent scores probabilistic distance node target nodes using single source dijkstra shortest path algorithm calculate distance node target nodes graph. case edge weights graph distance nodes probabilities transition probabilities multiplied traversing graph. keeping mind converted edge weights negative natural logarithms thus adding logarithms corresponds multiplication probabilities. hence modiﬁcation single source dijkstra shortest path algorithm applied shortest paths. finally node list targets probability reaching targets node based user’s historical user navigation graph calculated. fraction total browsing time user spent node word mass used denote notion weighing i.e. mass node relatively high user weighed node spends time compared nodes. recommendation scoring technique illustrated figure recommendation score generated nodes connected current node well nodes connected nodes hence essentially -step -step distanced nodes score. calculation done user graphs available irrespective current user. reasoning behind formula henceforth explained. gives true score relation current user context intent. score incorporates report data stimuli. calculation results scoring intents really deal completely actual history involving nodes recommended. score assures node certain intents reached reached however past user behavior might indicate tendencies users. historical analysis might reveal user always interested certain kinds reports always encoded contextual information. handling kind cases multiplying edge weight relevance score makes logical sense edge weight like weighing factor relevance score. thus node high user rarely visits shown recommendation fact user likely useful browsing history. thus cases expected edge weight well relevance positively correlated multiplication would affect ordering. however cases correlation edge weight relevance negative multiplication plays role trading value arriving realistic prediction. finally mass added offset recommendation score. generally small factor signiﬁes importance node. cases similar mass determine ranking actual time spent user historically must factored cases based empirical analysis mass play deciding role such. however mass attribute used ﬁnally break ties apart recommending reports user user’s graph also recommended reports user graphs user groups. step especially useful novice users much personal history tool. users sourcing recommendations experienced group good idea shown work. first identify users selected user groups based clusters. inexperienced users gave recommendations clusters contained experienced users. secondly identifying relevant clusters identiﬁed users report/node graph least target node. finally selected users calculated recommendation score similar manner calculated slight variations. intent scores intent scores original user edge weights mass taken selected users’ graphs. therefore notion distance discussed also according selected users’ navigation graph. calculated recommendation scores nodes users present original user graph i.e. nodes novel original users. recommendation scores combined recommendation scores original user give ﬁnal recommendations. next section feedback used inform model provide better recommendations. ﬁnal step algorithm gather implicit/explicit feedback update system. feedback important requirement ranking system informs algorithm correctness rectiﬁcation done subsequent calculations. deﬁned feedback following situations implicit positive feedback user click recommendations shown list however navigates page existed list. particularly important piece information addresses many problems existing today’s recommendation system. recommender intelligently identiﬁes actions user updates accordingly. implicit negative feedback user click recommendations shown list navigates page exist list. thus even though user delete recommendation taken weak signal negative feedback. leads change values introduced before. appropriate values updated basis mathematical optimization methods well empirical observations. also updating algorithm must slightly different giving feedback -step nodes compared -step recommendations. simulation system planned evaluate feedback mechanism. section showcase performance improvements model compared baseline models. ﬁrst describe dataset algorithm setup respect case evaluate model baselines. used real-world data. corresponds report access. data essentially consisted time-stamped user activity tracking. data ﬁltered give relevant information like timestamp report requested metrics seen data also information related session used sessionize context modeling. used days hit-level data. data taken across different companies number users varies depending upon company. number reports visited user also varies depending upon tasks. data contained information user well reports visited user timestamp. data ﬁnally sessionized understand segregate transitions. trained model data tested remaining data. work conducted using alternative training-testing methods like interleaved training increasing percentage training increasing amount overall data tested model baselines described below frequency recommendation based upon probabilistic graphical model i.e. based upon edge weights user navigation graph. tested model metrics ndcg precision recall w-auc results shown users seeing considerable number unique reports. results performance algorithm baselines summarized table seen proposed model i.e. markov model context modeling using parafac kalman filtering works better models respect metrics used. precision near upper limit number recommendations generated every recommended list could correct recommendation testing done simply checking immediate next report access. number reports seen/accessible huge number thus driving overall results case precision. however clear comparison algorithm indeed performs better baselines respect metric. max-i maximum intent scores sum-i intent scores observed dot-ixd performs better methods precision recall. intuition behind max-ixd extract information relevant visited nodes among options. similarly intuition behind dotixd single score captures maximum encodes information possible intent scores distances. proposed model table uses described sum-i method. intuition behind proposing sum-i fact considers relevance scores fully without discount lead bias. already considering probabilities reaching node user navigation graph necessary encode distance information paper proposed novel recommendation system combining probabilistic graphical model tensor factorization kalman ﬁltering. though steps like tensor factorization computationally heavy conducted long periods updating latent factors kalman ﬁlter fast process thus making system suitable usage real-time. results able justify hypothesis combining frequency context-based recommendations lead better results. analysis maybe conducted tuning parameters incorporating feedback system lead improved results. c.-n. ziegler mcnee konstan lausen improving recommendation lists topic diversiﬁcation proceedings international conference world wide ser. york available http//doi.acm.org/./. yoshii goto komatani ogata okuno hybrid collaborative content-based music recommendation using probabilistic model latent user preferences proceedings international conference music information retrieval james davidson junning taylor vleet sujoy gupta mike lambert sampath youtube video recommendation system proceedings fourth conference recommender systems ser. recsys york available http//doi.acm.org/./. rendle freudenthaler schmidt-thieme factorizing personalized markov chains recommendation proceedings international conference world wide ser. york available http//doi.acm.org/./. kiseleva pechenizkiy calders predicting current user intent contextual markov models ieee international conference data mining workshops icdm workshops december available http//dx.doi.org/./icdmw.. yuan mcdonald zhang collaborative nowcasting contextual recommendation proceedings international conference world wide montreal canada april available http//doi.acm.org/./. arnold clark collier leech sutton differential effect knowledge-based system explanations novice expert judgment decisions quarterly vol. available http//www.jstor.org/stable/ wiens horvitz guttag patient risk stratiﬁcation hospital-associated diff time-series classiﬁcation task advances neural information processing systems pereira burges bottou weinberger eds. curran associates inc. giannopoulos brefeld dalamagas sellis learning rank user intent proceedings international conference information knowledge management ser. cikm york available http//doi.acm.org/./.", "year": 2017}