{"title": "Speculation on graph computation architectures and computing via  synchronization", "tag": ["cs.NE", "cs.AI", "F.1.1; J.3; I.2.m"], "abstract": "A speculative overview of a future topic of research. The paper is a collection of ideas concerning two related areas:  1) Graph computation machines (\"computing with graphs\"). This is the class of models of computation in which the state of the computation is represented as a graph or network.  2) Arc-based neural networks, which store information not as activation in the nodes, but rather by adding and deleting arcs. Sometimes the arcs may be interpreted as synchronization.  Warnings to readers: this is not the sort of thing that one might submit to a journal or conference. No proofs are presented. The presentation is informal, and written at an introductory level. You'll probably want to wait for a more concise presentation.", "text": "http//purl.net/net/bshanks/work/papers/computingwithgraphsandsynchronization/ recommend check site reading this; perhaps someday rewritten concise version pointer subsequent paper could save time. project tried take step back explore ways brain might implement simple computations. rather driven biological constraints project attempt think unexpected and/or unlikely architectures. topic computing graphs. given computation realized structure nodes connected edges sort mechanisms might used compute? speciﬁcally time step graph representing current state network. update rules which given state graph time tell state time appendix formal deﬁnition graph computation. goal then explore types graphs graph structures update rules might suitable computation. clearly inﬁnite variety possible setups would turing-equivalent computational power. still valuable however look exemplars inﬁnite order strengthen one’s intuition might possible. architecture powerful turing machines. necessary suﬃcient architecture able express nand gate able express copy gate able compose them. appendix much elaboration turing machines graph computation architecture powerful turing machine. example could require change state node determined using information state arcs connected node. permissive version would allow information state neighboring nodes used. similar update rules could applied state arcs. interesting notions locality would allow access local graphical structure. instance recalculating state node allow node member cycle. information available merely considering state neighboring nodes arcs them sense local could still regions network node information notably already work cellular automatons contain machines turing-equivalent power. example conway’s game life support turing-complete machines. chapter computation uses arcs nodes basic computational elements. conventional neural networks visualized pulses activation traveling line node another. pulses arrive nodes perform simple computation perhaps emit pulse travel nodes. instead visualizing pulse activation traveling lines visualize ideal computation network lines ﬂickering none computational action individual impulses action changing structure connections nodes. gates often formulated subgraphs. deﬁne potential arcs subgraph input ports potential arcs output ports. assume chosen ﬁxed update rule. update rule eﬀect subgraph’s input ports output ports matter bigger graph embedded subgraph like subroutine. logic gate simple subroutine. brain might interpret nodes neurons arcs representing synchrony neurons within time step. allow model synchronization-based neural computation graphs. implementation details separate question kinds turing-complete graph computation machines exist i’ve separate chapter. often qualitative physics update rule rather explanation update rule update rule might implemented physical system; that’s implementation details. course plasticity fast enough would probably want model long-term plasticity also short-term plasticity faciliation depression. again maybe brain areas compute slowly. synchronization complex phenomena cannot completely modeled without tools like diﬀerential equations nonlinear dynamics. abstract away actual physics synchronization. instead we’re looking qualitative physics synchronization. qualitative physics cognitive science term basically means abstracting numbers away modeling state transition diagram diﬀerent regimes system. chapter considers special case computation arcs represent synchronization nodes. covers synchronization might mean points appendices give simple models neural synchronization logic gates implemented models. exact synchronization reﬂexive symmetric transitive. equivalence relation given time relation exact synchronization partitions network equivalence classes. visualized exact synchronization nodes drawing nodes exactly synchronized graph would consist entirely cliques. example nodes exactly synchronized near time might represent synchronization state network graph sometimes i’ll term sync mean edge denoting exact synchronization neurons. sync arcs diﬀerent underlying connective edges network. sync arcs represent presence synchronization time step whereas connective edges represent synaptic connection. i’ll usually draw sync arcs dotted lines. might implement logic gates exact-synchrony based computing? appendix implementations fundamental boolean gates appendix implementations other non-boolean gates. sections also contain distinct qualitative physics models synchronization. appendix you’ll deﬁnition another kind synchrony dynamic synchronization applicable forced nonlinear oscillators. common phenomenon systems devil’s staircase introduced. also brief deﬁnition circle maps given; circle maps simple well-studied discrete dynamical systems exhibit mode-locking devil’s staircase special cases integrate-and-ﬁre neurons. perhaps could presence absence dynamic synchronization represent binary data. framework logic gate might represented nonlinear oscillator receiving input forcing oscillators. oscillator would forcing third oscillator. synchronization lack synchronization oscillators would represent binary inputs output. fig. shows logic gate might look. figure logic gate might look like using dynamic synchronization. node represents nonlinear oscillator arrows represent forcing. dynamic synchronization input true. dynamic synchronization input true. dynamic synchronization output true. notion locality node know neighbors also involved cycle perhaps arcs involved cycle. binary logic would represented whether node part cycle whether not. node represents bit; means part cycle means part cycle. another think things would look potential cycles graph. binary logic would represented whether potential cycle actual cycle. potential cycle bit; cycle active figure two-input one-output gate might look like. intact cycle represents broken cycle represents inputs cycle cycle; output cycle. example cycles intact input true true output true figure two-input one-output gate might look like. intact cycle represents broken cycle represents inputs cycle cycle; output cycle. example cycles broken cycle intact input false false output true", "year": 2004}